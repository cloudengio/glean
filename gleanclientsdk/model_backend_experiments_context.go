/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the BackendExperimentsContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackendExperimentsContext{}

// BackendExperimentsContext struct for BackendExperimentsContext
type BackendExperimentsContext struct {
	// List of experiment ids for the corresponding request.
	ExperimentIds []int64 `json:"experimentIds,omitempty"`
}

// NewBackendExperimentsContext instantiates a new BackendExperimentsContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackendExperimentsContext() *BackendExperimentsContext {
	this := BackendExperimentsContext{}
	return &this
}

// NewBackendExperimentsContextWithDefaults instantiates a new BackendExperimentsContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackendExperimentsContextWithDefaults() *BackendExperimentsContext {
	this := BackendExperimentsContext{}
	return &this
}

// GetExperimentIds returns the ExperimentIds field value if set, zero value otherwise.
func (o *BackendExperimentsContext) GetExperimentIds() []int64 {
	if o == nil || IsNil(o.ExperimentIds) {
		var ret []int64
		return ret
	}
	return o.ExperimentIds
}

// GetExperimentIdsOk returns a tuple with the ExperimentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackendExperimentsContext) GetExperimentIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ExperimentIds) {
		return nil, false
	}
	return o.ExperimentIds, true
}

// HasExperimentIds returns a boolean if a field has been set.
func (o *BackendExperimentsContext) HasExperimentIds() bool {
	if o != nil && !IsNil(o.ExperimentIds) {
		return true
	}

	return false
}

// SetExperimentIds gets a reference to the given []int64 and assigns it to the ExperimentIds field.
func (o *BackendExperimentsContext) SetExperimentIds(v []int64) {
	o.ExperimentIds = v
}

func (o BackendExperimentsContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackendExperimentsContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExperimentIds) {
		toSerialize["experimentIds"] = o.ExperimentIds
	}
	return toSerialize, nil
}

type NullableBackendExperimentsContext struct {
	value *BackendExperimentsContext
	isSet bool
}

func (v NullableBackendExperimentsContext) Get() *BackendExperimentsContext {
	return v.value
}

func (v *NullableBackendExperimentsContext) Set(val *BackendExperimentsContext) {
	v.value = val
	v.isSet = true
}

func (v NullableBackendExperimentsContext) IsSet() bool {
	return v.isSet
}

func (v *NullableBackendExperimentsContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackendExperimentsContext(val *BackendExperimentsContext) *NullableBackendExperimentsContext {
	return &NullableBackendExperimentsContext{value: val, isSet: true}
}

func (v NullableBackendExperimentsContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackendExperimentsContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


