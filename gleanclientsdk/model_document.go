/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Document type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Document{}

// Document struct for Document
type Document struct {
	// The document id.
	Id *string `json:"id,omitempty"`
	// The app or other repository type from which the document was extracted
	Datasource *string `json:"datasource,omitempty"`
	ConnectorType *ConnectorType `json:"connectorType,omitempty"`
	// The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
	DocType *string `json:"docType,omitempty"`
	Content *DocumentContent `json:"content,omitempty"`
	ContainerDocument *Document `json:"containerDocument,omitempty"`
	ParentDocument *Document `json:"parentDocument,omitempty"`
	// The title of the document.
	Title *string `json:"title,omitempty"`
	// A permalink for the document.
	Url *string `json:"url,omitempty"`
	Metadata *DocumentMetadata `json:"metadata,omitempty"`
	// A list of content sub-sections in the document, e.g. text blocks with different headings in a Drive doc or Confluence page.
	Sections []DocumentSection `json:"sections,omitempty"`
}

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument() *Document {
	this := Document{}
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Document) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Document) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Document) SetId(v string) {
	o.Id = &v
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *Document) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *Document) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *Document) SetDatasource(v string) {
	o.Datasource = &v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *Document) GetConnectorType() ConnectorType {
	if o == nil || IsNil(o.ConnectorType) {
		var ret ConnectorType
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetConnectorTypeOk() (*ConnectorType, bool) {
	if o == nil || IsNil(o.ConnectorType) {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *Document) HasConnectorType() bool {
	if o != nil && !IsNil(o.ConnectorType) {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given ConnectorType and assigns it to the ConnectorType field.
func (o *Document) SetConnectorType(v ConnectorType) {
	o.ConnectorType = &v
}

// GetDocType returns the DocType field value if set, zero value otherwise.
func (o *Document) GetDocType() string {
	if o == nil || IsNil(o.DocType) {
		var ret string
		return ret
	}
	return *o.DocType
}

// GetDocTypeOk returns a tuple with the DocType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocType) {
		return nil, false
	}
	return o.DocType, true
}

// HasDocType returns a boolean if a field has been set.
func (o *Document) HasDocType() bool {
	if o != nil && !IsNil(o.DocType) {
		return true
	}

	return false
}

// SetDocType gets a reference to the given string and assigns it to the DocType field.
func (o *Document) SetDocType(v string) {
	o.DocType = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *Document) GetContent() DocumentContent {
	if o == nil || IsNil(o.Content) {
		var ret DocumentContent
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetContentOk() (*DocumentContent, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *Document) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given DocumentContent and assigns it to the Content field.
func (o *Document) SetContent(v DocumentContent) {
	o.Content = &v
}

// GetContainerDocument returns the ContainerDocument field value if set, zero value otherwise.
func (o *Document) GetContainerDocument() Document {
	if o == nil || IsNil(o.ContainerDocument) {
		var ret Document
		return ret
	}
	return *o.ContainerDocument
}

// GetContainerDocumentOk returns a tuple with the ContainerDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetContainerDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.ContainerDocument) {
		return nil, false
	}
	return o.ContainerDocument, true
}

// HasContainerDocument returns a boolean if a field has been set.
func (o *Document) HasContainerDocument() bool {
	if o != nil && !IsNil(o.ContainerDocument) {
		return true
	}

	return false
}

// SetContainerDocument gets a reference to the given Document and assigns it to the ContainerDocument field.
func (o *Document) SetContainerDocument(v Document) {
	o.ContainerDocument = &v
}

// GetParentDocument returns the ParentDocument field value if set, zero value otherwise.
func (o *Document) GetParentDocument() Document {
	if o == nil || IsNil(o.ParentDocument) {
		var ret Document
		return ret
	}
	return *o.ParentDocument
}

// GetParentDocumentOk returns a tuple with the ParentDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetParentDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.ParentDocument) {
		return nil, false
	}
	return o.ParentDocument, true
}

// HasParentDocument returns a boolean if a field has been set.
func (o *Document) HasParentDocument() bool {
	if o != nil && !IsNil(o.ParentDocument) {
		return true
	}

	return false
}

// SetParentDocument gets a reference to the given Document and assigns it to the ParentDocument field.
func (o *Document) SetParentDocument(v Document) {
	o.ParentDocument = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Document) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Document) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Document) SetTitle(v string) {
	o.Title = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Document) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Document) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Document) SetUrl(v string) {
	o.Url = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Document) GetMetadata() DocumentMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret DocumentMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetMetadataOk() (*DocumentMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Document) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given DocumentMetadata and assigns it to the Metadata field.
func (o *Document) SetMetadata(v DocumentMetadata) {
	o.Metadata = &v
}

// GetSections returns the Sections field value if set, zero value otherwise.
func (o *Document) GetSections() []DocumentSection {
	if o == nil || IsNil(o.Sections) {
		var ret []DocumentSection
		return ret
	}
	return o.Sections
}

// GetSectionsOk returns a tuple with the Sections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetSectionsOk() ([]DocumentSection, bool) {
	if o == nil || IsNil(o.Sections) {
		return nil, false
	}
	return o.Sections, true
}

// HasSections returns a boolean if a field has been set.
func (o *Document) HasSections() bool {
	if o != nil && !IsNil(o.Sections) {
		return true
	}

	return false
}

// SetSections gets a reference to the given []DocumentSection and assigns it to the Sections field.
func (o *Document) SetSections(v []DocumentSection) {
	o.Sections = v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Document) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	if !IsNil(o.ConnectorType) {
		toSerialize["connectorType"] = o.ConnectorType
	}
	if !IsNil(o.DocType) {
		toSerialize["docType"] = o.DocType
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.ContainerDocument) {
		toSerialize["containerDocument"] = o.ContainerDocument
	}
	if !IsNil(o.ParentDocument) {
		toSerialize["parentDocument"] = o.ParentDocument
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.Sections) {
		toSerialize["sections"] = o.Sections
	}
	return toSerialize, nil
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


