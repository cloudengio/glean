/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the MetaConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaConfig{}

// MetaConfig struct for MetaConfig
type MetaConfig struct {
	DatumConfigs *map[string]DatumConfig `json:"datumConfigs,omitempty"`
	Keys []string `json:"keys,omitempty"`
	Separator *string `json:"separator,omitempty"`
	HideInAttachment *bool `json:"hideInAttachment,omitempty"`
	Label *StatusLabelConfig `json:"label,omitempty"`
	CommonKeys []string `json:"commonKeys,omitempty"`
}

// NewMetaConfig instantiates a new MetaConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaConfig() *MetaConfig {
	this := MetaConfig{}
	return &this
}

// NewMetaConfigWithDefaults instantiates a new MetaConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaConfigWithDefaults() *MetaConfig {
	this := MetaConfig{}
	return &this
}

// GetDatumConfigs returns the DatumConfigs field value if set, zero value otherwise.
func (o *MetaConfig) GetDatumConfigs() map[string]DatumConfig {
	if o == nil || IsNil(o.DatumConfigs) {
		var ret map[string]DatumConfig
		return ret
	}
	return *o.DatumConfigs
}

// GetDatumConfigsOk returns a tuple with the DatumConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaConfig) GetDatumConfigsOk() (*map[string]DatumConfig, bool) {
	if o == nil || IsNil(o.DatumConfigs) {
		return nil, false
	}
	return o.DatumConfigs, true
}

// HasDatumConfigs returns a boolean if a field has been set.
func (o *MetaConfig) HasDatumConfigs() bool {
	if o != nil && !IsNil(o.DatumConfigs) {
		return true
	}

	return false
}

// SetDatumConfigs gets a reference to the given map[string]DatumConfig and assigns it to the DatumConfigs field.
func (o *MetaConfig) SetDatumConfigs(v map[string]DatumConfig) {
	o.DatumConfigs = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *MetaConfig) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaConfig) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *MetaConfig) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *MetaConfig) SetKeys(v []string) {
	o.Keys = v
}

// GetSeparator returns the Separator field value if set, zero value otherwise.
func (o *MetaConfig) GetSeparator() string {
	if o == nil || IsNil(o.Separator) {
		var ret string
		return ret
	}
	return *o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaConfig) GetSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Separator) {
		return nil, false
	}
	return o.Separator, true
}

// HasSeparator returns a boolean if a field has been set.
func (o *MetaConfig) HasSeparator() bool {
	if o != nil && !IsNil(o.Separator) {
		return true
	}

	return false
}

// SetSeparator gets a reference to the given string and assigns it to the Separator field.
func (o *MetaConfig) SetSeparator(v string) {
	o.Separator = &v
}

// GetHideInAttachment returns the HideInAttachment field value if set, zero value otherwise.
func (o *MetaConfig) GetHideInAttachment() bool {
	if o == nil || IsNil(o.HideInAttachment) {
		var ret bool
		return ret
	}
	return *o.HideInAttachment
}

// GetHideInAttachmentOk returns a tuple with the HideInAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaConfig) GetHideInAttachmentOk() (*bool, bool) {
	if o == nil || IsNil(o.HideInAttachment) {
		return nil, false
	}
	return o.HideInAttachment, true
}

// HasHideInAttachment returns a boolean if a field has been set.
func (o *MetaConfig) HasHideInAttachment() bool {
	if o != nil && !IsNil(o.HideInAttachment) {
		return true
	}

	return false
}

// SetHideInAttachment gets a reference to the given bool and assigns it to the HideInAttachment field.
func (o *MetaConfig) SetHideInAttachment(v bool) {
	o.HideInAttachment = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *MetaConfig) GetLabel() StatusLabelConfig {
	if o == nil || IsNil(o.Label) {
		var ret StatusLabelConfig
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaConfig) GetLabelOk() (*StatusLabelConfig, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *MetaConfig) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given StatusLabelConfig and assigns it to the Label field.
func (o *MetaConfig) SetLabel(v StatusLabelConfig) {
	o.Label = &v
}

// GetCommonKeys returns the CommonKeys field value if set, zero value otherwise.
func (o *MetaConfig) GetCommonKeys() []string {
	if o == nil || IsNil(o.CommonKeys) {
		var ret []string
		return ret
	}
	return o.CommonKeys
}

// GetCommonKeysOk returns a tuple with the CommonKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaConfig) GetCommonKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.CommonKeys) {
		return nil, false
	}
	return o.CommonKeys, true
}

// HasCommonKeys returns a boolean if a field has been set.
func (o *MetaConfig) HasCommonKeys() bool {
	if o != nil && !IsNil(o.CommonKeys) {
		return true
	}

	return false
}

// SetCommonKeys gets a reference to the given []string and assigns it to the CommonKeys field.
func (o *MetaConfig) SetCommonKeys(v []string) {
	o.CommonKeys = v
}

func (o MetaConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatumConfigs) {
		toSerialize["datumConfigs"] = o.DatumConfigs
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Separator) {
		toSerialize["separator"] = o.Separator
	}
	if !IsNil(o.HideInAttachment) {
		toSerialize["hideInAttachment"] = o.HideInAttachment
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.CommonKeys) {
		toSerialize["commonKeys"] = o.CommonKeys
	}
	return toSerialize, nil
}

type NullableMetaConfig struct {
	value *MetaConfig
	isSet bool
}

func (v NullableMetaConfig) Get() *MetaConfig {
	return v.value
}

func (v *NullableMetaConfig) Set(val *MetaConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaConfig(val *MetaConfig) *NullableMetaConfig {
	return &NullableMetaConfig{value: val, isSet: true}
}

func (v NullableMetaConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


