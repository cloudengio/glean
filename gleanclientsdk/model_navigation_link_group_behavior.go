/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// NavigationLinkGroupBehavior the model 'NavigationLinkGroupBehavior'
type NavigationLinkGroupBehavior string

// List of NavigationLinkGroupBehavior
const (
	SEPARATE NavigationLinkGroupBehavior = "SEPARATE"
	COLLAPSIBLE NavigationLinkGroupBehavior = "COLLAPSIBLE"
)

// All allowed values of NavigationLinkGroupBehavior enum
var AllowedNavigationLinkGroupBehaviorEnumValues = []NavigationLinkGroupBehavior{
	"SEPARATE",
	"COLLAPSIBLE",
}

func (v *NavigationLinkGroupBehavior) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NavigationLinkGroupBehavior(value)
	for _, existing := range AllowedNavigationLinkGroupBehaviorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NavigationLinkGroupBehavior", value)
}

// NewNavigationLinkGroupBehaviorFromValue returns a pointer to a valid NavigationLinkGroupBehavior
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNavigationLinkGroupBehaviorFromValue(v string) (*NavigationLinkGroupBehavior, error) {
	ev := NavigationLinkGroupBehavior(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NavigationLinkGroupBehavior: valid values are %v", v, AllowedNavigationLinkGroupBehaviorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NavigationLinkGroupBehavior) IsValid() bool {
	for _, existing := range AllowedNavigationLinkGroupBehaviorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NavigationLinkGroupBehavior value
func (v NavigationLinkGroupBehavior) Ptr() *NavigationLinkGroupBehavior {
	return &v
}

type NullableNavigationLinkGroupBehavior struct {
	value *NavigationLinkGroupBehavior
	isSet bool
}

func (v NullableNavigationLinkGroupBehavior) Get() *NavigationLinkGroupBehavior {
	return v.value
}

func (v *NullableNavigationLinkGroupBehavior) Set(val *NavigationLinkGroupBehavior) {
	v.value = val
	v.isSet = true
}

func (v NullableNavigationLinkGroupBehavior) IsSet() bool {
	return v.isSet
}

func (v *NullableNavigationLinkGroupBehavior) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNavigationLinkGroupBehavior(val *NavigationLinkGroupBehavior) *NullableNavigationLinkGroupBehavior {
	return &NullableNavigationLinkGroupBehavior{value: val, isSet: true}
}

func (v NullableNavigationLinkGroupBehavior) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNavigationLinkGroupBehavior) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

