/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Thumbnail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Thumbnail{}

// Thumbnail struct for Thumbnail
type Thumbnail struct {
	// Photo id if the thumbnail is from splash.
	PhotoId *string `json:"photoId,omitempty"`
	// Thumbnail url. This can be user provided image and/or from downloaded images hosted by glean.
	Url *string `json:"url,omitempty"`
}

// NewThumbnail instantiates a new Thumbnail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThumbnail() *Thumbnail {
	this := Thumbnail{}
	return &this
}

// NewThumbnailWithDefaults instantiates a new Thumbnail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThumbnailWithDefaults() *Thumbnail {
	this := Thumbnail{}
	return &this
}

// GetPhotoId returns the PhotoId field value if set, zero value otherwise.
func (o *Thumbnail) GetPhotoId() string {
	if o == nil || IsNil(o.PhotoId) {
		var ret string
		return ret
	}
	return *o.PhotoId
}

// GetPhotoIdOk returns a tuple with the PhotoId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Thumbnail) GetPhotoIdOk() (*string, bool) {
	if o == nil || IsNil(o.PhotoId) {
		return nil, false
	}
	return o.PhotoId, true
}

// HasPhotoId returns a boolean if a field has been set.
func (o *Thumbnail) HasPhotoId() bool {
	if o != nil && !IsNil(o.PhotoId) {
		return true
	}

	return false
}

// SetPhotoId gets a reference to the given string and assigns it to the PhotoId field.
func (o *Thumbnail) SetPhotoId(v string) {
	o.PhotoId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Thumbnail) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Thumbnail) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Thumbnail) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Thumbnail) SetUrl(v string) {
	o.Url = &v
}

func (o Thumbnail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Thumbnail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PhotoId) {
		toSerialize["photoId"] = o.PhotoId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableThumbnail struct {
	value *Thumbnail
	isSet bool
}

func (v NullableThumbnail) Get() *Thumbnail {
	return v.value
}

func (v *NullableThumbnail) Set(val *Thumbnail) {
	v.value = val
	v.isSet = true
}

func (v NullableThumbnail) IsSet() bool {
	return v.isSet
}

func (v *NullableThumbnail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThumbnail(val *Thumbnail) *NullableThumbnail {
	return &NullableThumbnail{value: val, isSet: true}
}

func (v NullableThumbnail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThumbnail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


