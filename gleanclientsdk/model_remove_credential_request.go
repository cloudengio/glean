/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the RemoveCredentialRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveCredentialRequest{}

// RemoveCredentialRequest struct for RemoveCredentialRequest
type RemoveCredentialRequest struct {
	// the datasource the credential applies to
	Datasource *string `json:"datasource,omitempty"`
	// the user info (email or username for example) for the credential
	User *string `json:"user,omitempty"`
}

// NewRemoveCredentialRequest instantiates a new RemoveCredentialRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveCredentialRequest() *RemoveCredentialRequest {
	this := RemoveCredentialRequest{}
	return &this
}

// NewRemoveCredentialRequestWithDefaults instantiates a new RemoveCredentialRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveCredentialRequestWithDefaults() *RemoveCredentialRequest {
	this := RemoveCredentialRequest{}
	return &this
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *RemoveCredentialRequest) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveCredentialRequest) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *RemoveCredentialRequest) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *RemoveCredentialRequest) SetDatasource(v string) {
	o.Datasource = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *RemoveCredentialRequest) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoveCredentialRequest) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *RemoveCredentialRequest) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *RemoveCredentialRequest) SetUser(v string) {
	o.User = &v
}

func (o RemoveCredentialRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveCredentialRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableRemoveCredentialRequest struct {
	value *RemoveCredentialRequest
	isSet bool
}

func (v NullableRemoveCredentialRequest) Get() *RemoveCredentialRequest {
	return v.value
}

func (v *NullableRemoveCredentialRequest) Set(val *RemoveCredentialRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveCredentialRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveCredentialRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveCredentialRequest(val *RemoveCredentialRequest) *NullableRemoveCredentialRequest {
	return &NullableRemoveCredentialRequest{value: val, isSet: true}
}

func (v NullableRemoveCredentialRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveCredentialRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


