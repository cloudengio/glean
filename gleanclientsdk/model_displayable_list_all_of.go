/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DisplayableListAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisplayableListAllOf{}

// DisplayableListAllOf All configurations for a list that can be displayed in FE
type DisplayableListAllOf struct {
	// unique identifier for a list, not unique amongst all objects
	Id *int32 `json:"id,omitempty"`
	// unstructured identifier for the source to render (id, url, query)
	SourceId *string `json:"sourceId,omitempty"`
	Config *DisplayableListConfig `json:"config,omitempty"`
}

// NewDisplayableListAllOf instantiates a new DisplayableListAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayableListAllOf() *DisplayableListAllOf {
	this := DisplayableListAllOf{}
	return &this
}

// NewDisplayableListAllOfWithDefaults instantiates a new DisplayableListAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayableListAllOfWithDefaults() *DisplayableListAllOf {
	this := DisplayableListAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DisplayableListAllOf) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayableListAllOf) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DisplayableListAllOf) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *DisplayableListAllOf) SetId(v int32) {
	o.Id = &v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise.
func (o *DisplayableListAllOf) GetSourceId() string {
	if o == nil || IsNil(o.SourceId) {
		var ret string
		return ret
	}
	return *o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayableListAllOf) GetSourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.SourceId) {
		return nil, false
	}
	return o.SourceId, true
}

// HasSourceId returns a boolean if a field has been set.
func (o *DisplayableListAllOf) HasSourceId() bool {
	if o != nil && !IsNil(o.SourceId) {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given string and assigns it to the SourceId field.
func (o *DisplayableListAllOf) SetSourceId(v string) {
	o.SourceId = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DisplayableListAllOf) GetConfig() DisplayableListConfig {
	if o == nil || IsNil(o.Config) {
		var ret DisplayableListConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayableListAllOf) GetConfigOk() (*DisplayableListConfig, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DisplayableListAllOf) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given DisplayableListConfig and assigns it to the Config field.
func (o *DisplayableListAllOf) SetConfig(v DisplayableListConfig) {
	o.Config = &v
}

func (o DisplayableListAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisplayableListAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.SourceId) {
		toSerialize["sourceId"] = o.SourceId
	}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	return toSerialize, nil
}

type NullableDisplayableListAllOf struct {
	value *DisplayableListAllOf
	isSet bool
}

func (v NullableDisplayableListAllOf) Get() *DisplayableListAllOf {
	return v.value
}

func (v *NullableDisplayableListAllOf) Set(val *DisplayableListAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayableListAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayableListAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayableListAllOf(val *DisplayableListAllOf) *NullableDisplayableListAllOf {
	return &NullableDisplayableListAllOf{value: val, isSet: true}
}

func (v NullableDisplayableListAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayableListAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


