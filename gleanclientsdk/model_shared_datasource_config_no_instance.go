/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SharedDatasourceConfigNoInstance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedDatasourceConfigNoInstance{}

// SharedDatasourceConfigNoInstance Structure describing shared config properties of a datasource with no multi-instance support.
type SharedDatasourceConfigNoInstance struct {
	// Unique identifier of datasource instance to which this config applies.
	Name string `json:"name"`
	// The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
	DisplayName *string `json:"displayName,omitempty"`
	// The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED.
	DatasourceCategory *string `json:"datasourceCategory,omitempty"`
	// Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: urlRegex is a required field for non-entity datasources (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
	UrlRegex *string `json:"urlRegex,omitempty"`
	// The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	IconUrl *string `json:"iconUrl,omitempty"`
	// The list of top-level `objectType`s for the datasource.
	ObjectDefinitions []ObjectDefinition `json:"objectDefinitions,omitempty"`
	// Example text for what to search for in this datasource
	SuggestionText *string `json:"suggestionText,omitempty"`
	// The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
	HomeUrl *string `json:"homeUrl,omitempty"`
	// This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed urls for crawling.
	CrawlerSeedUrls []string `json:"crawlerSeedUrls,omitempty"`
	// The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	IconDarkUrl *string `json:"iconDarkUrl,omitempty"`
	// List of built-in facet types that should be hidden for the datasource.
	HideBuiltInFacets []string `json:"hideBuiltInFacets,omitempty"`
	// A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
	CanonicalizingURLRegex []CanonicalizingRegexType `json:"canonicalizingURLRegex,omitempty"`
	// A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
	CanonicalizingTitleRegex []CanonicalizingRegexType `json:"canonicalizingTitleRegex,omitempty"`
	// A regex that identifies titles that should not be indexed
	RedlistTitleRegex *string `json:"redlistTitleRegex,omitempty"`
	ConnectorType *ConnectorType `json:"connectorType,omitempty"`
	// List of actions for this datasource instance that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira
	Quicklinks []Quicklink `json:"quicklinks,omitempty"`
	// The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`.
	RenderConfigPreset *string `json:"renderConfigPreset,omitempty"`
	// Aliases that can be used as `app` operator-values.
	Aliases []string `json:"aliases,omitempty"`
	// Whether or not this datasource is hosted on-premise.
	IsOnPrem *bool `json:"isOnPrem,omitempty"`
	// True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
	TrustUrlRegexForViewActivity *bool `json:"trustUrlRegexForViewActivity,omitempty"`
	// If true, a utm_source query param will be added to outbound links to this datasource within Glean.
	IncludeUtmSource *bool `json:"includeUtmSource,omitempty"`
}

// NewSharedDatasourceConfigNoInstance instantiates a new SharedDatasourceConfigNoInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedDatasourceConfigNoInstance(name string) *SharedDatasourceConfigNoInstance {
	this := SharedDatasourceConfigNoInstance{}
	this.Name = name
	var datasourceCategory string = "UNCATEGORIZED"
	this.DatasourceCategory = &datasourceCategory
	var trustUrlRegexForViewActivity bool = true
	this.TrustUrlRegexForViewActivity = &trustUrlRegexForViewActivity
	return &this
}

// NewSharedDatasourceConfigNoInstanceWithDefaults instantiates a new SharedDatasourceConfigNoInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedDatasourceConfigNoInstanceWithDefaults() *SharedDatasourceConfigNoInstance {
	this := SharedDatasourceConfigNoInstance{}
	var datasourceCategory string = "UNCATEGORIZED"
	this.DatasourceCategory = &datasourceCategory
	var trustUrlRegexForViewActivity bool = true
	this.TrustUrlRegexForViewActivity = &trustUrlRegexForViewActivity
	return &this
}

// GetName returns the Name field value
func (o *SharedDatasourceConfigNoInstance) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SharedDatasourceConfigNoInstance) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *SharedDatasourceConfigNoInstance) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDatasourceCategory returns the DatasourceCategory field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetDatasourceCategory() string {
	if o == nil || IsNil(o.DatasourceCategory) {
		var ret string
		return ret
	}
	return *o.DatasourceCategory
}

// GetDatasourceCategoryOk returns a tuple with the DatasourceCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetDatasourceCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceCategory) {
		return nil, false
	}
	return o.DatasourceCategory, true
}

// HasDatasourceCategory returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasDatasourceCategory() bool {
	if o != nil && !IsNil(o.DatasourceCategory) {
		return true
	}

	return false
}

// SetDatasourceCategory gets a reference to the given string and assigns it to the DatasourceCategory field.
func (o *SharedDatasourceConfigNoInstance) SetDatasourceCategory(v string) {
	o.DatasourceCategory = &v
}

// GetUrlRegex returns the UrlRegex field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetUrlRegex() string {
	if o == nil || IsNil(o.UrlRegex) {
		var ret string
		return ret
	}
	return *o.UrlRegex
}

// GetUrlRegexOk returns a tuple with the UrlRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetUrlRegexOk() (*string, bool) {
	if o == nil || IsNil(o.UrlRegex) {
		return nil, false
	}
	return o.UrlRegex, true
}

// HasUrlRegex returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasUrlRegex() bool {
	if o != nil && !IsNil(o.UrlRegex) {
		return true
	}

	return false
}

// SetUrlRegex gets a reference to the given string and assigns it to the UrlRegex field.
func (o *SharedDatasourceConfigNoInstance) SetUrlRegex(v string) {
	o.UrlRegex = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *SharedDatasourceConfigNoInstance) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetObjectDefinitions returns the ObjectDefinitions field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetObjectDefinitions() []ObjectDefinition {
	if o == nil || IsNil(o.ObjectDefinitions) {
		var ret []ObjectDefinition
		return ret
	}
	return o.ObjectDefinitions
}

// GetObjectDefinitionsOk returns a tuple with the ObjectDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetObjectDefinitionsOk() ([]ObjectDefinition, bool) {
	if o == nil || IsNil(o.ObjectDefinitions) {
		return nil, false
	}
	return o.ObjectDefinitions, true
}

// HasObjectDefinitions returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasObjectDefinitions() bool {
	if o != nil && !IsNil(o.ObjectDefinitions) {
		return true
	}

	return false
}

// SetObjectDefinitions gets a reference to the given []ObjectDefinition and assigns it to the ObjectDefinitions field.
func (o *SharedDatasourceConfigNoInstance) SetObjectDefinitions(v []ObjectDefinition) {
	o.ObjectDefinitions = v
}

// GetSuggestionText returns the SuggestionText field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetSuggestionText() string {
	if o == nil || IsNil(o.SuggestionText) {
		var ret string
		return ret
	}
	return *o.SuggestionText
}

// GetSuggestionTextOk returns a tuple with the SuggestionText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetSuggestionTextOk() (*string, bool) {
	if o == nil || IsNil(o.SuggestionText) {
		return nil, false
	}
	return o.SuggestionText, true
}

// HasSuggestionText returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasSuggestionText() bool {
	if o != nil && !IsNil(o.SuggestionText) {
		return true
	}

	return false
}

// SetSuggestionText gets a reference to the given string and assigns it to the SuggestionText field.
func (o *SharedDatasourceConfigNoInstance) SetSuggestionText(v string) {
	o.SuggestionText = &v
}

// GetHomeUrl returns the HomeUrl field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetHomeUrl() string {
	if o == nil || IsNil(o.HomeUrl) {
		var ret string
		return ret
	}
	return *o.HomeUrl
}

// GetHomeUrlOk returns a tuple with the HomeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetHomeUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HomeUrl) {
		return nil, false
	}
	return o.HomeUrl, true
}

// HasHomeUrl returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasHomeUrl() bool {
	if o != nil && !IsNil(o.HomeUrl) {
		return true
	}

	return false
}

// SetHomeUrl gets a reference to the given string and assigns it to the HomeUrl field.
func (o *SharedDatasourceConfigNoInstance) SetHomeUrl(v string) {
	o.HomeUrl = &v
}

// GetCrawlerSeedUrls returns the CrawlerSeedUrls field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetCrawlerSeedUrls() []string {
	if o == nil || IsNil(o.CrawlerSeedUrls) {
		var ret []string
		return ret
	}
	return o.CrawlerSeedUrls
}

// GetCrawlerSeedUrlsOk returns a tuple with the CrawlerSeedUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetCrawlerSeedUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.CrawlerSeedUrls) {
		return nil, false
	}
	return o.CrawlerSeedUrls, true
}

// HasCrawlerSeedUrls returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasCrawlerSeedUrls() bool {
	if o != nil && !IsNil(o.CrawlerSeedUrls) {
		return true
	}

	return false
}

// SetCrawlerSeedUrls gets a reference to the given []string and assigns it to the CrawlerSeedUrls field.
func (o *SharedDatasourceConfigNoInstance) SetCrawlerSeedUrls(v []string) {
	o.CrawlerSeedUrls = v
}

// GetIconDarkUrl returns the IconDarkUrl field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetIconDarkUrl() string {
	if o == nil || IsNil(o.IconDarkUrl) {
		var ret string
		return ret
	}
	return *o.IconDarkUrl
}

// GetIconDarkUrlOk returns a tuple with the IconDarkUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetIconDarkUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconDarkUrl) {
		return nil, false
	}
	return o.IconDarkUrl, true
}

// HasIconDarkUrl returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasIconDarkUrl() bool {
	if o != nil && !IsNil(o.IconDarkUrl) {
		return true
	}

	return false
}

// SetIconDarkUrl gets a reference to the given string and assigns it to the IconDarkUrl field.
func (o *SharedDatasourceConfigNoInstance) SetIconDarkUrl(v string) {
	o.IconDarkUrl = &v
}

// GetHideBuiltInFacets returns the HideBuiltInFacets field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetHideBuiltInFacets() []string {
	if o == nil || IsNil(o.HideBuiltInFacets) {
		var ret []string
		return ret
	}
	return o.HideBuiltInFacets
}

// GetHideBuiltInFacetsOk returns a tuple with the HideBuiltInFacets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetHideBuiltInFacetsOk() ([]string, bool) {
	if o == nil || IsNil(o.HideBuiltInFacets) {
		return nil, false
	}
	return o.HideBuiltInFacets, true
}

// HasHideBuiltInFacets returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasHideBuiltInFacets() bool {
	if o != nil && !IsNil(o.HideBuiltInFacets) {
		return true
	}

	return false
}

// SetHideBuiltInFacets gets a reference to the given []string and assigns it to the HideBuiltInFacets field.
func (o *SharedDatasourceConfigNoInstance) SetHideBuiltInFacets(v []string) {
	o.HideBuiltInFacets = v
}

// GetCanonicalizingURLRegex returns the CanonicalizingURLRegex field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetCanonicalizingURLRegex() []CanonicalizingRegexType {
	if o == nil || IsNil(o.CanonicalizingURLRegex) {
		var ret []CanonicalizingRegexType
		return ret
	}
	return o.CanonicalizingURLRegex
}

// GetCanonicalizingURLRegexOk returns a tuple with the CanonicalizingURLRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetCanonicalizingURLRegexOk() ([]CanonicalizingRegexType, bool) {
	if o == nil || IsNil(o.CanonicalizingURLRegex) {
		return nil, false
	}
	return o.CanonicalizingURLRegex, true
}

// HasCanonicalizingURLRegex returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasCanonicalizingURLRegex() bool {
	if o != nil && !IsNil(o.CanonicalizingURLRegex) {
		return true
	}

	return false
}

// SetCanonicalizingURLRegex gets a reference to the given []CanonicalizingRegexType and assigns it to the CanonicalizingURLRegex field.
func (o *SharedDatasourceConfigNoInstance) SetCanonicalizingURLRegex(v []CanonicalizingRegexType) {
	o.CanonicalizingURLRegex = v
}

// GetCanonicalizingTitleRegex returns the CanonicalizingTitleRegex field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetCanonicalizingTitleRegex() []CanonicalizingRegexType {
	if o == nil || IsNil(o.CanonicalizingTitleRegex) {
		var ret []CanonicalizingRegexType
		return ret
	}
	return o.CanonicalizingTitleRegex
}

// GetCanonicalizingTitleRegexOk returns a tuple with the CanonicalizingTitleRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetCanonicalizingTitleRegexOk() ([]CanonicalizingRegexType, bool) {
	if o == nil || IsNil(o.CanonicalizingTitleRegex) {
		return nil, false
	}
	return o.CanonicalizingTitleRegex, true
}

// HasCanonicalizingTitleRegex returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasCanonicalizingTitleRegex() bool {
	if o != nil && !IsNil(o.CanonicalizingTitleRegex) {
		return true
	}

	return false
}

// SetCanonicalizingTitleRegex gets a reference to the given []CanonicalizingRegexType and assigns it to the CanonicalizingTitleRegex field.
func (o *SharedDatasourceConfigNoInstance) SetCanonicalizingTitleRegex(v []CanonicalizingRegexType) {
	o.CanonicalizingTitleRegex = v
}

// GetRedlistTitleRegex returns the RedlistTitleRegex field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetRedlistTitleRegex() string {
	if o == nil || IsNil(o.RedlistTitleRegex) {
		var ret string
		return ret
	}
	return *o.RedlistTitleRegex
}

// GetRedlistTitleRegexOk returns a tuple with the RedlistTitleRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetRedlistTitleRegexOk() (*string, bool) {
	if o == nil || IsNil(o.RedlistTitleRegex) {
		return nil, false
	}
	return o.RedlistTitleRegex, true
}

// HasRedlistTitleRegex returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasRedlistTitleRegex() bool {
	if o != nil && !IsNil(o.RedlistTitleRegex) {
		return true
	}

	return false
}

// SetRedlistTitleRegex gets a reference to the given string and assigns it to the RedlistTitleRegex field.
func (o *SharedDatasourceConfigNoInstance) SetRedlistTitleRegex(v string) {
	o.RedlistTitleRegex = &v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetConnectorType() ConnectorType {
	if o == nil || IsNil(o.ConnectorType) {
		var ret ConnectorType
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetConnectorTypeOk() (*ConnectorType, bool) {
	if o == nil || IsNil(o.ConnectorType) {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasConnectorType() bool {
	if o != nil && !IsNil(o.ConnectorType) {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given ConnectorType and assigns it to the ConnectorType field.
func (o *SharedDatasourceConfigNoInstance) SetConnectorType(v ConnectorType) {
	o.ConnectorType = &v
}

// GetQuicklinks returns the Quicklinks field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetQuicklinks() []Quicklink {
	if o == nil || IsNil(o.Quicklinks) {
		var ret []Quicklink
		return ret
	}
	return o.Quicklinks
}

// GetQuicklinksOk returns a tuple with the Quicklinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetQuicklinksOk() ([]Quicklink, bool) {
	if o == nil || IsNil(o.Quicklinks) {
		return nil, false
	}
	return o.Quicklinks, true
}

// HasQuicklinks returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasQuicklinks() bool {
	if o != nil && !IsNil(o.Quicklinks) {
		return true
	}

	return false
}

// SetQuicklinks gets a reference to the given []Quicklink and assigns it to the Quicklinks field.
func (o *SharedDatasourceConfigNoInstance) SetQuicklinks(v []Quicklink) {
	o.Quicklinks = v
}

// GetRenderConfigPreset returns the RenderConfigPreset field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetRenderConfigPreset() string {
	if o == nil || IsNil(o.RenderConfigPreset) {
		var ret string
		return ret
	}
	return *o.RenderConfigPreset
}

// GetRenderConfigPresetOk returns a tuple with the RenderConfigPreset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetRenderConfigPresetOk() (*string, bool) {
	if o == nil || IsNil(o.RenderConfigPreset) {
		return nil, false
	}
	return o.RenderConfigPreset, true
}

// HasRenderConfigPreset returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasRenderConfigPreset() bool {
	if o != nil && !IsNil(o.RenderConfigPreset) {
		return true
	}

	return false
}

// SetRenderConfigPreset gets a reference to the given string and assigns it to the RenderConfigPreset field.
func (o *SharedDatasourceConfigNoInstance) SetRenderConfigPreset(v string) {
	o.RenderConfigPreset = &v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *SharedDatasourceConfigNoInstance) SetAliases(v []string) {
	o.Aliases = v
}

// GetIsOnPrem returns the IsOnPrem field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetIsOnPrem() bool {
	if o == nil || IsNil(o.IsOnPrem) {
		var ret bool
		return ret
	}
	return *o.IsOnPrem
}

// GetIsOnPremOk returns a tuple with the IsOnPrem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetIsOnPremOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOnPrem) {
		return nil, false
	}
	return o.IsOnPrem, true
}

// HasIsOnPrem returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasIsOnPrem() bool {
	if o != nil && !IsNil(o.IsOnPrem) {
		return true
	}

	return false
}

// SetIsOnPrem gets a reference to the given bool and assigns it to the IsOnPrem field.
func (o *SharedDatasourceConfigNoInstance) SetIsOnPrem(v bool) {
	o.IsOnPrem = &v
}

// GetTrustUrlRegexForViewActivity returns the TrustUrlRegexForViewActivity field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetTrustUrlRegexForViewActivity() bool {
	if o == nil || IsNil(o.TrustUrlRegexForViewActivity) {
		var ret bool
		return ret
	}
	return *o.TrustUrlRegexForViewActivity
}

// GetTrustUrlRegexForViewActivityOk returns a tuple with the TrustUrlRegexForViewActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetTrustUrlRegexForViewActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.TrustUrlRegexForViewActivity) {
		return nil, false
	}
	return o.TrustUrlRegexForViewActivity, true
}

// HasTrustUrlRegexForViewActivity returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasTrustUrlRegexForViewActivity() bool {
	if o != nil && !IsNil(o.TrustUrlRegexForViewActivity) {
		return true
	}

	return false
}

// SetTrustUrlRegexForViewActivity gets a reference to the given bool and assigns it to the TrustUrlRegexForViewActivity field.
func (o *SharedDatasourceConfigNoInstance) SetTrustUrlRegexForViewActivity(v bool) {
	o.TrustUrlRegexForViewActivity = &v
}

// GetIncludeUtmSource returns the IncludeUtmSource field value if set, zero value otherwise.
func (o *SharedDatasourceConfigNoInstance) GetIncludeUtmSource() bool {
	if o == nil || IsNil(o.IncludeUtmSource) {
		var ret bool
		return ret
	}
	return *o.IncludeUtmSource
}

// GetIncludeUtmSourceOk returns a tuple with the IncludeUtmSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedDatasourceConfigNoInstance) GetIncludeUtmSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeUtmSource) {
		return nil, false
	}
	return o.IncludeUtmSource, true
}

// HasIncludeUtmSource returns a boolean if a field has been set.
func (o *SharedDatasourceConfigNoInstance) HasIncludeUtmSource() bool {
	if o != nil && !IsNil(o.IncludeUtmSource) {
		return true
	}

	return false
}

// SetIncludeUtmSource gets a reference to the given bool and assigns it to the IncludeUtmSource field.
func (o *SharedDatasourceConfigNoInstance) SetIncludeUtmSource(v bool) {
	o.IncludeUtmSource = &v
}

func (o SharedDatasourceConfigNoInstance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedDatasourceConfigNoInstance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DatasourceCategory) {
		toSerialize["datasourceCategory"] = o.DatasourceCategory
	}
	if !IsNil(o.UrlRegex) {
		toSerialize["urlRegex"] = o.UrlRegex
	}
	if !IsNil(o.IconUrl) {
		toSerialize["iconUrl"] = o.IconUrl
	}
	if !IsNil(o.ObjectDefinitions) {
		toSerialize["objectDefinitions"] = o.ObjectDefinitions
	}
	if !IsNil(o.SuggestionText) {
		toSerialize["suggestionText"] = o.SuggestionText
	}
	if !IsNil(o.HomeUrl) {
		toSerialize["homeUrl"] = o.HomeUrl
	}
	if !IsNil(o.CrawlerSeedUrls) {
		toSerialize["crawlerSeedUrls"] = o.CrawlerSeedUrls
	}
	if !IsNil(o.IconDarkUrl) {
		toSerialize["iconDarkUrl"] = o.IconDarkUrl
	}
	if !IsNil(o.HideBuiltInFacets) {
		toSerialize["hideBuiltInFacets"] = o.HideBuiltInFacets
	}
	if !IsNil(o.CanonicalizingURLRegex) {
		toSerialize["canonicalizingURLRegex"] = o.CanonicalizingURLRegex
	}
	if !IsNil(o.CanonicalizingTitleRegex) {
		toSerialize["canonicalizingTitleRegex"] = o.CanonicalizingTitleRegex
	}
	if !IsNil(o.RedlistTitleRegex) {
		toSerialize["redlistTitleRegex"] = o.RedlistTitleRegex
	}
	if !IsNil(o.ConnectorType) {
		toSerialize["connectorType"] = o.ConnectorType
	}
	if !IsNil(o.Quicklinks) {
		toSerialize["quicklinks"] = o.Quicklinks
	}
	if !IsNil(o.RenderConfigPreset) {
		toSerialize["renderConfigPreset"] = o.RenderConfigPreset
	}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.IsOnPrem) {
		toSerialize["isOnPrem"] = o.IsOnPrem
	}
	if !IsNil(o.TrustUrlRegexForViewActivity) {
		toSerialize["trustUrlRegexForViewActivity"] = o.TrustUrlRegexForViewActivity
	}
	if !IsNil(o.IncludeUtmSource) {
		toSerialize["includeUtmSource"] = o.IncludeUtmSource
	}
	return toSerialize, nil
}

type NullableSharedDatasourceConfigNoInstance struct {
	value *SharedDatasourceConfigNoInstance
	isSet bool
}

func (v NullableSharedDatasourceConfigNoInstance) Get() *SharedDatasourceConfigNoInstance {
	return v.value
}

func (v *NullableSharedDatasourceConfigNoInstance) Set(val *SharedDatasourceConfigNoInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedDatasourceConfigNoInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedDatasourceConfigNoInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedDatasourceConfigNoInstance(val *SharedDatasourceConfigNoInstance) *NullableSharedDatasourceConfigNoInstance {
	return &NullableSharedDatasourceConfigNoInstance{value: val, isSet: true}
}

func (v NullableSharedDatasourceConfigNoInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedDatasourceConfigNoInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


