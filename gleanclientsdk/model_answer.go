/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the Answer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Answer{}

// Answer struct for Answer
type Answer struct {
	// The opaque id of the answer.
	Id int32 `json:"id"`
	// Internal document id of the answer. We support using the document id for cases where the client doesn't have the integer id available. If both are available, using the integer id is preferred.
	DocId *string `json:"docId,omitempty"`
	Question *string `json:"question,omitempty"`
	// Additional ways of phrasing this question.
	QuestionVariations []string `json:"questionVariations,omitempty"`
	// The plain text answer to the question.
	BodyText *string `json:"bodyText,omitempty"`
	// The parent board ID of this Answer, or 0 if it's a floating Answer.
	BoardId *int32 `json:"boardId,omitempty"`
	// Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// A list of user roles for the answer added by the owner.
	AddedRoles []UserRoleSpecification `json:"addedRoles,omitempty"`
	// A list of user roles for the answer removed by the owner.
	RemovedRoles []UserRoleSpecification `json:"removedRoles,omitempty"`
	// A list of roles for this answer explicitly granted by an owner, editor, or admin.
	Roles []UserRoleSpecification `json:"roles,omitempty"`
	SourceDocumentSpec *DocumentSpec `json:"sourceDocumentSpec,omitempty"`
	Permissions *ObjectPermissions `json:"permissions,omitempty"`
	CombinedAnswerText *StructuredText `json:"combinedAnswerText,omitempty"`
	Likes *AnswerLikes `json:"likes,omitempty"`
	// DEPRECATED - use roles instead. User's role on the specific answer.
	// Deprecated
	UserRole *string `json:"userRole,omitempty"`
	Author *Person `json:"author,omitempty"`
	// The time the answer was created in ISO format (ISO 8601).
	CreateTime *time.Time `json:"createTime,omitempty"`
	// The time the answer was last updated in ISO format (ISO 8601).
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	UpdatedBy *Person `json:"updatedBy,omitempty"`
	Verification *Verification `json:"verification,omitempty"`
	Board *AnswerBoard `json:"board,omitempty"`
	// The collections to which the answer belongs.
	Collections []Collection `json:"collections,omitempty"`
	// The document's document_category(.proto).
	DocumentCategory *string `json:"documentCategory,omitempty"`
	SourceDocument *Document `json:"sourceDocument,omitempty"`
}

// NewAnswer instantiates a new Answer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswer(id int32) *Answer {
	this := Answer{}
	this.Id = id
	return &this
}

// NewAnswerWithDefaults instantiates a new Answer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerWithDefaults() *Answer {
	this := Answer{}
	return &this
}

// GetId returns the Id field value
func (o *Answer) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Answer) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Answer) SetId(v int32) {
	o.Id = v
}

// GetDocId returns the DocId field value if set, zero value otherwise.
func (o *Answer) GetDocId() string {
	if o == nil || IsNil(o.DocId) {
		var ret string
		return ret
	}
	return *o.DocId
}

// GetDocIdOk returns a tuple with the DocId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetDocIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocId) {
		return nil, false
	}
	return o.DocId, true
}

// HasDocId returns a boolean if a field has been set.
func (o *Answer) HasDocId() bool {
	if o != nil && !IsNil(o.DocId) {
		return true
	}

	return false
}

// SetDocId gets a reference to the given string and assigns it to the DocId field.
func (o *Answer) SetDocId(v string) {
	o.DocId = &v
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *Answer) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *Answer) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *Answer) SetQuestion(v string) {
	o.Question = &v
}

// GetQuestionVariations returns the QuestionVariations field value if set, zero value otherwise.
func (o *Answer) GetQuestionVariations() []string {
	if o == nil || IsNil(o.QuestionVariations) {
		var ret []string
		return ret
	}
	return o.QuestionVariations
}

// GetQuestionVariationsOk returns a tuple with the QuestionVariations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetQuestionVariationsOk() ([]string, bool) {
	if o == nil || IsNil(o.QuestionVariations) {
		return nil, false
	}
	return o.QuestionVariations, true
}

// HasQuestionVariations returns a boolean if a field has been set.
func (o *Answer) HasQuestionVariations() bool {
	if o != nil && !IsNil(o.QuestionVariations) {
		return true
	}

	return false
}

// SetQuestionVariations gets a reference to the given []string and assigns it to the QuestionVariations field.
func (o *Answer) SetQuestionVariations(v []string) {
	o.QuestionVariations = v
}

// GetBodyText returns the BodyText field value if set, zero value otherwise.
func (o *Answer) GetBodyText() string {
	if o == nil || IsNil(o.BodyText) {
		var ret string
		return ret
	}
	return *o.BodyText
}

// GetBodyTextOk returns a tuple with the BodyText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetBodyTextOk() (*string, bool) {
	if o == nil || IsNil(o.BodyText) {
		return nil, false
	}
	return o.BodyText, true
}

// HasBodyText returns a boolean if a field has been set.
func (o *Answer) HasBodyText() bool {
	if o != nil && !IsNil(o.BodyText) {
		return true
	}

	return false
}

// SetBodyText gets a reference to the given string and assigns it to the BodyText field.
func (o *Answer) SetBodyText(v string) {
	o.BodyText = &v
}

// GetBoardId returns the BoardId field value if set, zero value otherwise.
func (o *Answer) GetBoardId() int32 {
	if o == nil || IsNil(o.BoardId) {
		var ret int32
		return ret
	}
	return *o.BoardId
}

// GetBoardIdOk returns a tuple with the BoardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetBoardIdOk() (*int32, bool) {
	if o == nil || IsNil(o.BoardId) {
		return nil, false
	}
	return o.BoardId, true
}

// HasBoardId returns a boolean if a field has been set.
func (o *Answer) HasBoardId() bool {
	if o != nil && !IsNil(o.BoardId) {
		return true
	}

	return false
}

// SetBoardId gets a reference to the given int32 and assigns it to the BoardId field.
func (o *Answer) SetBoardId(v int32) {
	o.BoardId = &v
}

// GetAudienceFilters returns the AudienceFilters field value if set, zero value otherwise.
func (o *Answer) GetAudienceFilters() []FacetFilter {
	if o == nil || IsNil(o.AudienceFilters) {
		var ret []FacetFilter
		return ret
	}
	return o.AudienceFilters
}

// GetAudienceFiltersOk returns a tuple with the AudienceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetAudienceFiltersOk() ([]FacetFilter, bool) {
	if o == nil || IsNil(o.AudienceFilters) {
		return nil, false
	}
	return o.AudienceFilters, true
}

// HasAudienceFilters returns a boolean if a field has been set.
func (o *Answer) HasAudienceFilters() bool {
	if o != nil && !IsNil(o.AudienceFilters) {
		return true
	}

	return false
}

// SetAudienceFilters gets a reference to the given []FacetFilter and assigns it to the AudienceFilters field.
func (o *Answer) SetAudienceFilters(v []FacetFilter) {
	o.AudienceFilters = v
}

// GetAddedRoles returns the AddedRoles field value if set, zero value otherwise.
func (o *Answer) GetAddedRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.AddedRoles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.AddedRoles
}

// GetAddedRolesOk returns a tuple with the AddedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetAddedRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.AddedRoles) {
		return nil, false
	}
	return o.AddedRoles, true
}

// HasAddedRoles returns a boolean if a field has been set.
func (o *Answer) HasAddedRoles() bool {
	if o != nil && !IsNil(o.AddedRoles) {
		return true
	}

	return false
}

// SetAddedRoles gets a reference to the given []UserRoleSpecification and assigns it to the AddedRoles field.
func (o *Answer) SetAddedRoles(v []UserRoleSpecification) {
	o.AddedRoles = v
}

// GetRemovedRoles returns the RemovedRoles field value if set, zero value otherwise.
func (o *Answer) GetRemovedRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.RemovedRoles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.RemovedRoles
}

// GetRemovedRolesOk returns a tuple with the RemovedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetRemovedRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.RemovedRoles) {
		return nil, false
	}
	return o.RemovedRoles, true
}

// HasRemovedRoles returns a boolean if a field has been set.
func (o *Answer) HasRemovedRoles() bool {
	if o != nil && !IsNil(o.RemovedRoles) {
		return true
	}

	return false
}

// SetRemovedRoles gets a reference to the given []UserRoleSpecification and assigns it to the RemovedRoles field.
func (o *Answer) SetRemovedRoles(v []UserRoleSpecification) {
	o.RemovedRoles = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Answer) GetRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.Roles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Answer) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UserRoleSpecification and assigns it to the Roles field.
func (o *Answer) SetRoles(v []UserRoleSpecification) {
	o.Roles = v
}

// GetSourceDocumentSpec returns the SourceDocumentSpec field value if set, zero value otherwise.
func (o *Answer) GetSourceDocumentSpec() DocumentSpec {
	if o == nil || IsNil(o.SourceDocumentSpec) {
		var ret DocumentSpec
		return ret
	}
	return *o.SourceDocumentSpec
}

// GetSourceDocumentSpecOk returns a tuple with the SourceDocumentSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetSourceDocumentSpecOk() (*DocumentSpec, bool) {
	if o == nil || IsNil(o.SourceDocumentSpec) {
		return nil, false
	}
	return o.SourceDocumentSpec, true
}

// HasSourceDocumentSpec returns a boolean if a field has been set.
func (o *Answer) HasSourceDocumentSpec() bool {
	if o != nil && !IsNil(o.SourceDocumentSpec) {
		return true
	}

	return false
}

// SetSourceDocumentSpec gets a reference to the given DocumentSpec and assigns it to the SourceDocumentSpec field.
func (o *Answer) SetSourceDocumentSpec(v DocumentSpec) {
	o.SourceDocumentSpec = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *Answer) GetPermissions() ObjectPermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret ObjectPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetPermissionsOk() (*ObjectPermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *Answer) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given ObjectPermissions and assigns it to the Permissions field.
func (o *Answer) SetPermissions(v ObjectPermissions) {
	o.Permissions = &v
}

// GetCombinedAnswerText returns the CombinedAnswerText field value if set, zero value otherwise.
func (o *Answer) GetCombinedAnswerText() StructuredText {
	if o == nil || IsNil(o.CombinedAnswerText) {
		var ret StructuredText
		return ret
	}
	return *o.CombinedAnswerText
}

// GetCombinedAnswerTextOk returns a tuple with the CombinedAnswerText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetCombinedAnswerTextOk() (*StructuredText, bool) {
	if o == nil || IsNil(o.CombinedAnswerText) {
		return nil, false
	}
	return o.CombinedAnswerText, true
}

// HasCombinedAnswerText returns a boolean if a field has been set.
func (o *Answer) HasCombinedAnswerText() bool {
	if o != nil && !IsNil(o.CombinedAnswerText) {
		return true
	}

	return false
}

// SetCombinedAnswerText gets a reference to the given StructuredText and assigns it to the CombinedAnswerText field.
func (o *Answer) SetCombinedAnswerText(v StructuredText) {
	o.CombinedAnswerText = &v
}

// GetLikes returns the Likes field value if set, zero value otherwise.
func (o *Answer) GetLikes() AnswerLikes {
	if o == nil || IsNil(o.Likes) {
		var ret AnswerLikes
		return ret
	}
	return *o.Likes
}

// GetLikesOk returns a tuple with the Likes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetLikesOk() (*AnswerLikes, bool) {
	if o == nil || IsNil(o.Likes) {
		return nil, false
	}
	return o.Likes, true
}

// HasLikes returns a boolean if a field has been set.
func (o *Answer) HasLikes() bool {
	if o != nil && !IsNil(o.Likes) {
		return true
	}

	return false
}

// SetLikes gets a reference to the given AnswerLikes and assigns it to the Likes field.
func (o *Answer) SetLikes(v AnswerLikes) {
	o.Likes = &v
}

// GetUserRole returns the UserRole field value if set, zero value otherwise.
// Deprecated
func (o *Answer) GetUserRole() string {
	if o == nil || IsNil(o.UserRole) {
		var ret string
		return ret
	}
	return *o.UserRole
}

// GetUserRoleOk returns a tuple with the UserRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Answer) GetUserRoleOk() (*string, bool) {
	if o == nil || IsNil(o.UserRole) {
		return nil, false
	}
	return o.UserRole, true
}

// HasUserRole returns a boolean if a field has been set.
func (o *Answer) HasUserRole() bool {
	if o != nil && !IsNil(o.UserRole) {
		return true
	}

	return false
}

// SetUserRole gets a reference to the given string and assigns it to the UserRole field.
// Deprecated
func (o *Answer) SetUserRole(v string) {
	o.UserRole = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *Answer) GetAuthor() Person {
	if o == nil || IsNil(o.Author) {
		var ret Person
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetAuthorOk() (*Person, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *Answer) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Person and assigns it to the Author field.
func (o *Answer) SetAuthor(v Person) {
	o.Author = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Answer) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Answer) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Answer) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Answer) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Answer) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *Answer) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Answer) GetUpdatedBy() Person {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret Person
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetUpdatedByOk() (*Person, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Answer) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given Person and assigns it to the UpdatedBy field.
func (o *Answer) SetUpdatedBy(v Person) {
	o.UpdatedBy = &v
}

// GetVerification returns the Verification field value if set, zero value otherwise.
func (o *Answer) GetVerification() Verification {
	if o == nil || IsNil(o.Verification) {
		var ret Verification
		return ret
	}
	return *o.Verification
}

// GetVerificationOk returns a tuple with the Verification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetVerificationOk() (*Verification, bool) {
	if o == nil || IsNil(o.Verification) {
		return nil, false
	}
	return o.Verification, true
}

// HasVerification returns a boolean if a field has been set.
func (o *Answer) HasVerification() bool {
	if o != nil && !IsNil(o.Verification) {
		return true
	}

	return false
}

// SetVerification gets a reference to the given Verification and assigns it to the Verification field.
func (o *Answer) SetVerification(v Verification) {
	o.Verification = &v
}

// GetBoard returns the Board field value if set, zero value otherwise.
func (o *Answer) GetBoard() AnswerBoard {
	if o == nil || IsNil(o.Board) {
		var ret AnswerBoard
		return ret
	}
	return *o.Board
}

// GetBoardOk returns a tuple with the Board field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetBoardOk() (*AnswerBoard, bool) {
	if o == nil || IsNil(o.Board) {
		return nil, false
	}
	return o.Board, true
}

// HasBoard returns a boolean if a field has been set.
func (o *Answer) HasBoard() bool {
	if o != nil && !IsNil(o.Board) {
		return true
	}

	return false
}

// SetBoard gets a reference to the given AnswerBoard and assigns it to the Board field.
func (o *Answer) SetBoard(v AnswerBoard) {
	o.Board = &v
}

// GetCollections returns the Collections field value if set, zero value otherwise.
func (o *Answer) GetCollections() []Collection {
	if o == nil || IsNil(o.Collections) {
		var ret []Collection
		return ret
	}
	return o.Collections
}

// GetCollectionsOk returns a tuple with the Collections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetCollectionsOk() ([]Collection, bool) {
	if o == nil || IsNil(o.Collections) {
		return nil, false
	}
	return o.Collections, true
}

// HasCollections returns a boolean if a field has been set.
func (o *Answer) HasCollections() bool {
	if o != nil && !IsNil(o.Collections) {
		return true
	}

	return false
}

// SetCollections gets a reference to the given []Collection and assigns it to the Collections field.
func (o *Answer) SetCollections(v []Collection) {
	o.Collections = v
}

// GetDocumentCategory returns the DocumentCategory field value if set, zero value otherwise.
func (o *Answer) GetDocumentCategory() string {
	if o == nil || IsNil(o.DocumentCategory) {
		var ret string
		return ret
	}
	return *o.DocumentCategory
}

// GetDocumentCategoryOk returns a tuple with the DocumentCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetDocumentCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentCategory) {
		return nil, false
	}
	return o.DocumentCategory, true
}

// HasDocumentCategory returns a boolean if a field has been set.
func (o *Answer) HasDocumentCategory() bool {
	if o != nil && !IsNil(o.DocumentCategory) {
		return true
	}

	return false
}

// SetDocumentCategory gets a reference to the given string and assigns it to the DocumentCategory field.
func (o *Answer) SetDocumentCategory(v string) {
	o.DocumentCategory = &v
}

// GetSourceDocument returns the SourceDocument field value if set, zero value otherwise.
func (o *Answer) GetSourceDocument() Document {
	if o == nil || IsNil(o.SourceDocument) {
		var ret Document
		return ret
	}
	return *o.SourceDocument
}

// GetSourceDocumentOk returns a tuple with the SourceDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Answer) GetSourceDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.SourceDocument) {
		return nil, false
	}
	return o.SourceDocument, true
}

// HasSourceDocument returns a boolean if a field has been set.
func (o *Answer) HasSourceDocument() bool {
	if o != nil && !IsNil(o.SourceDocument) {
		return true
	}

	return false
}

// SetSourceDocument gets a reference to the given Document and assigns it to the SourceDocument field.
func (o *Answer) SetSourceDocument(v Document) {
	o.SourceDocument = &v
}

func (o Answer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Answer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.DocId) {
		toSerialize["docId"] = o.DocId
	}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.QuestionVariations) {
		toSerialize["questionVariations"] = o.QuestionVariations
	}
	if !IsNil(o.BodyText) {
		toSerialize["bodyText"] = o.BodyText
	}
	if !IsNil(o.BoardId) {
		toSerialize["boardId"] = o.BoardId
	}
	if !IsNil(o.AudienceFilters) {
		toSerialize["audienceFilters"] = o.AudienceFilters
	}
	if !IsNil(o.AddedRoles) {
		toSerialize["addedRoles"] = o.AddedRoles
	}
	if !IsNil(o.RemovedRoles) {
		toSerialize["removedRoles"] = o.RemovedRoles
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.SourceDocumentSpec) {
		toSerialize["sourceDocumentSpec"] = o.SourceDocumentSpec
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.CombinedAnswerText) {
		toSerialize["combinedAnswerText"] = o.CombinedAnswerText
	}
	if !IsNil(o.Likes) {
		toSerialize["likes"] = o.Likes
	}
	if !IsNil(o.UserRole) {
		toSerialize["userRole"] = o.UserRole
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.Verification) {
		toSerialize["verification"] = o.Verification
	}
	if !IsNil(o.Board) {
		toSerialize["board"] = o.Board
	}
	if !IsNil(o.Collections) {
		toSerialize["collections"] = o.Collections
	}
	if !IsNil(o.DocumentCategory) {
		toSerialize["documentCategory"] = o.DocumentCategory
	}
	if !IsNil(o.SourceDocument) {
		toSerialize["sourceDocument"] = o.SourceDocument
	}
	return toSerialize, nil
}

type NullableAnswer struct {
	value *Answer
	isSet bool
}

func (v NullableAnswer) Get() *Answer {
	return v.value
}

func (v *NullableAnswer) Set(val *Answer) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswer(val *Answer) *NullableAnswer {
	return &NullableAnswer{value: val, isSet: true}
}

func (v NullableAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


