/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DocumentInteractions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentInteractions{}

// DocumentInteractions struct for DocumentInteractions
type DocumentInteractions struct {
	// The count of comments (thread replies in the case of slack).
	NumComments *int32 `json:"numComments,omitempty"`
	// The count of reactions on the document.
	NumReactions *int32 `json:"numReactions,omitempty"`
	// To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.
	// Deprecated
	Reactions []string `json:"reactions,omitempty"`
	Reacts []Reaction `json:"reacts,omitempty"`
	// Describes instances of someone posting a link to this document in one of our indexed datasources.
	Shares []Share `json:"shares,omitempty"`
	VisitorCount *CountInfo `json:"visitorCount,omitempty"`
}

// NewDocumentInteractions instantiates a new DocumentInteractions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentInteractions() *DocumentInteractions {
	this := DocumentInteractions{}
	return &this
}

// NewDocumentInteractionsWithDefaults instantiates a new DocumentInteractions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentInteractionsWithDefaults() *DocumentInteractions {
	this := DocumentInteractions{}
	return &this
}

// GetNumComments returns the NumComments field value if set, zero value otherwise.
func (o *DocumentInteractions) GetNumComments() int32 {
	if o == nil || IsNil(o.NumComments) {
		var ret int32
		return ret
	}
	return *o.NumComments
}

// GetNumCommentsOk returns a tuple with the NumComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInteractions) GetNumCommentsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumComments) {
		return nil, false
	}
	return o.NumComments, true
}

// HasNumComments returns a boolean if a field has been set.
func (o *DocumentInteractions) HasNumComments() bool {
	if o != nil && !IsNil(o.NumComments) {
		return true
	}

	return false
}

// SetNumComments gets a reference to the given int32 and assigns it to the NumComments field.
func (o *DocumentInteractions) SetNumComments(v int32) {
	o.NumComments = &v
}

// GetNumReactions returns the NumReactions field value if set, zero value otherwise.
func (o *DocumentInteractions) GetNumReactions() int32 {
	if o == nil || IsNil(o.NumReactions) {
		var ret int32
		return ret
	}
	return *o.NumReactions
}

// GetNumReactionsOk returns a tuple with the NumReactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInteractions) GetNumReactionsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumReactions) {
		return nil, false
	}
	return o.NumReactions, true
}

// HasNumReactions returns a boolean if a field has been set.
func (o *DocumentInteractions) HasNumReactions() bool {
	if o != nil && !IsNil(o.NumReactions) {
		return true
	}

	return false
}

// SetNumReactions gets a reference to the given int32 and assigns it to the NumReactions field.
func (o *DocumentInteractions) SetNumReactions(v int32) {
	o.NumReactions = &v
}

// GetReactions returns the Reactions field value if set, zero value otherwise.
// Deprecated
func (o *DocumentInteractions) GetReactions() []string {
	if o == nil || IsNil(o.Reactions) {
		var ret []string
		return ret
	}
	return o.Reactions
}

// GetReactionsOk returns a tuple with the Reactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *DocumentInteractions) GetReactionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Reactions) {
		return nil, false
	}
	return o.Reactions, true
}

// HasReactions returns a boolean if a field has been set.
func (o *DocumentInteractions) HasReactions() bool {
	if o != nil && !IsNil(o.Reactions) {
		return true
	}

	return false
}

// SetReactions gets a reference to the given []string and assigns it to the Reactions field.
// Deprecated
func (o *DocumentInteractions) SetReactions(v []string) {
	o.Reactions = v
}

// GetReacts returns the Reacts field value if set, zero value otherwise.
func (o *DocumentInteractions) GetReacts() []Reaction {
	if o == nil || IsNil(o.Reacts) {
		var ret []Reaction
		return ret
	}
	return o.Reacts
}

// GetReactsOk returns a tuple with the Reacts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInteractions) GetReactsOk() ([]Reaction, bool) {
	if o == nil || IsNil(o.Reacts) {
		return nil, false
	}
	return o.Reacts, true
}

// HasReacts returns a boolean if a field has been set.
func (o *DocumentInteractions) HasReacts() bool {
	if o != nil && !IsNil(o.Reacts) {
		return true
	}

	return false
}

// SetReacts gets a reference to the given []Reaction and assigns it to the Reacts field.
func (o *DocumentInteractions) SetReacts(v []Reaction) {
	o.Reacts = v
}

// GetShares returns the Shares field value if set, zero value otherwise.
func (o *DocumentInteractions) GetShares() []Share {
	if o == nil || IsNil(o.Shares) {
		var ret []Share
		return ret
	}
	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInteractions) GetSharesOk() ([]Share, bool) {
	if o == nil || IsNil(o.Shares) {
		return nil, false
	}
	return o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *DocumentInteractions) HasShares() bool {
	if o != nil && !IsNil(o.Shares) {
		return true
	}

	return false
}

// SetShares gets a reference to the given []Share and assigns it to the Shares field.
func (o *DocumentInteractions) SetShares(v []Share) {
	o.Shares = v
}

// GetVisitorCount returns the VisitorCount field value if set, zero value otherwise.
func (o *DocumentInteractions) GetVisitorCount() CountInfo {
	if o == nil || IsNil(o.VisitorCount) {
		var ret CountInfo
		return ret
	}
	return *o.VisitorCount
}

// GetVisitorCountOk returns a tuple with the VisitorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInteractions) GetVisitorCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.VisitorCount) {
		return nil, false
	}
	return o.VisitorCount, true
}

// HasVisitorCount returns a boolean if a field has been set.
func (o *DocumentInteractions) HasVisitorCount() bool {
	if o != nil && !IsNil(o.VisitorCount) {
		return true
	}

	return false
}

// SetVisitorCount gets a reference to the given CountInfo and assigns it to the VisitorCount field.
func (o *DocumentInteractions) SetVisitorCount(v CountInfo) {
	o.VisitorCount = &v
}

func (o DocumentInteractions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentInteractions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NumComments) {
		toSerialize["numComments"] = o.NumComments
	}
	if !IsNil(o.NumReactions) {
		toSerialize["numReactions"] = o.NumReactions
	}
	if !IsNil(o.Reactions) {
		toSerialize["reactions"] = o.Reactions
	}
	if !IsNil(o.Reacts) {
		toSerialize["reacts"] = o.Reacts
	}
	if !IsNil(o.Shares) {
		toSerialize["shares"] = o.Shares
	}
	if !IsNil(o.VisitorCount) {
		toSerialize["visitorCount"] = o.VisitorCount
	}
	return toSerialize, nil
}

type NullableDocumentInteractions struct {
	value *DocumentInteractions
	isSet bool
}

func (v NullableDocumentInteractions) Get() *DocumentInteractions {
	return v.value
}

func (v *NullableDocumentInteractions) Set(val *DocumentInteractions) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentInteractions) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentInteractions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentInteractions(val *DocumentInteractions) *NullableDocumentInteractions {
	return &NullableDocumentInteractions{value: val, isSet: true}
}

func (v NullableDocumentInteractions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentInteractions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


