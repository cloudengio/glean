/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the OAuthConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuthConfig{}

// OAuthConfig struct for OAuthConfig
type OAuthConfig struct {
	// An API key required to authenticate.
	ApiKey *string `json:"apiKey,omitempty"`
	// Client ID of the app registered in the provider's portal.
	ClientId *string `json:"clientId,omitempty"`
	// Space separated list of required scopes for this datasource.
	Scope *string `json:"scope,omitempty"`
}

// NewOAuthConfig instantiates a new OAuthConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuthConfig() *OAuthConfig {
	this := OAuthConfig{}
	return &this
}

// NewOAuthConfigWithDefaults instantiates a new OAuthConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuthConfigWithDefaults() *OAuthConfig {
	this := OAuthConfig{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *OAuthConfig) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *OAuthConfig) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *OAuthConfig) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *OAuthConfig) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *OAuthConfig) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *OAuthConfig) SetClientId(v string) {
	o.ClientId = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *OAuthConfig) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OAuthConfig) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *OAuthConfig) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *OAuthConfig) SetScope(v string) {
	o.Scope = &v
}

func (o OAuthConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuthConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiKey) {
		toSerialize["apiKey"] = o.ApiKey
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableOAuthConfig struct {
	value *OAuthConfig
	isSet bool
}

func (v NullableOAuthConfig) Get() *OAuthConfig {
	return v.value
}

func (v *NullableOAuthConfig) Set(val *OAuthConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuthConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuthConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuthConfig(val *OAuthConfig) *NullableOAuthConfig {
	return &NullableOAuthConfig{value: val, isSet: true}
}

func (v NullableOAuthConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuthConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


