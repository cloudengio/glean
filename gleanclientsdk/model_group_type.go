/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// GroupType The type of user group
type GroupType string

// List of GroupType
const (
	DEPARTMENT GroupType = "DEPARTMENT"
	ALL GroupType = "ALL"
	TEAM GroupType = "TEAM"
	JOB_TITLE GroupType = "JOB_TITLE"
	ROLE_TYPE GroupType = "ROLE_TYPE"
	LOCATION GroupType = "LOCATION"
	REGION GroupType = "REGION"
	EXTERNAL_GROUP GroupType = "EXTERNAL_GROUP"
)

// All allowed values of GroupType enum
var AllowedGroupTypeEnumValues = []GroupType{
	"DEPARTMENT",
	"ALL",
	"TEAM",
	"JOB_TITLE",
	"ROLE_TYPE",
	"LOCATION",
	"REGION",
	"EXTERNAL_GROUP",
}

func (v *GroupType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := GroupType(value)
	for _, existing := range AllowedGroupTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid GroupType", value)
}

// NewGroupTypeFromValue returns a pointer to a valid GroupType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupTypeFromValue(v string) (*GroupType, error) {
	ev := GroupType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for GroupType: valid values are %v", v, AllowedGroupTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupType) IsValid() bool {
	for _, existing := range AllowedGroupTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to GroupType value
func (v GroupType) Ptr() *GroupType {
	return &v
}

type NullableGroupType struct {
	value *GroupType
	isSet bool
}

func (v NullableGroupType) Get() *GroupType {
	return v.value
}

func (v *NullableGroupType) Set(val *GroupType) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupType) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupType(val *GroupType) *NullableGroupType {
	return &NullableGroupType{value: val, isSet: true}
}

func (v NullableGroupType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

