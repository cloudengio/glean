/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SearchWarning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchWarning{}

// SearchWarning struct for SearchWarning
type SearchWarning struct {
	// The type of the warning.
	WarningType string `json:"warningType"`
	// The last term we considered in the user's long query.
	LastUsedTerm *string `json:"lastUsedTerm,omitempty"`
	// The query after ignoring/removing quotes.
	QuotesIgnoredQuery *string `json:"quotesIgnoredQuery,omitempty"`
}

// NewSearchWarning instantiates a new SearchWarning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchWarning(warningType string) *SearchWarning {
	this := SearchWarning{}
	this.WarningType = warningType
	return &this
}

// NewSearchWarningWithDefaults instantiates a new SearchWarning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchWarningWithDefaults() *SearchWarning {
	this := SearchWarning{}
	return &this
}

// GetWarningType returns the WarningType field value
func (o *SearchWarning) GetWarningType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WarningType
}

// GetWarningTypeOk returns a tuple with the WarningType field value
// and a boolean to check if the value has been set.
func (o *SearchWarning) GetWarningTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WarningType, true
}

// SetWarningType sets field value
func (o *SearchWarning) SetWarningType(v string) {
	o.WarningType = v
}

// GetLastUsedTerm returns the LastUsedTerm field value if set, zero value otherwise.
func (o *SearchWarning) GetLastUsedTerm() string {
	if o == nil || IsNil(o.LastUsedTerm) {
		var ret string
		return ret
	}
	return *o.LastUsedTerm
}

// GetLastUsedTermOk returns a tuple with the LastUsedTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchWarning) GetLastUsedTermOk() (*string, bool) {
	if o == nil || IsNil(o.LastUsedTerm) {
		return nil, false
	}
	return o.LastUsedTerm, true
}

// HasLastUsedTerm returns a boolean if a field has been set.
func (o *SearchWarning) HasLastUsedTerm() bool {
	if o != nil && !IsNil(o.LastUsedTerm) {
		return true
	}

	return false
}

// SetLastUsedTerm gets a reference to the given string and assigns it to the LastUsedTerm field.
func (o *SearchWarning) SetLastUsedTerm(v string) {
	o.LastUsedTerm = &v
}

// GetQuotesIgnoredQuery returns the QuotesIgnoredQuery field value if set, zero value otherwise.
func (o *SearchWarning) GetQuotesIgnoredQuery() string {
	if o == nil || IsNil(o.QuotesIgnoredQuery) {
		var ret string
		return ret
	}
	return *o.QuotesIgnoredQuery
}

// GetQuotesIgnoredQueryOk returns a tuple with the QuotesIgnoredQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchWarning) GetQuotesIgnoredQueryOk() (*string, bool) {
	if o == nil || IsNil(o.QuotesIgnoredQuery) {
		return nil, false
	}
	return o.QuotesIgnoredQuery, true
}

// HasQuotesIgnoredQuery returns a boolean if a field has been set.
func (o *SearchWarning) HasQuotesIgnoredQuery() bool {
	if o != nil && !IsNil(o.QuotesIgnoredQuery) {
		return true
	}

	return false
}

// SetQuotesIgnoredQuery gets a reference to the given string and assigns it to the QuotesIgnoredQuery field.
func (o *SearchWarning) SetQuotesIgnoredQuery(v string) {
	o.QuotesIgnoredQuery = &v
}

func (o SearchWarning) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchWarning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["warningType"] = o.WarningType
	if !IsNil(o.LastUsedTerm) {
		toSerialize["lastUsedTerm"] = o.LastUsedTerm
	}
	if !IsNil(o.QuotesIgnoredQuery) {
		toSerialize["quotesIgnoredQuery"] = o.QuotesIgnoredQuery
	}
	return toSerialize, nil
}

type NullableSearchWarning struct {
	value *SearchWarning
	isSet bool
}

func (v NullableSearchWarning) Get() *SearchWarning {
	return v.value
}

func (v *NullableSearchWarning) Set(val *SearchWarning) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchWarning) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchWarning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchWarning(val *SearchWarning) *NullableSearchWarning {
	return &NullableSearchWarning{value: val, isSet: true}
}

func (v NullableSearchWarning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchWarning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


