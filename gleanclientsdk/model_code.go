/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Code type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Code{}

// Code struct for Code
type Code struct {
	RepoName *string `json:"repoName,omitempty"`
	FileName *string `json:"fileName,omitempty"`
	FileUrl *string `json:"fileUrl,omitempty"`
	Lines []CodeLine `json:"lines,omitempty"`
	// Last file match for a repo
	IsLastMatch *bool `json:"isLastMatch,omitempty"`
}

// NewCode instantiates a new Code object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCode() *Code {
	this := Code{}
	return &this
}

// NewCodeWithDefaults instantiates a new Code object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeWithDefaults() *Code {
	this := Code{}
	return &this
}

// GetRepoName returns the RepoName field value if set, zero value otherwise.
func (o *Code) GetRepoName() string {
	if o == nil || IsNil(o.RepoName) {
		var ret string
		return ret
	}
	return *o.RepoName
}

// GetRepoNameOk returns a tuple with the RepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Code) GetRepoNameOk() (*string, bool) {
	if o == nil || IsNil(o.RepoName) {
		return nil, false
	}
	return o.RepoName, true
}

// HasRepoName returns a boolean if a field has been set.
func (o *Code) HasRepoName() bool {
	if o != nil && !IsNil(o.RepoName) {
		return true
	}

	return false
}

// SetRepoName gets a reference to the given string and assigns it to the RepoName field.
func (o *Code) SetRepoName(v string) {
	o.RepoName = &v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *Code) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Code) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *Code) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *Code) SetFileName(v string) {
	o.FileName = &v
}

// GetFileUrl returns the FileUrl field value if set, zero value otherwise.
func (o *Code) GetFileUrl() string {
	if o == nil || IsNil(o.FileUrl) {
		var ret string
		return ret
	}
	return *o.FileUrl
}

// GetFileUrlOk returns a tuple with the FileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Code) GetFileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.FileUrl) {
		return nil, false
	}
	return o.FileUrl, true
}

// HasFileUrl returns a boolean if a field has been set.
func (o *Code) HasFileUrl() bool {
	if o != nil && !IsNil(o.FileUrl) {
		return true
	}

	return false
}

// SetFileUrl gets a reference to the given string and assigns it to the FileUrl field.
func (o *Code) SetFileUrl(v string) {
	o.FileUrl = &v
}

// GetLines returns the Lines field value if set, zero value otherwise.
func (o *Code) GetLines() []CodeLine {
	if o == nil || IsNil(o.Lines) {
		var ret []CodeLine
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Code) GetLinesOk() ([]CodeLine, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *Code) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []CodeLine and assigns it to the Lines field.
func (o *Code) SetLines(v []CodeLine) {
	o.Lines = v
}

// GetIsLastMatch returns the IsLastMatch field value if set, zero value otherwise.
func (o *Code) GetIsLastMatch() bool {
	if o == nil || IsNil(o.IsLastMatch) {
		var ret bool
		return ret
	}
	return *o.IsLastMatch
}

// GetIsLastMatchOk returns a tuple with the IsLastMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Code) GetIsLastMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLastMatch) {
		return nil, false
	}
	return o.IsLastMatch, true
}

// HasIsLastMatch returns a boolean if a field has been set.
func (o *Code) HasIsLastMatch() bool {
	if o != nil && !IsNil(o.IsLastMatch) {
		return true
	}

	return false
}

// SetIsLastMatch gets a reference to the given bool and assigns it to the IsLastMatch field.
func (o *Code) SetIsLastMatch(v bool) {
	o.IsLastMatch = &v
}

func (o Code) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Code) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RepoName) {
		toSerialize["repoName"] = o.RepoName
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.FileUrl) {
		toSerialize["fileUrl"] = o.FileUrl
	}
	if !IsNil(o.Lines) {
		toSerialize["lines"] = o.Lines
	}
	if !IsNil(o.IsLastMatch) {
		toSerialize["isLastMatch"] = o.IsLastMatch
	}
	return toSerialize, nil
}

type NullableCode struct {
	value *Code
	isSet bool
}

func (v NullableCode) Get() *Code {
	return v.value
}

func (v *NullableCode) Set(val *Code) {
	v.value = val
	v.isSet = true
}

func (v NullableCode) IsSet() bool {
	return v.isSet
}

func (v *NullableCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCode(val *Code) *NullableCode {
	return &NullableCode{value: val, isSet: true}
}

func (v NullableCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


