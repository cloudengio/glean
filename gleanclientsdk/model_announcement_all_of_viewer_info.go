/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AnnouncementAllOfViewerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnouncementAllOfViewerInfo{}

// AnnouncementAllOfViewerInfo struct for AnnouncementAllOfViewerInfo
type AnnouncementAllOfViewerInfo struct {
	// Whether the viewer has dismissed the announcement.
	IsDismissed *bool `json:"isDismissed,omitempty"`
	// Whether the viewer has read the announcement.
	IsRead *bool `json:"isRead,omitempty"`
	// A list of actions the viewer has taken on the announcement (e.g. view, dismiss).
	// Deprecated
	UserActivity []UserActivity `json:"userActivity,omitempty"`
}

// NewAnnouncementAllOfViewerInfo instantiates a new AnnouncementAllOfViewerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnouncementAllOfViewerInfo() *AnnouncementAllOfViewerInfo {
	this := AnnouncementAllOfViewerInfo{}
	return &this
}

// NewAnnouncementAllOfViewerInfoWithDefaults instantiates a new AnnouncementAllOfViewerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementAllOfViewerInfoWithDefaults() *AnnouncementAllOfViewerInfo {
	this := AnnouncementAllOfViewerInfo{}
	return &this
}

// GetIsDismissed returns the IsDismissed field value if set, zero value otherwise.
func (o *AnnouncementAllOfViewerInfo) GetIsDismissed() bool {
	if o == nil || IsNil(o.IsDismissed) {
		var ret bool
		return ret
	}
	return *o.IsDismissed
}

// GetIsDismissedOk returns a tuple with the IsDismissed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOfViewerInfo) GetIsDismissedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDismissed) {
		return nil, false
	}
	return o.IsDismissed, true
}

// HasIsDismissed returns a boolean if a field has been set.
func (o *AnnouncementAllOfViewerInfo) HasIsDismissed() bool {
	if o != nil && !IsNil(o.IsDismissed) {
		return true
	}

	return false
}

// SetIsDismissed gets a reference to the given bool and assigns it to the IsDismissed field.
func (o *AnnouncementAllOfViewerInfo) SetIsDismissed(v bool) {
	o.IsDismissed = &v
}

// GetIsRead returns the IsRead field value if set, zero value otherwise.
func (o *AnnouncementAllOfViewerInfo) GetIsRead() bool {
	if o == nil || IsNil(o.IsRead) {
		var ret bool
		return ret
	}
	return *o.IsRead
}

// GetIsReadOk returns a tuple with the IsRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOfViewerInfo) GetIsReadOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRead) {
		return nil, false
	}
	return o.IsRead, true
}

// HasIsRead returns a boolean if a field has been set.
func (o *AnnouncementAllOfViewerInfo) HasIsRead() bool {
	if o != nil && !IsNil(o.IsRead) {
		return true
	}

	return false
}

// SetIsRead gets a reference to the given bool and assigns it to the IsRead field.
func (o *AnnouncementAllOfViewerInfo) SetIsRead(v bool) {
	o.IsRead = &v
}

// GetUserActivity returns the UserActivity field value if set, zero value otherwise.
// Deprecated
func (o *AnnouncementAllOfViewerInfo) GetUserActivity() []UserActivity {
	if o == nil || IsNil(o.UserActivity) {
		var ret []UserActivity
		return ret
	}
	return o.UserActivity
}

// GetUserActivityOk returns a tuple with the UserActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AnnouncementAllOfViewerInfo) GetUserActivityOk() ([]UserActivity, bool) {
	if o == nil || IsNil(o.UserActivity) {
		return nil, false
	}
	return o.UserActivity, true
}

// HasUserActivity returns a boolean if a field has been set.
func (o *AnnouncementAllOfViewerInfo) HasUserActivity() bool {
	if o != nil && !IsNil(o.UserActivity) {
		return true
	}

	return false
}

// SetUserActivity gets a reference to the given []UserActivity and assigns it to the UserActivity field.
// Deprecated
func (o *AnnouncementAllOfViewerInfo) SetUserActivity(v []UserActivity) {
	o.UserActivity = v
}

func (o AnnouncementAllOfViewerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnouncementAllOfViewerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsDismissed) {
		toSerialize["isDismissed"] = o.IsDismissed
	}
	if !IsNil(o.IsRead) {
		toSerialize["isRead"] = o.IsRead
	}
	if !IsNil(o.UserActivity) {
		toSerialize["userActivity"] = o.UserActivity
	}
	return toSerialize, nil
}

type NullableAnnouncementAllOfViewerInfo struct {
	value *AnnouncementAllOfViewerInfo
	isSet bool
}

func (v NullableAnnouncementAllOfViewerInfo) Get() *AnnouncementAllOfViewerInfo {
	return v.value
}

func (v *NullableAnnouncementAllOfViewerInfo) Set(val *AnnouncementAllOfViewerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncementAllOfViewerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncementAllOfViewerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncementAllOfViewerInfo(val *AnnouncementAllOfViewerInfo) *NullableAnnouncementAllOfViewerInfo {
	return &NullableAnnouncementAllOfViewerInfo{value: val, isSet: true}
}

func (v NullableAnnouncementAllOfViewerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncementAllOfViewerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


