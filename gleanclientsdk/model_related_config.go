/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the RelatedConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelatedConfig{}

// RelatedConfig struct for RelatedConfig
type RelatedConfig struct {
	SectionConfigs *map[string]RelatedSectionConfig `json:"sectionConfigs,omitempty"`
	Keys []string `json:"keys,omitempty"`
}

// NewRelatedConfig instantiates a new RelatedConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedConfig() *RelatedConfig {
	this := RelatedConfig{}
	return &this
}

// NewRelatedConfigWithDefaults instantiates a new RelatedConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedConfigWithDefaults() *RelatedConfig {
	this := RelatedConfig{}
	return &this
}

// GetSectionConfigs returns the SectionConfigs field value if set, zero value otherwise.
func (o *RelatedConfig) GetSectionConfigs() map[string]RelatedSectionConfig {
	if o == nil || IsNil(o.SectionConfigs) {
		var ret map[string]RelatedSectionConfig
		return ret
	}
	return *o.SectionConfigs
}

// GetSectionConfigsOk returns a tuple with the SectionConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedConfig) GetSectionConfigsOk() (*map[string]RelatedSectionConfig, bool) {
	if o == nil || IsNil(o.SectionConfigs) {
		return nil, false
	}
	return o.SectionConfigs, true
}

// HasSectionConfigs returns a boolean if a field has been set.
func (o *RelatedConfig) HasSectionConfigs() bool {
	if o != nil && !IsNil(o.SectionConfigs) {
		return true
	}

	return false
}

// SetSectionConfigs gets a reference to the given map[string]RelatedSectionConfig and assigns it to the SectionConfigs field.
func (o *RelatedConfig) SetSectionConfigs(v map[string]RelatedSectionConfig) {
	o.SectionConfigs = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *RelatedConfig) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedConfig) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *RelatedConfig) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *RelatedConfig) SetKeys(v []string) {
	o.Keys = v
}

func (o RelatedConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelatedConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SectionConfigs) {
		toSerialize["sectionConfigs"] = o.SectionConfigs
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableRelatedConfig struct {
	value *RelatedConfig
	isSet bool
}

func (v NullableRelatedConfig) Get() *RelatedConfig {
	return v.value
}

func (v *NullableRelatedConfig) Set(val *RelatedConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedConfig(val *RelatedConfig) *NullableRelatedConfig {
	return &NullableRelatedConfig{value: val, isSet: true}
}

func (v NullableRelatedConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


