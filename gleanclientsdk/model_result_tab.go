/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ResultTab type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultTab{}

// ResultTab struct for ResultTab
type ResultTab struct {
	// The unique ID of the tab. Can be passed in a search request to get results for that tab.
	Id *string `json:"id,omitempty"`
	// The number of results in this tab for the current query.
	Count *int32 `json:"count,omitempty"`
	// The datasource associated with the tab, if any.
	Datasource *string `json:"datasource,omitempty"`
	// The datasource instance associated with the tab, if any.
	DatasourceInstance *string `json:"datasourceInstance,omitempty"`
}

// NewResultTab instantiates a new ResultTab object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultTab() *ResultTab {
	this := ResultTab{}
	return &this
}

// NewResultTabWithDefaults instantiates a new ResultTab object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultTabWithDefaults() *ResultTab {
	this := ResultTab{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ResultTab) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultTab) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ResultTab) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ResultTab) SetId(v string) {
	o.Id = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ResultTab) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultTab) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ResultTab) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *ResultTab) SetCount(v int32) {
	o.Count = &v
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *ResultTab) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultTab) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *ResultTab) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *ResultTab) SetDatasource(v string) {
	o.Datasource = &v
}

// GetDatasourceInstance returns the DatasourceInstance field value if set, zero value otherwise.
func (o *ResultTab) GetDatasourceInstance() string {
	if o == nil || IsNil(o.DatasourceInstance) {
		var ret string
		return ret
	}
	return *o.DatasourceInstance
}

// GetDatasourceInstanceOk returns a tuple with the DatasourceInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultTab) GetDatasourceInstanceOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceInstance) {
		return nil, false
	}
	return o.DatasourceInstance, true
}

// HasDatasourceInstance returns a boolean if a field has been set.
func (o *ResultTab) HasDatasourceInstance() bool {
	if o != nil && !IsNil(o.DatasourceInstance) {
		return true
	}

	return false
}

// SetDatasourceInstance gets a reference to the given string and assigns it to the DatasourceInstance field.
func (o *ResultTab) SetDatasourceInstance(v string) {
	o.DatasourceInstance = &v
}

func (o ResultTab) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultTab) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	if !IsNil(o.DatasourceInstance) {
		toSerialize["datasourceInstance"] = o.DatasourceInstance
	}
	return toSerialize, nil
}

type NullableResultTab struct {
	value *ResultTab
	isSet bool
}

func (v NullableResultTab) Get() *ResultTab {
	return v.value
}

func (v *NullableResultTab) Set(val *ResultTab) {
	v.value = val
	v.isSet = true
}

func (v NullableResultTab) IsSet() bool {
	return v.isSet
}

func (v *NullableResultTab) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultTab(val *ResultTab) *NullableResultTab {
	return &NullableResultTab{value: val, isSet: true}
}

func (v NullableResultTab) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultTab) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


