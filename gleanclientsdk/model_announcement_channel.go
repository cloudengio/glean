/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// AnnouncementChannel This determines whether this is a Social Feed post or a regular announcement.
type AnnouncementChannel string

// List of AnnouncementChannel
const (
	MAIN AnnouncementChannel = "MAIN"
	SOCIAL_FEED AnnouncementChannel = "SOCIAL_FEED"
)

// All allowed values of AnnouncementChannel enum
var AllowedAnnouncementChannelEnumValues = []AnnouncementChannel{
	"MAIN",
	"SOCIAL_FEED",
}

func (v *AnnouncementChannel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnnouncementChannel(value)
	for _, existing := range AllowedAnnouncementChannelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnnouncementChannel", value)
}

// NewAnnouncementChannelFromValue returns a pointer to a valid AnnouncementChannel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnnouncementChannelFromValue(v string) (*AnnouncementChannel, error) {
	ev := AnnouncementChannel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnnouncementChannel: valid values are %v", v, AllowedAnnouncementChannelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnnouncementChannel) IsValid() bool {
	for _, existing := range AllowedAnnouncementChannelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnnouncementChannel value
func (v AnnouncementChannel) Ptr() *AnnouncementChannel {
	return &v
}

type NullableAnnouncementChannel struct {
	value *AnnouncementChannel
	isSet bool
}

func (v NullableAnnouncementChannel) Get() *AnnouncementChannel {
	return v.value
}

func (v *NullableAnnouncementChannel) Set(val *AnnouncementChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncementChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncementChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncementChannel(val *AnnouncementChannel) *NullableAnnouncementChannel {
	return &NullableAnnouncementChannel{value: val, isSet: true}
}

func (v NullableAnnouncementChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncementChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

