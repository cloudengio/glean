/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the PersonDistance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PersonDistance{}

// PersonDistance struct for PersonDistance
type PersonDistance struct {
	// The display name.
	Name string `json:"name"`
	// An opaque identifier that can be used to request metadata for a Person.
	ObfuscatedId string `json:"obfuscatedId"`
	// Distance to person, refer to PeopleDistance pipeline on interpretation of the value.
	Distance float32 `json:"distance"`
}

// NewPersonDistance instantiates a new PersonDistance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPersonDistance(name string, obfuscatedId string, distance float32) *PersonDistance {
	this := PersonDistance{}
	this.Name = name
	this.ObfuscatedId = obfuscatedId
	this.Distance = distance
	return &this
}

// NewPersonDistanceWithDefaults instantiates a new PersonDistance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPersonDistanceWithDefaults() *PersonDistance {
	this := PersonDistance{}
	return &this
}

// GetName returns the Name field value
func (o *PersonDistance) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PersonDistance) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PersonDistance) SetName(v string) {
	o.Name = v
}

// GetObfuscatedId returns the ObfuscatedId field value
func (o *PersonDistance) GetObfuscatedId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObfuscatedId
}

// GetObfuscatedIdOk returns a tuple with the ObfuscatedId field value
// and a boolean to check if the value has been set.
func (o *PersonDistance) GetObfuscatedIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObfuscatedId, true
}

// SetObfuscatedId sets field value
func (o *PersonDistance) SetObfuscatedId(v string) {
	o.ObfuscatedId = v
}

// GetDistance returns the Distance field value
func (o *PersonDistance) GetDistance() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *PersonDistance) GetDistanceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *PersonDistance) SetDistance(v float32) {
	o.Distance = v
}

func (o PersonDistance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PersonDistance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["obfuscatedId"] = o.ObfuscatedId
	toSerialize["distance"] = o.Distance
	return toSerialize, nil
}

type NullablePersonDistance struct {
	value *PersonDistance
	isSet bool
}

func (v NullablePersonDistance) Get() *PersonDistance {
	return v.value
}

func (v *NullablePersonDistance) Set(val *PersonDistance) {
	v.value = val
	v.isSet = true
}

func (v NullablePersonDistance) IsSet() bool {
	return v.isSet
}

func (v *NullablePersonDistance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePersonDistance(val *PersonDistance) *NullablePersonDistance {
	return &NullablePersonDistance{value: val, isSet: true}
}

func (v NullablePersonDistance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePersonDistance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


