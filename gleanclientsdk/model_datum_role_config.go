/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// DatumRoleConfig - struct for DatumRoleConfig
type DatumRoleConfig struct {
	DatumEmailConfig *DatumEmailConfig
	DatumLinkConfig *DatumLinkConfig
	DatumTooltipConfig *DatumTooltipConfig
}

// DatumEmailConfigAsDatumRoleConfig is a convenience function that returns DatumEmailConfig wrapped in DatumRoleConfig
func DatumEmailConfigAsDatumRoleConfig(v *DatumEmailConfig) DatumRoleConfig {
	return DatumRoleConfig{
		DatumEmailConfig: v,
	}
}

// DatumLinkConfigAsDatumRoleConfig is a convenience function that returns DatumLinkConfig wrapped in DatumRoleConfig
func DatumLinkConfigAsDatumRoleConfig(v *DatumLinkConfig) DatumRoleConfig {
	return DatumRoleConfig{
		DatumLinkConfig: v,
	}
}

// DatumTooltipConfigAsDatumRoleConfig is a convenience function that returns DatumTooltipConfig wrapped in DatumRoleConfig
func DatumTooltipConfigAsDatumRoleConfig(v *DatumTooltipConfig) DatumRoleConfig {
	return DatumRoleConfig{
		DatumTooltipConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *DatumRoleConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DatumEmailConfig
	err = newStrictDecoder(data).Decode(&dst.DatumEmailConfig)
	if err == nil {
		jsonDatumEmailConfig, _ := json.Marshal(dst.DatumEmailConfig)
		if string(jsonDatumEmailConfig) == "{}" { // empty struct
			dst.DatumEmailConfig = nil
		} else {
			match++
		}
	} else {
		dst.DatumEmailConfig = nil
	}

	// try to unmarshal data into DatumLinkConfig
	err = newStrictDecoder(data).Decode(&dst.DatumLinkConfig)
	if err == nil {
		jsonDatumLinkConfig, _ := json.Marshal(dst.DatumLinkConfig)
		if string(jsonDatumLinkConfig) == "{}" { // empty struct
			dst.DatumLinkConfig = nil
		} else {
			match++
		}
	} else {
		dst.DatumLinkConfig = nil
	}

	// try to unmarshal data into DatumTooltipConfig
	err = newStrictDecoder(data).Decode(&dst.DatumTooltipConfig)
	if err == nil {
		jsonDatumTooltipConfig, _ := json.Marshal(dst.DatumTooltipConfig)
		if string(jsonDatumTooltipConfig) == "{}" { // empty struct
			dst.DatumTooltipConfig = nil
		} else {
			match++
		}
	} else {
		dst.DatumTooltipConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DatumEmailConfig = nil
		dst.DatumLinkConfig = nil
		dst.DatumTooltipConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DatumRoleConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DatumRoleConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DatumRoleConfig) MarshalJSON() ([]byte, error) {
	if src.DatumEmailConfig != nil {
		return json.Marshal(&src.DatumEmailConfig)
	}

	if src.DatumLinkConfig != nil {
		return json.Marshal(&src.DatumLinkConfig)
	}

	if src.DatumTooltipConfig != nil {
		return json.Marshal(&src.DatumTooltipConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DatumRoleConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DatumEmailConfig != nil {
		return obj.DatumEmailConfig
	}

	if obj.DatumLinkConfig != nil {
		return obj.DatumLinkConfig
	}

	if obj.DatumTooltipConfig != nil {
		return obj.DatumTooltipConfig
	}

	// all schemas are nil
	return nil
}

type NullableDatumRoleConfig struct {
	value *DatumRoleConfig
	isSet bool
}

func (v NullableDatumRoleConfig) Get() *DatumRoleConfig {
	return v.value
}

func (v *NullableDatumRoleConfig) Set(val *DatumRoleConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDatumRoleConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDatumRoleConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatumRoleConfig(val *DatumRoleConfig) *NullableDatumRoleConfig {
	return &NullableDatumRoleConfig{value: val, isSet: true}
}

func (v NullableDatumRoleConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatumRoleConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


