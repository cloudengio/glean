/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CalendarAttendees type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CalendarAttendees{}

// CalendarAttendees struct for CalendarAttendees
type CalendarAttendees struct {
	// Full details of some of the attendees of this event
	People []CalendarAttendee `json:"people,omitempty"`
	// Whether the total count of the people returned is at the retrieval limit.
	IsLimit *bool `json:"isLimit,omitempty"`
	// Total number of attendees in this event.
	Total *int32 `json:"total,omitempty"`
	// Total number of attendees who have accepted this event.
	NumAccepted *int32 `json:"numAccepted,omitempty"`
	// Total number of attendees who have declined this event.
	NumDeclined *int32 `json:"numDeclined,omitempty"`
	// Total number of attendees who have not responded to this event.
	NumNoResponse *int32 `json:"numNoResponse,omitempty"`
	// Total number of attendees who have responded tentatively (i.e. responded maybe) to this event.
	NumTentative *int32 `json:"numTentative,omitempty"`
}

// NewCalendarAttendees instantiates a new CalendarAttendees object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendarAttendees() *CalendarAttendees {
	this := CalendarAttendees{}
	return &this
}

// NewCalendarAttendeesWithDefaults instantiates a new CalendarAttendees object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarAttendeesWithDefaults() *CalendarAttendees {
	this := CalendarAttendees{}
	return &this
}

// GetPeople returns the People field value if set, zero value otherwise.
func (o *CalendarAttendees) GetPeople() []CalendarAttendee {
	if o == nil || IsNil(o.People) {
		var ret []CalendarAttendee
		return ret
	}
	return o.People
}

// GetPeopleOk returns a tuple with the People field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendees) GetPeopleOk() ([]CalendarAttendee, bool) {
	if o == nil || IsNil(o.People) {
		return nil, false
	}
	return o.People, true
}

// HasPeople returns a boolean if a field has been set.
func (o *CalendarAttendees) HasPeople() bool {
	if o != nil && !IsNil(o.People) {
		return true
	}

	return false
}

// SetPeople gets a reference to the given []CalendarAttendee and assigns it to the People field.
func (o *CalendarAttendees) SetPeople(v []CalendarAttendee) {
	o.People = v
}

// GetIsLimit returns the IsLimit field value if set, zero value otherwise.
func (o *CalendarAttendees) GetIsLimit() bool {
	if o == nil || IsNil(o.IsLimit) {
		var ret bool
		return ret
	}
	return *o.IsLimit
}

// GetIsLimitOk returns a tuple with the IsLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendees) GetIsLimitOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLimit) {
		return nil, false
	}
	return o.IsLimit, true
}

// HasIsLimit returns a boolean if a field has been set.
func (o *CalendarAttendees) HasIsLimit() bool {
	if o != nil && !IsNil(o.IsLimit) {
		return true
	}

	return false
}

// SetIsLimit gets a reference to the given bool and assigns it to the IsLimit field.
func (o *CalendarAttendees) SetIsLimit(v bool) {
	o.IsLimit = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *CalendarAttendees) GetTotal() int32 {
	if o == nil || IsNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendees) GetTotalOk() (*int32, bool) {
	if o == nil || IsNil(o.Total) {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *CalendarAttendees) HasTotal() bool {
	if o != nil && !IsNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *CalendarAttendees) SetTotal(v int32) {
	o.Total = &v
}

// GetNumAccepted returns the NumAccepted field value if set, zero value otherwise.
func (o *CalendarAttendees) GetNumAccepted() int32 {
	if o == nil || IsNil(o.NumAccepted) {
		var ret int32
		return ret
	}
	return *o.NumAccepted
}

// GetNumAcceptedOk returns a tuple with the NumAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendees) GetNumAcceptedOk() (*int32, bool) {
	if o == nil || IsNil(o.NumAccepted) {
		return nil, false
	}
	return o.NumAccepted, true
}

// HasNumAccepted returns a boolean if a field has been set.
func (o *CalendarAttendees) HasNumAccepted() bool {
	if o != nil && !IsNil(o.NumAccepted) {
		return true
	}

	return false
}

// SetNumAccepted gets a reference to the given int32 and assigns it to the NumAccepted field.
func (o *CalendarAttendees) SetNumAccepted(v int32) {
	o.NumAccepted = &v
}

// GetNumDeclined returns the NumDeclined field value if set, zero value otherwise.
func (o *CalendarAttendees) GetNumDeclined() int32 {
	if o == nil || IsNil(o.NumDeclined) {
		var ret int32
		return ret
	}
	return *o.NumDeclined
}

// GetNumDeclinedOk returns a tuple with the NumDeclined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendees) GetNumDeclinedOk() (*int32, bool) {
	if o == nil || IsNil(o.NumDeclined) {
		return nil, false
	}
	return o.NumDeclined, true
}

// HasNumDeclined returns a boolean if a field has been set.
func (o *CalendarAttendees) HasNumDeclined() bool {
	if o != nil && !IsNil(o.NumDeclined) {
		return true
	}

	return false
}

// SetNumDeclined gets a reference to the given int32 and assigns it to the NumDeclined field.
func (o *CalendarAttendees) SetNumDeclined(v int32) {
	o.NumDeclined = &v
}

// GetNumNoResponse returns the NumNoResponse field value if set, zero value otherwise.
func (o *CalendarAttendees) GetNumNoResponse() int32 {
	if o == nil || IsNil(o.NumNoResponse) {
		var ret int32
		return ret
	}
	return *o.NumNoResponse
}

// GetNumNoResponseOk returns a tuple with the NumNoResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendees) GetNumNoResponseOk() (*int32, bool) {
	if o == nil || IsNil(o.NumNoResponse) {
		return nil, false
	}
	return o.NumNoResponse, true
}

// HasNumNoResponse returns a boolean if a field has been set.
func (o *CalendarAttendees) HasNumNoResponse() bool {
	if o != nil && !IsNil(o.NumNoResponse) {
		return true
	}

	return false
}

// SetNumNoResponse gets a reference to the given int32 and assigns it to the NumNoResponse field.
func (o *CalendarAttendees) SetNumNoResponse(v int32) {
	o.NumNoResponse = &v
}

// GetNumTentative returns the NumTentative field value if set, zero value otherwise.
func (o *CalendarAttendees) GetNumTentative() int32 {
	if o == nil || IsNil(o.NumTentative) {
		var ret int32
		return ret
	}
	return *o.NumTentative
}

// GetNumTentativeOk returns a tuple with the NumTentative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CalendarAttendees) GetNumTentativeOk() (*int32, bool) {
	if o == nil || IsNil(o.NumTentative) {
		return nil, false
	}
	return o.NumTentative, true
}

// HasNumTentative returns a boolean if a field has been set.
func (o *CalendarAttendees) HasNumTentative() bool {
	if o != nil && !IsNil(o.NumTentative) {
		return true
	}

	return false
}

// SetNumTentative gets a reference to the given int32 and assigns it to the NumTentative field.
func (o *CalendarAttendees) SetNumTentative(v int32) {
	o.NumTentative = &v
}

func (o CalendarAttendees) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CalendarAttendees) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.People) {
		toSerialize["people"] = o.People
	}
	if !IsNil(o.IsLimit) {
		toSerialize["isLimit"] = o.IsLimit
	}
	if !IsNil(o.Total) {
		toSerialize["total"] = o.Total
	}
	if !IsNil(o.NumAccepted) {
		toSerialize["numAccepted"] = o.NumAccepted
	}
	if !IsNil(o.NumDeclined) {
		toSerialize["numDeclined"] = o.NumDeclined
	}
	if !IsNil(o.NumNoResponse) {
		toSerialize["numNoResponse"] = o.NumNoResponse
	}
	if !IsNil(o.NumTentative) {
		toSerialize["numTentative"] = o.NumTentative
	}
	return toSerialize, nil
}

type NullableCalendarAttendees struct {
	value *CalendarAttendees
	isSet bool
}

func (v NullableCalendarAttendees) Get() *CalendarAttendees {
	return v.value
}

func (v *NullableCalendarAttendees) Set(val *CalendarAttendees) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendarAttendees) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendarAttendees) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendarAttendees(val *CalendarAttendees) *NullableCalendarAttendees {
	return &NullableCalendarAttendees{value: val, isSet: true}
}

func (v NullableCalendarAttendees) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendarAttendees) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


