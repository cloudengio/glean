/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the PeopleFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeopleFilters{}

// PeopleFilters struct for PeopleFilters
type PeopleFilters struct {
	// Facets used for filtering people search
	Filter []FacetFilter `json:"filter,omitempty"`
	// A query string to search for people that each person in the response must conform to. An empty query does not filter any people.
	Query *string `json:"query,omitempty"`
}

// NewPeopleFilters instantiates a new PeopleFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleFilters() *PeopleFilters {
	this := PeopleFilters{}
	return &this
}

// NewPeopleFiltersWithDefaults instantiates a new PeopleFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleFiltersWithDefaults() *PeopleFilters {
	this := PeopleFilters{}
	return &this
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *PeopleFilters) GetFilter() []FacetFilter {
	if o == nil || IsNil(o.Filter) {
		var ret []FacetFilter
		return ret
	}
	return o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleFilters) GetFilterOk() ([]FacetFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *PeopleFilters) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given []FacetFilter and assigns it to the Filter field.
func (o *PeopleFilters) SetFilter(v []FacetFilter) {
	o.Filter = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *PeopleFilters) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleFilters) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *PeopleFilters) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *PeopleFilters) SetQuery(v string) {
	o.Query = &v
}

func (o PeopleFilters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeopleFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullablePeopleFilters struct {
	value *PeopleFilters
	isSet bool
}

func (v NullablePeopleFilters) Get() *PeopleFilters {
	return v.value
}

func (v *NullablePeopleFilters) Set(val *PeopleFilters) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleFilters) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleFilters(val *PeopleFilters) *NullablePeopleFilters {
	return &NullablePeopleFilters{value: val, isSet: true}
}

func (v NullablePeopleFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


