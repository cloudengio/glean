/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the PreviewShortcutResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreviewShortcutResponse{}

// PreviewShortcutResponse struct for PreviewShortcutResponse
type PreviewShortcutResponse struct {
	Shortcut *Shortcut `json:"shortcut,omitempty"`
	// DEPRECATED - use existingUrlShortcuts instead
	// Deprecated
	ExistingUrlAliases []string `json:"existingUrlAliases,omitempty"`
	// Exising shortcuts that have a similar destination URL.
	ExistingUrlShortcuts []Shortcut `json:"existingUrlShortcuts,omitempty"`
	Error *ShortcutError `json:"error,omitempty"`
}

// NewPreviewShortcutResponse instantiates a new PreviewShortcutResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreviewShortcutResponse() *PreviewShortcutResponse {
	this := PreviewShortcutResponse{}
	return &this
}

// NewPreviewShortcutResponseWithDefaults instantiates a new PreviewShortcutResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreviewShortcutResponseWithDefaults() *PreviewShortcutResponse {
	this := PreviewShortcutResponse{}
	return &this
}

// GetShortcut returns the Shortcut field value if set, zero value otherwise.
func (o *PreviewShortcutResponse) GetShortcut() Shortcut {
	if o == nil || IsNil(o.Shortcut) {
		var ret Shortcut
		return ret
	}
	return *o.Shortcut
}

// GetShortcutOk returns a tuple with the Shortcut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewShortcutResponse) GetShortcutOk() (*Shortcut, bool) {
	if o == nil || IsNil(o.Shortcut) {
		return nil, false
	}
	return o.Shortcut, true
}

// HasShortcut returns a boolean if a field has been set.
func (o *PreviewShortcutResponse) HasShortcut() bool {
	if o != nil && !IsNil(o.Shortcut) {
		return true
	}

	return false
}

// SetShortcut gets a reference to the given Shortcut and assigns it to the Shortcut field.
func (o *PreviewShortcutResponse) SetShortcut(v Shortcut) {
	o.Shortcut = &v
}

// GetExistingUrlAliases returns the ExistingUrlAliases field value if set, zero value otherwise.
// Deprecated
func (o *PreviewShortcutResponse) GetExistingUrlAliases() []string {
	if o == nil || IsNil(o.ExistingUrlAliases) {
		var ret []string
		return ret
	}
	return o.ExistingUrlAliases
}

// GetExistingUrlAliasesOk returns a tuple with the ExistingUrlAliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PreviewShortcutResponse) GetExistingUrlAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExistingUrlAliases) {
		return nil, false
	}
	return o.ExistingUrlAliases, true
}

// HasExistingUrlAliases returns a boolean if a field has been set.
func (o *PreviewShortcutResponse) HasExistingUrlAliases() bool {
	if o != nil && !IsNil(o.ExistingUrlAliases) {
		return true
	}

	return false
}

// SetExistingUrlAliases gets a reference to the given []string and assigns it to the ExistingUrlAliases field.
// Deprecated
func (o *PreviewShortcutResponse) SetExistingUrlAliases(v []string) {
	o.ExistingUrlAliases = v
}

// GetExistingUrlShortcuts returns the ExistingUrlShortcuts field value if set, zero value otherwise.
func (o *PreviewShortcutResponse) GetExistingUrlShortcuts() []Shortcut {
	if o == nil || IsNil(o.ExistingUrlShortcuts) {
		var ret []Shortcut
		return ret
	}
	return o.ExistingUrlShortcuts
}

// GetExistingUrlShortcutsOk returns a tuple with the ExistingUrlShortcuts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewShortcutResponse) GetExistingUrlShortcutsOk() ([]Shortcut, bool) {
	if o == nil || IsNil(o.ExistingUrlShortcuts) {
		return nil, false
	}
	return o.ExistingUrlShortcuts, true
}

// HasExistingUrlShortcuts returns a boolean if a field has been set.
func (o *PreviewShortcutResponse) HasExistingUrlShortcuts() bool {
	if o != nil && !IsNil(o.ExistingUrlShortcuts) {
		return true
	}

	return false
}

// SetExistingUrlShortcuts gets a reference to the given []Shortcut and assigns it to the ExistingUrlShortcuts field.
func (o *PreviewShortcutResponse) SetExistingUrlShortcuts(v []Shortcut) {
	o.ExistingUrlShortcuts = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PreviewShortcutResponse) GetError() ShortcutError {
	if o == nil || IsNil(o.Error) {
		var ret ShortcutError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PreviewShortcutResponse) GetErrorOk() (*ShortcutError, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PreviewShortcutResponse) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given ShortcutError and assigns it to the Error field.
func (o *PreviewShortcutResponse) SetError(v ShortcutError) {
	o.Error = &v
}

func (o PreviewShortcutResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreviewShortcutResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Shortcut) {
		toSerialize["shortcut"] = o.Shortcut
	}
	if !IsNil(o.ExistingUrlAliases) {
		toSerialize["existingUrlAliases"] = o.ExistingUrlAliases
	}
	if !IsNil(o.ExistingUrlShortcuts) {
		toSerialize["existingUrlShortcuts"] = o.ExistingUrlShortcuts
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullablePreviewShortcutResponse struct {
	value *PreviewShortcutResponse
	isSet bool
}

func (v NullablePreviewShortcutResponse) Get() *PreviewShortcutResponse {
	return v.value
}

func (v *NullablePreviewShortcutResponse) Set(val *PreviewShortcutResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePreviewShortcutResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePreviewShortcutResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreviewShortcutResponse(val *PreviewShortcutResponse) *NullablePreviewShortcutResponse {
	return &NullablePreviewShortcutResponse{value: val, isSet: true}
}

func (v NullablePreviewShortcutResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreviewShortcutResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


