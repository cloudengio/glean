/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the StatusLabelConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusLabelConfig{}

// StatusLabelConfig struct for StatusLabelConfig
type StatusLabelConfig struct {
	Key *string `json:"key,omitempty"`
	OmitMissingValues *bool `json:"omitMissingValues,omitempty"`
	UseDefault *bool `json:"useDefault,omitempty"`
	Values []LabelConfig `json:"values,omitempty"`
}

// NewStatusLabelConfig instantiates a new StatusLabelConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusLabelConfig() *StatusLabelConfig {
	this := StatusLabelConfig{}
	return &this
}

// NewStatusLabelConfigWithDefaults instantiates a new StatusLabelConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusLabelConfigWithDefaults() *StatusLabelConfig {
	this := StatusLabelConfig{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *StatusLabelConfig) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusLabelConfig) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *StatusLabelConfig) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *StatusLabelConfig) SetKey(v string) {
	o.Key = &v
}

// GetOmitMissingValues returns the OmitMissingValues field value if set, zero value otherwise.
func (o *StatusLabelConfig) GetOmitMissingValues() bool {
	if o == nil || IsNil(o.OmitMissingValues) {
		var ret bool
		return ret
	}
	return *o.OmitMissingValues
}

// GetOmitMissingValuesOk returns a tuple with the OmitMissingValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusLabelConfig) GetOmitMissingValuesOk() (*bool, bool) {
	if o == nil || IsNil(o.OmitMissingValues) {
		return nil, false
	}
	return o.OmitMissingValues, true
}

// HasOmitMissingValues returns a boolean if a field has been set.
func (o *StatusLabelConfig) HasOmitMissingValues() bool {
	if o != nil && !IsNil(o.OmitMissingValues) {
		return true
	}

	return false
}

// SetOmitMissingValues gets a reference to the given bool and assigns it to the OmitMissingValues field.
func (o *StatusLabelConfig) SetOmitMissingValues(v bool) {
	o.OmitMissingValues = &v
}

// GetUseDefault returns the UseDefault field value if set, zero value otherwise.
func (o *StatusLabelConfig) GetUseDefault() bool {
	if o == nil || IsNil(o.UseDefault) {
		var ret bool
		return ret
	}
	return *o.UseDefault
}

// GetUseDefaultOk returns a tuple with the UseDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusLabelConfig) GetUseDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.UseDefault) {
		return nil, false
	}
	return o.UseDefault, true
}

// HasUseDefault returns a boolean if a field has been set.
func (o *StatusLabelConfig) HasUseDefault() bool {
	if o != nil && !IsNil(o.UseDefault) {
		return true
	}

	return false
}

// SetUseDefault gets a reference to the given bool and assigns it to the UseDefault field.
func (o *StatusLabelConfig) SetUseDefault(v bool) {
	o.UseDefault = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *StatusLabelConfig) GetValues() []LabelConfig {
	if o == nil || IsNil(o.Values) {
		var ret []LabelConfig
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatusLabelConfig) GetValuesOk() ([]LabelConfig, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *StatusLabelConfig) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []LabelConfig and assigns it to the Values field.
func (o *StatusLabelConfig) SetValues(v []LabelConfig) {
	o.Values = v
}

func (o StatusLabelConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusLabelConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.OmitMissingValues) {
		toSerialize["omitMissingValues"] = o.OmitMissingValues
	}
	if !IsNil(o.UseDefault) {
		toSerialize["useDefault"] = o.UseDefault
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableStatusLabelConfig struct {
	value *StatusLabelConfig
	isSet bool
}

func (v NullableStatusLabelConfig) Get() *StatusLabelConfig {
	return v.value
}

func (v *NullableStatusLabelConfig) Set(val *StatusLabelConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusLabelConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusLabelConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusLabelConfig(val *StatusLabelConfig) *NullableStatusLabelConfig {
	return &NullableStatusLabelConfig{value: val, isSet: true}
}

func (v NullableStatusLabelConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusLabelConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


