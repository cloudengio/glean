/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AskRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AskRequest{}

// AskRequest struct for AskRequest
type AskRequest struct {
	// Whether to apply apply only question detection and not answering.
	DetectOnly *bool `json:"detectOnly,omitempty"`
	SearchRequest SearchRequest `json:"searchRequest"`
	// Search operators to append to the query
	Operators *string `json:"operators,omitempty"`
}

// NewAskRequest instantiates a new AskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAskRequest(searchRequest SearchRequest) *AskRequest {
	this := AskRequest{}
	this.SearchRequest = searchRequest
	return &this
}

// NewAskRequestWithDefaults instantiates a new AskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAskRequestWithDefaults() *AskRequest {
	this := AskRequest{}
	return &this
}

// GetDetectOnly returns the DetectOnly field value if set, zero value otherwise.
func (o *AskRequest) GetDetectOnly() bool {
	if o == nil || IsNil(o.DetectOnly) {
		var ret bool
		return ret
	}
	return *o.DetectOnly
}

// GetDetectOnlyOk returns a tuple with the DetectOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskRequest) GetDetectOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.DetectOnly) {
		return nil, false
	}
	return o.DetectOnly, true
}

// HasDetectOnly returns a boolean if a field has been set.
func (o *AskRequest) HasDetectOnly() bool {
	if o != nil && !IsNil(o.DetectOnly) {
		return true
	}

	return false
}

// SetDetectOnly gets a reference to the given bool and assigns it to the DetectOnly field.
func (o *AskRequest) SetDetectOnly(v bool) {
	o.DetectOnly = &v
}

// GetSearchRequest returns the SearchRequest field value
func (o *AskRequest) GetSearchRequest() SearchRequest {
	if o == nil {
		var ret SearchRequest
		return ret
	}

	return o.SearchRequest
}

// GetSearchRequestOk returns a tuple with the SearchRequest field value
// and a boolean to check if the value has been set.
func (o *AskRequest) GetSearchRequestOk() (*SearchRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SearchRequest, true
}

// SetSearchRequest sets field value
func (o *AskRequest) SetSearchRequest(v SearchRequest) {
	o.SearchRequest = v
}

// GetOperators returns the Operators field value if set, zero value otherwise.
func (o *AskRequest) GetOperators() string {
	if o == nil || IsNil(o.Operators) {
		var ret string
		return ret
	}
	return *o.Operators
}

// GetOperatorsOk returns a tuple with the Operators field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskRequest) GetOperatorsOk() (*string, bool) {
	if o == nil || IsNil(o.Operators) {
		return nil, false
	}
	return o.Operators, true
}

// HasOperators returns a boolean if a field has been set.
func (o *AskRequest) HasOperators() bool {
	if o != nil && !IsNil(o.Operators) {
		return true
	}

	return false
}

// SetOperators gets a reference to the given string and assigns it to the Operators field.
func (o *AskRequest) SetOperators(v string) {
	o.Operators = &v
}

func (o AskRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AskRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DetectOnly) {
		toSerialize["detectOnly"] = o.DetectOnly
	}
	toSerialize["searchRequest"] = o.SearchRequest
	if !IsNil(o.Operators) {
		toSerialize["operators"] = o.Operators
	}
	return toSerialize, nil
}

type NullableAskRequest struct {
	value *AskRequest
	isSet bool
}

func (v NullableAskRequest) Get() *AskRequest {
	return v.value
}

func (v *NullableAskRequest) Set(val *AskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAskRequest(val *AskRequest) *NullableAskRequest {
	return &NullableAskRequest{value: val, isSet: true}
}

func (v NullableAskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


