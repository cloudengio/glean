/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the SessionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionInfo{}

// SessionInfo struct for SessionInfo
type SessionInfo struct {
	// A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab.
	SessionTrackingToken *string `json:"sessionTrackingToken,omitempty"`
	// A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab.
	TabId *string `json:"tabId,omitempty"`
	// The last time the server saw this token.
	LastSeen *time.Time `json:"lastSeen,omitempty"`
	// The last query seen by the server.
	LastQuery *string `json:"lastQuery,omitempty"`
}

// NewSessionInfo instantiates a new SessionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionInfo() *SessionInfo {
	this := SessionInfo{}
	return &this
}

// NewSessionInfoWithDefaults instantiates a new SessionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionInfoWithDefaults() *SessionInfo {
	this := SessionInfo{}
	return &this
}

// GetSessionTrackingToken returns the SessionTrackingToken field value if set, zero value otherwise.
func (o *SessionInfo) GetSessionTrackingToken() string {
	if o == nil || IsNil(o.SessionTrackingToken) {
		var ret string
		return ret
	}
	return *o.SessionTrackingToken
}

// GetSessionTrackingTokenOk returns a tuple with the SessionTrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetSessionTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SessionTrackingToken) {
		return nil, false
	}
	return o.SessionTrackingToken, true
}

// HasSessionTrackingToken returns a boolean if a field has been set.
func (o *SessionInfo) HasSessionTrackingToken() bool {
	if o != nil && !IsNil(o.SessionTrackingToken) {
		return true
	}

	return false
}

// SetSessionTrackingToken gets a reference to the given string and assigns it to the SessionTrackingToken field.
func (o *SessionInfo) SetSessionTrackingToken(v string) {
	o.SessionTrackingToken = &v
}

// GetTabId returns the TabId field value if set, zero value otherwise.
func (o *SessionInfo) GetTabId() string {
	if o == nil || IsNil(o.TabId) {
		var ret string
		return ret
	}
	return *o.TabId
}

// GetTabIdOk returns a tuple with the TabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetTabIdOk() (*string, bool) {
	if o == nil || IsNil(o.TabId) {
		return nil, false
	}
	return o.TabId, true
}

// HasTabId returns a boolean if a field has been set.
func (o *SessionInfo) HasTabId() bool {
	if o != nil && !IsNil(o.TabId) {
		return true
	}

	return false
}

// SetTabId gets a reference to the given string and assigns it to the TabId field.
func (o *SessionInfo) SetTabId(v string) {
	o.TabId = &v
}

// GetLastSeen returns the LastSeen field value if set, zero value otherwise.
func (o *SessionInfo) GetLastSeen() time.Time {
	if o == nil || IsNil(o.LastSeen) {
		var ret time.Time
		return ret
	}
	return *o.LastSeen
}

// GetLastSeenOk returns a tuple with the LastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetLastSeenOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSeen) {
		return nil, false
	}
	return o.LastSeen, true
}

// HasLastSeen returns a boolean if a field has been set.
func (o *SessionInfo) HasLastSeen() bool {
	if o != nil && !IsNil(o.LastSeen) {
		return true
	}

	return false
}

// SetLastSeen gets a reference to the given time.Time and assigns it to the LastSeen field.
func (o *SessionInfo) SetLastSeen(v time.Time) {
	o.LastSeen = &v
}

// GetLastQuery returns the LastQuery field value if set, zero value otherwise.
func (o *SessionInfo) GetLastQuery() string {
	if o == nil || IsNil(o.LastQuery) {
		var ret string
		return ret
	}
	return *o.LastQuery
}

// GetLastQueryOk returns a tuple with the LastQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetLastQueryOk() (*string, bool) {
	if o == nil || IsNil(o.LastQuery) {
		return nil, false
	}
	return o.LastQuery, true
}

// HasLastQuery returns a boolean if a field has been set.
func (o *SessionInfo) HasLastQuery() bool {
	if o != nil && !IsNil(o.LastQuery) {
		return true
	}

	return false
}

// SetLastQuery gets a reference to the given string and assigns it to the LastQuery field.
func (o *SessionInfo) SetLastQuery(v string) {
	o.LastQuery = &v
}

func (o SessionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SessionTrackingToken) {
		toSerialize["sessionTrackingToken"] = o.SessionTrackingToken
	}
	if !IsNil(o.TabId) {
		toSerialize["tabId"] = o.TabId
	}
	if !IsNil(o.LastSeen) {
		toSerialize["lastSeen"] = o.LastSeen
	}
	if !IsNil(o.LastQuery) {
		toSerialize["lastQuery"] = o.LastQuery
	}
	return toSerialize, nil
}

type NullableSessionInfo struct {
	value *SessionInfo
	isSet bool
}

func (v NullableSessionInfo) Get() *SessionInfo {
	return v.value
}

func (v *NullableSessionInfo) Set(val *SessionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionInfo(val *SessionInfo) *NullableSessionInfo {
	return &NullableSessionInfo{value: val, isSet: true}
}

func (v NullableSessionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


