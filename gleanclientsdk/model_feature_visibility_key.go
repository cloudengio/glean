/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// FeatureVisibilityKey the model 'FeatureVisibilityKey'
type FeatureVisibilityKey string

// List of FeatureVisibilityKey
const (
	ENABLED FeatureVisibilityKey = "ENABLED"
	DISABLED FeatureVisibilityKey = "DISABLED"
	UNLISTED FeatureVisibilityKey = "UNLISTED"
)

// All allowed values of FeatureVisibilityKey enum
var AllowedFeatureVisibilityKeyEnumValues = []FeatureVisibilityKey{
	"ENABLED",
	"DISABLED",
	"UNLISTED",
}

func (v *FeatureVisibilityKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FeatureVisibilityKey(value)
	for _, existing := range AllowedFeatureVisibilityKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FeatureVisibilityKey", value)
}

// NewFeatureVisibilityKeyFromValue returns a pointer to a valid FeatureVisibilityKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFeatureVisibilityKeyFromValue(v string) (*FeatureVisibilityKey, error) {
	ev := FeatureVisibilityKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FeatureVisibilityKey: valid values are %v", v, AllowedFeatureVisibilityKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FeatureVisibilityKey) IsValid() bool {
	for _, existing := range AllowedFeatureVisibilityKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FeatureVisibilityKey value
func (v FeatureVisibilityKey) Ptr() *FeatureVisibilityKey {
	return &v
}

type NullableFeatureVisibilityKey struct {
	value *FeatureVisibilityKey
	isSet bool
}

func (v NullableFeatureVisibilityKey) Get() *FeatureVisibilityKey {
	return v.value
}

func (v *NullableFeatureVisibilityKey) Set(val *FeatureVisibilityKey) {
	v.value = val
	v.isSet = true
}

func (v NullableFeatureVisibilityKey) IsSet() bool {
	return v.isSet
}

func (v *NullableFeatureVisibilityKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeatureVisibilityKey(val *FeatureVisibilityKey) *NullableFeatureVisibilityKey {
	return &NullableFeatureVisibilityKey{value: val, isSet: true}
}

func (v NullableFeatureVisibilityKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeatureVisibilityKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

