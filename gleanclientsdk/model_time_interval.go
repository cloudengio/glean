/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the TimeInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeInterval{}

// TimeInterval struct for TimeInterval
type TimeInterval struct {
	// The RFC3339 timestamp formatted start time of this event.
	Start string `json:"start"`
	// The RFC3339 timestamp formatted end time of this event.
	End string `json:"end"`
}

// NewTimeInterval instantiates a new TimeInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeInterval(start string, end string) *TimeInterval {
	this := TimeInterval{}
	this.Start = start
	this.End = end
	return &this
}

// NewTimeIntervalWithDefaults instantiates a new TimeInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeIntervalWithDefaults() *TimeInterval {
	this := TimeInterval{}
	return &this
}

// GetStart returns the Start field value
func (o *TimeInterval) GetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *TimeInterval) GetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *TimeInterval) SetStart(v string) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *TimeInterval) GetEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *TimeInterval) GetEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *TimeInterval) SetEnd(v string) {
	o.End = v
}

func (o TimeInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	return toSerialize, nil
}

type NullableTimeInterval struct {
	value *TimeInterval
	isSet bool
}

func (v NullableTimeInterval) Get() *TimeInterval {
	return v.value
}

func (v *NullableTimeInterval) Set(val *TimeInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeInterval(val *TimeInterval) *NullableTimeInterval {
	return &NullableTimeInterval{value: val, isSet: true}
}

func (v NullableTimeInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


