/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DatasourceSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasourceSchema{}

// DatasourceSchema The schema definition for a datasource.
type DatasourceSchema struct {
	// Unique identifier of datasource instance to which this config applies.
	Name string `json:"name"`
	// The user-friendly instance label to display. If omitted, falls back to the title-cased `name`.
	DisplayName *string `json:"displayName,omitempty"`
	// The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED.
	DatasourceCategory *string `json:"datasourceCategory,omitempty"`
	// Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: urlRegex is a required field for non-entity datasources (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**
	UrlRegex *string `json:"urlRegex,omitempty"`
	// The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	IconUrl *string `json:"iconUrl,omitempty"`
	// The list of top-level `objectType`s for the datasource.
	ObjectDefinitions []ObjectDefinition `json:"objectDefinitions,omitempty"`
	// Example text for what to search for in this datasource
	SuggestionText *string `json:"suggestionText,omitempty"`
	// The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page.
	HomeUrl *string `json:"homeUrl,omitempty"`
	// This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed urls for crawling.
	CrawlerSeedUrls []string `json:"crawlerSeedUrls,omitempty"`
	// The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	IconDarkUrl *string `json:"iconDarkUrl,omitempty"`
	// List of built-in facet types that should be hidden for the datasource.
	HideBuiltInFacets []string `json:"hideBuiltInFacets,omitempty"`
	// A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.
	CanonicalizingURLRegex []CanonicalizingRegexType `json:"canonicalizingURLRegex,omitempty"`
	// A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results
	CanonicalizingTitleRegex []CanonicalizingRegexType `json:"canonicalizingTitleRegex,omitempty"`
	// A regex that identifies titles that should not be indexed
	RedlistTitleRegex *string `json:"redlistTitleRegex,omitempty"`
	ConnectorType *ConnectorType `json:"connectorType,omitempty"`
	// List of actions for this datasource instance that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira
	Quicklinks []Quicklink `json:"quicklinks,omitempty"`
	// The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`.
	RenderConfigPreset *string `json:"renderConfigPreset,omitempty"`
	// Aliases that can be used as `app` operator-values.
	Aliases []string `json:"aliases,omitempty"`
	// Whether or not this datasource is hosted on-premise.
	IsOnPrem *bool `json:"isOnPrem,omitempty"`
	// True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load.
	TrustUrlRegexForViewActivity *bool `json:"trustUrlRegexForViewActivity,omitempty"`
	// If true, a utm_source query param will be added to outbound links to this datasource within Glean.
	IncludeUtmSource *bool `json:"includeUtmSource,omitempty"`
	// The (non-unique) name of the datasource of which this config is an instance, e.g. \"jira\".
	DatasourceName *string `json:"datasourceName,omitempty"`
	// The instance of the datasource for this particular config, e.g. \"onprem\".
	InstanceOnlyName *string `json:"instanceOnlyName,omitempty"`
	// A human readable string identifying this instance as compared to its peers, e.g. \"github.com/askscio\" or \"github.askscio.com\"
	InstanceDescription *string `json:"instanceDescription,omitempty"`
	// Whether this datasource will show calendar feed events
	CalendarEnabled *bool `json:"calendarEnabled,omitempty"`
	// Whether the HTML body should be reported in ActivityEvents.
	CollectBodyInActivity *bool `json:"collectBodyInActivity,omitempty"`
	// Whether to crawl site starting at the home URL and all crawler seed URLs.
	CrawlHomeUrl *bool `json:"crawlHomeUrl,omitempty"`
	// The support Glean provides for this datasource.
	DatasourceDescription *string `json:"datasourceDescription,omitempty"`
	// The user label for the datasource. This is distinct from the display names of the instances.
	DatasourceDisplayName *string `json:"datasourceDisplayName,omitempty"`
	FederatedGoogleOAuth *OAuthConfig `json:"federatedGoogleOAuth,omitempty"`
	// Whether the datasource supports the native search replacement feature.
	IsEligibleForNativeReplacement *bool `json:"isEligibleForNativeReplacement,omitempty"`
	// Whether the datasource is set in queryapi.datasources.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Make Native Search Replace opt-out rather than opt-in.
	IsNativeReplacementAutoEnabled *bool `json:"isNativeReplacementAutoEnabled,omitempty"`
	// Whether the user is able to search for results from this datasource.
	IsSearchable *bool `json:"isSearchable,omitempty"`
	// Whether the the datasource is configured to be used within mentions features such as the mentions feed
	MentionsEnabled *bool `json:"mentionsEnabled,omitempty"`
	PrivateAuth *PrivateAuth `json:"privateAuth,omitempty"`
	// CSS selectors that identify native search input elements on the datasource's website.
	SearchInputSelectors []string `json:"searchInputSelectors,omitempty"`
	// Whether the datasource can power the user's calendar.
	SupportsCalendar *bool `json:"supportsCalendar,omitempty"`
	// The current version of the urlRegex, changes would instruct the client to clear any information based on previous versions of the urlRegex.
	UrlRegexVersion *int32 `json:"urlRegexVersion,omitempty"`
}

// NewDatasourceSchema instantiates a new DatasourceSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceSchema(name string) *DatasourceSchema {
	this := DatasourceSchema{}
	this.Name = name
	var datasourceCategory string = "UNCATEGORIZED"
	this.DatasourceCategory = &datasourceCategory
	var trustUrlRegexForViewActivity bool = true
	this.TrustUrlRegexForViewActivity = &trustUrlRegexForViewActivity
	return &this
}

// NewDatasourceSchemaWithDefaults instantiates a new DatasourceSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceSchemaWithDefaults() *DatasourceSchema {
	this := DatasourceSchema{}
	var datasourceCategory string = "UNCATEGORIZED"
	this.DatasourceCategory = &datasourceCategory
	var trustUrlRegexForViewActivity bool = true
	this.TrustUrlRegexForViewActivity = &trustUrlRegexForViewActivity
	return &this
}

// GetName returns the Name field value
func (o *DatasourceSchema) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatasourceSchema) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DatasourceSchema) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DatasourceSchema) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DatasourceSchema) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetDatasourceCategory returns the DatasourceCategory field value if set, zero value otherwise.
func (o *DatasourceSchema) GetDatasourceCategory() string {
	if o == nil || IsNil(o.DatasourceCategory) {
		var ret string
		return ret
	}
	return *o.DatasourceCategory
}

// GetDatasourceCategoryOk returns a tuple with the DatasourceCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetDatasourceCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceCategory) {
		return nil, false
	}
	return o.DatasourceCategory, true
}

// HasDatasourceCategory returns a boolean if a field has been set.
func (o *DatasourceSchema) HasDatasourceCategory() bool {
	if o != nil && !IsNil(o.DatasourceCategory) {
		return true
	}

	return false
}

// SetDatasourceCategory gets a reference to the given string and assigns it to the DatasourceCategory field.
func (o *DatasourceSchema) SetDatasourceCategory(v string) {
	o.DatasourceCategory = &v
}

// GetUrlRegex returns the UrlRegex field value if set, zero value otherwise.
func (o *DatasourceSchema) GetUrlRegex() string {
	if o == nil || IsNil(o.UrlRegex) {
		var ret string
		return ret
	}
	return *o.UrlRegex
}

// GetUrlRegexOk returns a tuple with the UrlRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetUrlRegexOk() (*string, bool) {
	if o == nil || IsNil(o.UrlRegex) {
		return nil, false
	}
	return o.UrlRegex, true
}

// HasUrlRegex returns a boolean if a field has been set.
func (o *DatasourceSchema) HasUrlRegex() bool {
	if o != nil && !IsNil(o.UrlRegex) {
		return true
	}

	return false
}

// SetUrlRegex gets a reference to the given string and assigns it to the UrlRegex field.
func (o *DatasourceSchema) SetUrlRegex(v string) {
	o.UrlRegex = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *DatasourceSchema) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *DatasourceSchema) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *DatasourceSchema) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetObjectDefinitions returns the ObjectDefinitions field value if set, zero value otherwise.
func (o *DatasourceSchema) GetObjectDefinitions() []ObjectDefinition {
	if o == nil || IsNil(o.ObjectDefinitions) {
		var ret []ObjectDefinition
		return ret
	}
	return o.ObjectDefinitions
}

// GetObjectDefinitionsOk returns a tuple with the ObjectDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetObjectDefinitionsOk() ([]ObjectDefinition, bool) {
	if o == nil || IsNil(o.ObjectDefinitions) {
		return nil, false
	}
	return o.ObjectDefinitions, true
}

// HasObjectDefinitions returns a boolean if a field has been set.
func (o *DatasourceSchema) HasObjectDefinitions() bool {
	if o != nil && !IsNil(o.ObjectDefinitions) {
		return true
	}

	return false
}

// SetObjectDefinitions gets a reference to the given []ObjectDefinition and assigns it to the ObjectDefinitions field.
func (o *DatasourceSchema) SetObjectDefinitions(v []ObjectDefinition) {
	o.ObjectDefinitions = v
}

// GetSuggestionText returns the SuggestionText field value if set, zero value otherwise.
func (o *DatasourceSchema) GetSuggestionText() string {
	if o == nil || IsNil(o.SuggestionText) {
		var ret string
		return ret
	}
	return *o.SuggestionText
}

// GetSuggestionTextOk returns a tuple with the SuggestionText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetSuggestionTextOk() (*string, bool) {
	if o == nil || IsNil(o.SuggestionText) {
		return nil, false
	}
	return o.SuggestionText, true
}

// HasSuggestionText returns a boolean if a field has been set.
func (o *DatasourceSchema) HasSuggestionText() bool {
	if o != nil && !IsNil(o.SuggestionText) {
		return true
	}

	return false
}

// SetSuggestionText gets a reference to the given string and assigns it to the SuggestionText field.
func (o *DatasourceSchema) SetSuggestionText(v string) {
	o.SuggestionText = &v
}

// GetHomeUrl returns the HomeUrl field value if set, zero value otherwise.
func (o *DatasourceSchema) GetHomeUrl() string {
	if o == nil || IsNil(o.HomeUrl) {
		var ret string
		return ret
	}
	return *o.HomeUrl
}

// GetHomeUrlOk returns a tuple with the HomeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetHomeUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HomeUrl) {
		return nil, false
	}
	return o.HomeUrl, true
}

// HasHomeUrl returns a boolean if a field has been set.
func (o *DatasourceSchema) HasHomeUrl() bool {
	if o != nil && !IsNil(o.HomeUrl) {
		return true
	}

	return false
}

// SetHomeUrl gets a reference to the given string and assigns it to the HomeUrl field.
func (o *DatasourceSchema) SetHomeUrl(v string) {
	o.HomeUrl = &v
}

// GetCrawlerSeedUrls returns the CrawlerSeedUrls field value if set, zero value otherwise.
func (o *DatasourceSchema) GetCrawlerSeedUrls() []string {
	if o == nil || IsNil(o.CrawlerSeedUrls) {
		var ret []string
		return ret
	}
	return o.CrawlerSeedUrls
}

// GetCrawlerSeedUrlsOk returns a tuple with the CrawlerSeedUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetCrawlerSeedUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.CrawlerSeedUrls) {
		return nil, false
	}
	return o.CrawlerSeedUrls, true
}

// HasCrawlerSeedUrls returns a boolean if a field has been set.
func (o *DatasourceSchema) HasCrawlerSeedUrls() bool {
	if o != nil && !IsNil(o.CrawlerSeedUrls) {
		return true
	}

	return false
}

// SetCrawlerSeedUrls gets a reference to the given []string and assigns it to the CrawlerSeedUrls field.
func (o *DatasourceSchema) SetCrawlerSeedUrls(v []string) {
	o.CrawlerSeedUrls = v
}

// GetIconDarkUrl returns the IconDarkUrl field value if set, zero value otherwise.
func (o *DatasourceSchema) GetIconDarkUrl() string {
	if o == nil || IsNil(o.IconDarkUrl) {
		var ret string
		return ret
	}
	return *o.IconDarkUrl
}

// GetIconDarkUrlOk returns a tuple with the IconDarkUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetIconDarkUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconDarkUrl) {
		return nil, false
	}
	return o.IconDarkUrl, true
}

// HasIconDarkUrl returns a boolean if a field has been set.
func (o *DatasourceSchema) HasIconDarkUrl() bool {
	if o != nil && !IsNil(o.IconDarkUrl) {
		return true
	}

	return false
}

// SetIconDarkUrl gets a reference to the given string and assigns it to the IconDarkUrl field.
func (o *DatasourceSchema) SetIconDarkUrl(v string) {
	o.IconDarkUrl = &v
}

// GetHideBuiltInFacets returns the HideBuiltInFacets field value if set, zero value otherwise.
func (o *DatasourceSchema) GetHideBuiltInFacets() []string {
	if o == nil || IsNil(o.HideBuiltInFacets) {
		var ret []string
		return ret
	}
	return o.HideBuiltInFacets
}

// GetHideBuiltInFacetsOk returns a tuple with the HideBuiltInFacets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetHideBuiltInFacetsOk() ([]string, bool) {
	if o == nil || IsNil(o.HideBuiltInFacets) {
		return nil, false
	}
	return o.HideBuiltInFacets, true
}

// HasHideBuiltInFacets returns a boolean if a field has been set.
func (o *DatasourceSchema) HasHideBuiltInFacets() bool {
	if o != nil && !IsNil(o.HideBuiltInFacets) {
		return true
	}

	return false
}

// SetHideBuiltInFacets gets a reference to the given []string and assigns it to the HideBuiltInFacets field.
func (o *DatasourceSchema) SetHideBuiltInFacets(v []string) {
	o.HideBuiltInFacets = v
}

// GetCanonicalizingURLRegex returns the CanonicalizingURLRegex field value if set, zero value otherwise.
func (o *DatasourceSchema) GetCanonicalizingURLRegex() []CanonicalizingRegexType {
	if o == nil || IsNil(o.CanonicalizingURLRegex) {
		var ret []CanonicalizingRegexType
		return ret
	}
	return o.CanonicalizingURLRegex
}

// GetCanonicalizingURLRegexOk returns a tuple with the CanonicalizingURLRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetCanonicalizingURLRegexOk() ([]CanonicalizingRegexType, bool) {
	if o == nil || IsNil(o.CanonicalizingURLRegex) {
		return nil, false
	}
	return o.CanonicalizingURLRegex, true
}

// HasCanonicalizingURLRegex returns a boolean if a field has been set.
func (o *DatasourceSchema) HasCanonicalizingURLRegex() bool {
	if o != nil && !IsNil(o.CanonicalizingURLRegex) {
		return true
	}

	return false
}

// SetCanonicalizingURLRegex gets a reference to the given []CanonicalizingRegexType and assigns it to the CanonicalizingURLRegex field.
func (o *DatasourceSchema) SetCanonicalizingURLRegex(v []CanonicalizingRegexType) {
	o.CanonicalizingURLRegex = v
}

// GetCanonicalizingTitleRegex returns the CanonicalizingTitleRegex field value if set, zero value otherwise.
func (o *DatasourceSchema) GetCanonicalizingTitleRegex() []CanonicalizingRegexType {
	if o == nil || IsNil(o.CanonicalizingTitleRegex) {
		var ret []CanonicalizingRegexType
		return ret
	}
	return o.CanonicalizingTitleRegex
}

// GetCanonicalizingTitleRegexOk returns a tuple with the CanonicalizingTitleRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetCanonicalizingTitleRegexOk() ([]CanonicalizingRegexType, bool) {
	if o == nil || IsNil(o.CanonicalizingTitleRegex) {
		return nil, false
	}
	return o.CanonicalizingTitleRegex, true
}

// HasCanonicalizingTitleRegex returns a boolean if a field has been set.
func (o *DatasourceSchema) HasCanonicalizingTitleRegex() bool {
	if o != nil && !IsNil(o.CanonicalizingTitleRegex) {
		return true
	}

	return false
}

// SetCanonicalizingTitleRegex gets a reference to the given []CanonicalizingRegexType and assigns it to the CanonicalizingTitleRegex field.
func (o *DatasourceSchema) SetCanonicalizingTitleRegex(v []CanonicalizingRegexType) {
	o.CanonicalizingTitleRegex = v
}

// GetRedlistTitleRegex returns the RedlistTitleRegex field value if set, zero value otherwise.
func (o *DatasourceSchema) GetRedlistTitleRegex() string {
	if o == nil || IsNil(o.RedlistTitleRegex) {
		var ret string
		return ret
	}
	return *o.RedlistTitleRegex
}

// GetRedlistTitleRegexOk returns a tuple with the RedlistTitleRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetRedlistTitleRegexOk() (*string, bool) {
	if o == nil || IsNil(o.RedlistTitleRegex) {
		return nil, false
	}
	return o.RedlistTitleRegex, true
}

// HasRedlistTitleRegex returns a boolean if a field has been set.
func (o *DatasourceSchema) HasRedlistTitleRegex() bool {
	if o != nil && !IsNil(o.RedlistTitleRegex) {
		return true
	}

	return false
}

// SetRedlistTitleRegex gets a reference to the given string and assigns it to the RedlistTitleRegex field.
func (o *DatasourceSchema) SetRedlistTitleRegex(v string) {
	o.RedlistTitleRegex = &v
}

// GetConnectorType returns the ConnectorType field value if set, zero value otherwise.
func (o *DatasourceSchema) GetConnectorType() ConnectorType {
	if o == nil || IsNil(o.ConnectorType) {
		var ret ConnectorType
		return ret
	}
	return *o.ConnectorType
}

// GetConnectorTypeOk returns a tuple with the ConnectorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetConnectorTypeOk() (*ConnectorType, bool) {
	if o == nil || IsNil(o.ConnectorType) {
		return nil, false
	}
	return o.ConnectorType, true
}

// HasConnectorType returns a boolean if a field has been set.
func (o *DatasourceSchema) HasConnectorType() bool {
	if o != nil && !IsNil(o.ConnectorType) {
		return true
	}

	return false
}

// SetConnectorType gets a reference to the given ConnectorType and assigns it to the ConnectorType field.
func (o *DatasourceSchema) SetConnectorType(v ConnectorType) {
	o.ConnectorType = &v
}

// GetQuicklinks returns the Quicklinks field value if set, zero value otherwise.
func (o *DatasourceSchema) GetQuicklinks() []Quicklink {
	if o == nil || IsNil(o.Quicklinks) {
		var ret []Quicklink
		return ret
	}
	return o.Quicklinks
}

// GetQuicklinksOk returns a tuple with the Quicklinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetQuicklinksOk() ([]Quicklink, bool) {
	if o == nil || IsNil(o.Quicklinks) {
		return nil, false
	}
	return o.Quicklinks, true
}

// HasQuicklinks returns a boolean if a field has been set.
func (o *DatasourceSchema) HasQuicklinks() bool {
	if o != nil && !IsNil(o.Quicklinks) {
		return true
	}

	return false
}

// SetQuicklinks gets a reference to the given []Quicklink and assigns it to the Quicklinks field.
func (o *DatasourceSchema) SetQuicklinks(v []Quicklink) {
	o.Quicklinks = v
}

// GetRenderConfigPreset returns the RenderConfigPreset field value if set, zero value otherwise.
func (o *DatasourceSchema) GetRenderConfigPreset() string {
	if o == nil || IsNil(o.RenderConfigPreset) {
		var ret string
		return ret
	}
	return *o.RenderConfigPreset
}

// GetRenderConfigPresetOk returns a tuple with the RenderConfigPreset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetRenderConfigPresetOk() (*string, bool) {
	if o == nil || IsNil(o.RenderConfigPreset) {
		return nil, false
	}
	return o.RenderConfigPreset, true
}

// HasRenderConfigPreset returns a boolean if a field has been set.
func (o *DatasourceSchema) HasRenderConfigPreset() bool {
	if o != nil && !IsNil(o.RenderConfigPreset) {
		return true
	}

	return false
}

// SetRenderConfigPreset gets a reference to the given string and assigns it to the RenderConfigPreset field.
func (o *DatasourceSchema) SetRenderConfigPreset(v string) {
	o.RenderConfigPreset = &v
}

// GetAliases returns the Aliases field value if set, zero value otherwise.
func (o *DatasourceSchema) GetAliases() []string {
	if o == nil || IsNil(o.Aliases) {
		var ret []string
		return ret
	}
	return o.Aliases
}

// GetAliasesOk returns a tuple with the Aliases field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetAliasesOk() ([]string, bool) {
	if o == nil || IsNil(o.Aliases) {
		return nil, false
	}
	return o.Aliases, true
}

// HasAliases returns a boolean if a field has been set.
func (o *DatasourceSchema) HasAliases() bool {
	if o != nil && !IsNil(o.Aliases) {
		return true
	}

	return false
}

// SetAliases gets a reference to the given []string and assigns it to the Aliases field.
func (o *DatasourceSchema) SetAliases(v []string) {
	o.Aliases = v
}

// GetIsOnPrem returns the IsOnPrem field value if set, zero value otherwise.
func (o *DatasourceSchema) GetIsOnPrem() bool {
	if o == nil || IsNil(o.IsOnPrem) {
		var ret bool
		return ret
	}
	return *o.IsOnPrem
}

// GetIsOnPremOk returns a tuple with the IsOnPrem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetIsOnPremOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOnPrem) {
		return nil, false
	}
	return o.IsOnPrem, true
}

// HasIsOnPrem returns a boolean if a field has been set.
func (o *DatasourceSchema) HasIsOnPrem() bool {
	if o != nil && !IsNil(o.IsOnPrem) {
		return true
	}

	return false
}

// SetIsOnPrem gets a reference to the given bool and assigns it to the IsOnPrem field.
func (o *DatasourceSchema) SetIsOnPrem(v bool) {
	o.IsOnPrem = &v
}

// GetTrustUrlRegexForViewActivity returns the TrustUrlRegexForViewActivity field value if set, zero value otherwise.
func (o *DatasourceSchema) GetTrustUrlRegexForViewActivity() bool {
	if o == nil || IsNil(o.TrustUrlRegexForViewActivity) {
		var ret bool
		return ret
	}
	return *o.TrustUrlRegexForViewActivity
}

// GetTrustUrlRegexForViewActivityOk returns a tuple with the TrustUrlRegexForViewActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetTrustUrlRegexForViewActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.TrustUrlRegexForViewActivity) {
		return nil, false
	}
	return o.TrustUrlRegexForViewActivity, true
}

// HasTrustUrlRegexForViewActivity returns a boolean if a field has been set.
func (o *DatasourceSchema) HasTrustUrlRegexForViewActivity() bool {
	if o != nil && !IsNil(o.TrustUrlRegexForViewActivity) {
		return true
	}

	return false
}

// SetTrustUrlRegexForViewActivity gets a reference to the given bool and assigns it to the TrustUrlRegexForViewActivity field.
func (o *DatasourceSchema) SetTrustUrlRegexForViewActivity(v bool) {
	o.TrustUrlRegexForViewActivity = &v
}

// GetIncludeUtmSource returns the IncludeUtmSource field value if set, zero value otherwise.
func (o *DatasourceSchema) GetIncludeUtmSource() bool {
	if o == nil || IsNil(o.IncludeUtmSource) {
		var ret bool
		return ret
	}
	return *o.IncludeUtmSource
}

// GetIncludeUtmSourceOk returns a tuple with the IncludeUtmSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetIncludeUtmSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeUtmSource) {
		return nil, false
	}
	return o.IncludeUtmSource, true
}

// HasIncludeUtmSource returns a boolean if a field has been set.
func (o *DatasourceSchema) HasIncludeUtmSource() bool {
	if o != nil && !IsNil(o.IncludeUtmSource) {
		return true
	}

	return false
}

// SetIncludeUtmSource gets a reference to the given bool and assigns it to the IncludeUtmSource field.
func (o *DatasourceSchema) SetIncludeUtmSource(v bool) {
	o.IncludeUtmSource = &v
}

// GetDatasourceName returns the DatasourceName field value if set, zero value otherwise.
func (o *DatasourceSchema) GetDatasourceName() string {
	if o == nil || IsNil(o.DatasourceName) {
		var ret string
		return ret
	}
	return *o.DatasourceName
}

// GetDatasourceNameOk returns a tuple with the DatasourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetDatasourceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceName) {
		return nil, false
	}
	return o.DatasourceName, true
}

// HasDatasourceName returns a boolean if a field has been set.
func (o *DatasourceSchema) HasDatasourceName() bool {
	if o != nil && !IsNil(o.DatasourceName) {
		return true
	}

	return false
}

// SetDatasourceName gets a reference to the given string and assigns it to the DatasourceName field.
func (o *DatasourceSchema) SetDatasourceName(v string) {
	o.DatasourceName = &v
}

// GetInstanceOnlyName returns the InstanceOnlyName field value if set, zero value otherwise.
func (o *DatasourceSchema) GetInstanceOnlyName() string {
	if o == nil || IsNil(o.InstanceOnlyName) {
		var ret string
		return ret
	}
	return *o.InstanceOnlyName
}

// GetInstanceOnlyNameOk returns a tuple with the InstanceOnlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetInstanceOnlyNameOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceOnlyName) {
		return nil, false
	}
	return o.InstanceOnlyName, true
}

// HasInstanceOnlyName returns a boolean if a field has been set.
func (o *DatasourceSchema) HasInstanceOnlyName() bool {
	if o != nil && !IsNil(o.InstanceOnlyName) {
		return true
	}

	return false
}

// SetInstanceOnlyName gets a reference to the given string and assigns it to the InstanceOnlyName field.
func (o *DatasourceSchema) SetInstanceOnlyName(v string) {
	o.InstanceOnlyName = &v
}

// GetInstanceDescription returns the InstanceDescription field value if set, zero value otherwise.
func (o *DatasourceSchema) GetInstanceDescription() string {
	if o == nil || IsNil(o.InstanceDescription) {
		var ret string
		return ret
	}
	return *o.InstanceDescription
}

// GetInstanceDescriptionOk returns a tuple with the InstanceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetInstanceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceDescription) {
		return nil, false
	}
	return o.InstanceDescription, true
}

// HasInstanceDescription returns a boolean if a field has been set.
func (o *DatasourceSchema) HasInstanceDescription() bool {
	if o != nil && !IsNil(o.InstanceDescription) {
		return true
	}

	return false
}

// SetInstanceDescription gets a reference to the given string and assigns it to the InstanceDescription field.
func (o *DatasourceSchema) SetInstanceDescription(v string) {
	o.InstanceDescription = &v
}

// GetCalendarEnabled returns the CalendarEnabled field value if set, zero value otherwise.
func (o *DatasourceSchema) GetCalendarEnabled() bool {
	if o == nil || IsNil(o.CalendarEnabled) {
		var ret bool
		return ret
	}
	return *o.CalendarEnabled
}

// GetCalendarEnabledOk returns a tuple with the CalendarEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetCalendarEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CalendarEnabled) {
		return nil, false
	}
	return o.CalendarEnabled, true
}

// HasCalendarEnabled returns a boolean if a field has been set.
func (o *DatasourceSchema) HasCalendarEnabled() bool {
	if o != nil && !IsNil(o.CalendarEnabled) {
		return true
	}

	return false
}

// SetCalendarEnabled gets a reference to the given bool and assigns it to the CalendarEnabled field.
func (o *DatasourceSchema) SetCalendarEnabled(v bool) {
	o.CalendarEnabled = &v
}

// GetCollectBodyInActivity returns the CollectBodyInActivity field value if set, zero value otherwise.
func (o *DatasourceSchema) GetCollectBodyInActivity() bool {
	if o == nil || IsNil(o.CollectBodyInActivity) {
		var ret bool
		return ret
	}
	return *o.CollectBodyInActivity
}

// GetCollectBodyInActivityOk returns a tuple with the CollectBodyInActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetCollectBodyInActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.CollectBodyInActivity) {
		return nil, false
	}
	return o.CollectBodyInActivity, true
}

// HasCollectBodyInActivity returns a boolean if a field has been set.
func (o *DatasourceSchema) HasCollectBodyInActivity() bool {
	if o != nil && !IsNil(o.CollectBodyInActivity) {
		return true
	}

	return false
}

// SetCollectBodyInActivity gets a reference to the given bool and assigns it to the CollectBodyInActivity field.
func (o *DatasourceSchema) SetCollectBodyInActivity(v bool) {
	o.CollectBodyInActivity = &v
}

// GetCrawlHomeUrl returns the CrawlHomeUrl field value if set, zero value otherwise.
func (o *DatasourceSchema) GetCrawlHomeUrl() bool {
	if o == nil || IsNil(o.CrawlHomeUrl) {
		var ret bool
		return ret
	}
	return *o.CrawlHomeUrl
}

// GetCrawlHomeUrlOk returns a tuple with the CrawlHomeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetCrawlHomeUrlOk() (*bool, bool) {
	if o == nil || IsNil(o.CrawlHomeUrl) {
		return nil, false
	}
	return o.CrawlHomeUrl, true
}

// HasCrawlHomeUrl returns a boolean if a field has been set.
func (o *DatasourceSchema) HasCrawlHomeUrl() bool {
	if o != nil && !IsNil(o.CrawlHomeUrl) {
		return true
	}

	return false
}

// SetCrawlHomeUrl gets a reference to the given bool and assigns it to the CrawlHomeUrl field.
func (o *DatasourceSchema) SetCrawlHomeUrl(v bool) {
	o.CrawlHomeUrl = &v
}

// GetDatasourceDescription returns the DatasourceDescription field value if set, zero value otherwise.
func (o *DatasourceSchema) GetDatasourceDescription() string {
	if o == nil || IsNil(o.DatasourceDescription) {
		var ret string
		return ret
	}
	return *o.DatasourceDescription
}

// GetDatasourceDescriptionOk returns a tuple with the DatasourceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetDatasourceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceDescription) {
		return nil, false
	}
	return o.DatasourceDescription, true
}

// HasDatasourceDescription returns a boolean if a field has been set.
func (o *DatasourceSchema) HasDatasourceDescription() bool {
	if o != nil && !IsNil(o.DatasourceDescription) {
		return true
	}

	return false
}

// SetDatasourceDescription gets a reference to the given string and assigns it to the DatasourceDescription field.
func (o *DatasourceSchema) SetDatasourceDescription(v string) {
	o.DatasourceDescription = &v
}

// GetDatasourceDisplayName returns the DatasourceDisplayName field value if set, zero value otherwise.
func (o *DatasourceSchema) GetDatasourceDisplayName() string {
	if o == nil || IsNil(o.DatasourceDisplayName) {
		var ret string
		return ret
	}
	return *o.DatasourceDisplayName
}

// GetDatasourceDisplayNameOk returns a tuple with the DatasourceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetDatasourceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceDisplayName) {
		return nil, false
	}
	return o.DatasourceDisplayName, true
}

// HasDatasourceDisplayName returns a boolean if a field has been set.
func (o *DatasourceSchema) HasDatasourceDisplayName() bool {
	if o != nil && !IsNil(o.DatasourceDisplayName) {
		return true
	}

	return false
}

// SetDatasourceDisplayName gets a reference to the given string and assigns it to the DatasourceDisplayName field.
func (o *DatasourceSchema) SetDatasourceDisplayName(v string) {
	o.DatasourceDisplayName = &v
}

// GetFederatedGoogleOAuth returns the FederatedGoogleOAuth field value if set, zero value otherwise.
func (o *DatasourceSchema) GetFederatedGoogleOAuth() OAuthConfig {
	if o == nil || IsNil(o.FederatedGoogleOAuth) {
		var ret OAuthConfig
		return ret
	}
	return *o.FederatedGoogleOAuth
}

// GetFederatedGoogleOAuthOk returns a tuple with the FederatedGoogleOAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetFederatedGoogleOAuthOk() (*OAuthConfig, bool) {
	if o == nil || IsNil(o.FederatedGoogleOAuth) {
		return nil, false
	}
	return o.FederatedGoogleOAuth, true
}

// HasFederatedGoogleOAuth returns a boolean if a field has been set.
func (o *DatasourceSchema) HasFederatedGoogleOAuth() bool {
	if o != nil && !IsNil(o.FederatedGoogleOAuth) {
		return true
	}

	return false
}

// SetFederatedGoogleOAuth gets a reference to the given OAuthConfig and assigns it to the FederatedGoogleOAuth field.
func (o *DatasourceSchema) SetFederatedGoogleOAuth(v OAuthConfig) {
	o.FederatedGoogleOAuth = &v
}

// GetIsEligibleForNativeReplacement returns the IsEligibleForNativeReplacement field value if set, zero value otherwise.
func (o *DatasourceSchema) GetIsEligibleForNativeReplacement() bool {
	if o == nil || IsNil(o.IsEligibleForNativeReplacement) {
		var ret bool
		return ret
	}
	return *o.IsEligibleForNativeReplacement
}

// GetIsEligibleForNativeReplacementOk returns a tuple with the IsEligibleForNativeReplacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetIsEligibleForNativeReplacementOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEligibleForNativeReplacement) {
		return nil, false
	}
	return o.IsEligibleForNativeReplacement, true
}

// HasIsEligibleForNativeReplacement returns a boolean if a field has been set.
func (o *DatasourceSchema) HasIsEligibleForNativeReplacement() bool {
	if o != nil && !IsNil(o.IsEligibleForNativeReplacement) {
		return true
	}

	return false
}

// SetIsEligibleForNativeReplacement gets a reference to the given bool and assigns it to the IsEligibleForNativeReplacement field.
func (o *DatasourceSchema) SetIsEligibleForNativeReplacement(v bool) {
	o.IsEligibleForNativeReplacement = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *DatasourceSchema) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *DatasourceSchema) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *DatasourceSchema) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsNativeReplacementAutoEnabled returns the IsNativeReplacementAutoEnabled field value if set, zero value otherwise.
func (o *DatasourceSchema) GetIsNativeReplacementAutoEnabled() bool {
	if o == nil || IsNil(o.IsNativeReplacementAutoEnabled) {
		var ret bool
		return ret
	}
	return *o.IsNativeReplacementAutoEnabled
}

// GetIsNativeReplacementAutoEnabledOk returns a tuple with the IsNativeReplacementAutoEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetIsNativeReplacementAutoEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNativeReplacementAutoEnabled) {
		return nil, false
	}
	return o.IsNativeReplacementAutoEnabled, true
}

// HasIsNativeReplacementAutoEnabled returns a boolean if a field has been set.
func (o *DatasourceSchema) HasIsNativeReplacementAutoEnabled() bool {
	if o != nil && !IsNil(o.IsNativeReplacementAutoEnabled) {
		return true
	}

	return false
}

// SetIsNativeReplacementAutoEnabled gets a reference to the given bool and assigns it to the IsNativeReplacementAutoEnabled field.
func (o *DatasourceSchema) SetIsNativeReplacementAutoEnabled(v bool) {
	o.IsNativeReplacementAutoEnabled = &v
}

// GetIsSearchable returns the IsSearchable field value if set, zero value otherwise.
func (o *DatasourceSchema) GetIsSearchable() bool {
	if o == nil || IsNil(o.IsSearchable) {
		var ret bool
		return ret
	}
	return *o.IsSearchable
}

// GetIsSearchableOk returns a tuple with the IsSearchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetIsSearchableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSearchable) {
		return nil, false
	}
	return o.IsSearchable, true
}

// HasIsSearchable returns a boolean if a field has been set.
func (o *DatasourceSchema) HasIsSearchable() bool {
	if o != nil && !IsNil(o.IsSearchable) {
		return true
	}

	return false
}

// SetIsSearchable gets a reference to the given bool and assigns it to the IsSearchable field.
func (o *DatasourceSchema) SetIsSearchable(v bool) {
	o.IsSearchable = &v
}

// GetMentionsEnabled returns the MentionsEnabled field value if set, zero value otherwise.
func (o *DatasourceSchema) GetMentionsEnabled() bool {
	if o == nil || IsNil(o.MentionsEnabled) {
		var ret bool
		return ret
	}
	return *o.MentionsEnabled
}

// GetMentionsEnabledOk returns a tuple with the MentionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetMentionsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MentionsEnabled) {
		return nil, false
	}
	return o.MentionsEnabled, true
}

// HasMentionsEnabled returns a boolean if a field has been set.
func (o *DatasourceSchema) HasMentionsEnabled() bool {
	if o != nil && !IsNil(o.MentionsEnabled) {
		return true
	}

	return false
}

// SetMentionsEnabled gets a reference to the given bool and assigns it to the MentionsEnabled field.
func (o *DatasourceSchema) SetMentionsEnabled(v bool) {
	o.MentionsEnabled = &v
}

// GetPrivateAuth returns the PrivateAuth field value if set, zero value otherwise.
func (o *DatasourceSchema) GetPrivateAuth() PrivateAuth {
	if o == nil || IsNil(o.PrivateAuth) {
		var ret PrivateAuth
		return ret
	}
	return *o.PrivateAuth
}

// GetPrivateAuthOk returns a tuple with the PrivateAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetPrivateAuthOk() (*PrivateAuth, bool) {
	if o == nil || IsNil(o.PrivateAuth) {
		return nil, false
	}
	return o.PrivateAuth, true
}

// HasPrivateAuth returns a boolean if a field has been set.
func (o *DatasourceSchema) HasPrivateAuth() bool {
	if o != nil && !IsNil(o.PrivateAuth) {
		return true
	}

	return false
}

// SetPrivateAuth gets a reference to the given PrivateAuth and assigns it to the PrivateAuth field.
func (o *DatasourceSchema) SetPrivateAuth(v PrivateAuth) {
	o.PrivateAuth = &v
}

// GetSearchInputSelectors returns the SearchInputSelectors field value if set, zero value otherwise.
func (o *DatasourceSchema) GetSearchInputSelectors() []string {
	if o == nil || IsNil(o.SearchInputSelectors) {
		var ret []string
		return ret
	}
	return o.SearchInputSelectors
}

// GetSearchInputSelectorsOk returns a tuple with the SearchInputSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetSearchInputSelectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchInputSelectors) {
		return nil, false
	}
	return o.SearchInputSelectors, true
}

// HasSearchInputSelectors returns a boolean if a field has been set.
func (o *DatasourceSchema) HasSearchInputSelectors() bool {
	if o != nil && !IsNil(o.SearchInputSelectors) {
		return true
	}

	return false
}

// SetSearchInputSelectors gets a reference to the given []string and assigns it to the SearchInputSelectors field.
func (o *DatasourceSchema) SetSearchInputSelectors(v []string) {
	o.SearchInputSelectors = v
}

// GetSupportsCalendar returns the SupportsCalendar field value if set, zero value otherwise.
func (o *DatasourceSchema) GetSupportsCalendar() bool {
	if o == nil || IsNil(o.SupportsCalendar) {
		var ret bool
		return ret
	}
	return *o.SupportsCalendar
}

// GetSupportsCalendarOk returns a tuple with the SupportsCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetSupportsCalendarOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsCalendar) {
		return nil, false
	}
	return o.SupportsCalendar, true
}

// HasSupportsCalendar returns a boolean if a field has been set.
func (o *DatasourceSchema) HasSupportsCalendar() bool {
	if o != nil && !IsNil(o.SupportsCalendar) {
		return true
	}

	return false
}

// SetSupportsCalendar gets a reference to the given bool and assigns it to the SupportsCalendar field.
func (o *DatasourceSchema) SetSupportsCalendar(v bool) {
	o.SupportsCalendar = &v
}

// GetUrlRegexVersion returns the UrlRegexVersion field value if set, zero value otherwise.
func (o *DatasourceSchema) GetUrlRegexVersion() int32 {
	if o == nil || IsNil(o.UrlRegexVersion) {
		var ret int32
		return ret
	}
	return *o.UrlRegexVersion
}

// GetUrlRegexVersionOk returns a tuple with the UrlRegexVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchema) GetUrlRegexVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.UrlRegexVersion) {
		return nil, false
	}
	return o.UrlRegexVersion, true
}

// HasUrlRegexVersion returns a boolean if a field has been set.
func (o *DatasourceSchema) HasUrlRegexVersion() bool {
	if o != nil && !IsNil(o.UrlRegexVersion) {
		return true
	}

	return false
}

// SetUrlRegexVersion gets a reference to the given int32 and assigns it to the UrlRegexVersion field.
func (o *DatasourceSchema) SetUrlRegexVersion(v int32) {
	o.UrlRegexVersion = &v
}

func (o DatasourceSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasourceSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.DatasourceCategory) {
		toSerialize["datasourceCategory"] = o.DatasourceCategory
	}
	if !IsNil(o.UrlRegex) {
		toSerialize["urlRegex"] = o.UrlRegex
	}
	if !IsNil(o.IconUrl) {
		toSerialize["iconUrl"] = o.IconUrl
	}
	if !IsNil(o.ObjectDefinitions) {
		toSerialize["objectDefinitions"] = o.ObjectDefinitions
	}
	if !IsNil(o.SuggestionText) {
		toSerialize["suggestionText"] = o.SuggestionText
	}
	if !IsNil(o.HomeUrl) {
		toSerialize["homeUrl"] = o.HomeUrl
	}
	if !IsNil(o.CrawlerSeedUrls) {
		toSerialize["crawlerSeedUrls"] = o.CrawlerSeedUrls
	}
	if !IsNil(o.IconDarkUrl) {
		toSerialize["iconDarkUrl"] = o.IconDarkUrl
	}
	if !IsNil(o.HideBuiltInFacets) {
		toSerialize["hideBuiltInFacets"] = o.HideBuiltInFacets
	}
	if !IsNil(o.CanonicalizingURLRegex) {
		toSerialize["canonicalizingURLRegex"] = o.CanonicalizingURLRegex
	}
	if !IsNil(o.CanonicalizingTitleRegex) {
		toSerialize["canonicalizingTitleRegex"] = o.CanonicalizingTitleRegex
	}
	if !IsNil(o.RedlistTitleRegex) {
		toSerialize["redlistTitleRegex"] = o.RedlistTitleRegex
	}
	if !IsNil(o.ConnectorType) {
		toSerialize["connectorType"] = o.ConnectorType
	}
	if !IsNil(o.Quicklinks) {
		toSerialize["quicklinks"] = o.Quicklinks
	}
	if !IsNil(o.RenderConfigPreset) {
		toSerialize["renderConfigPreset"] = o.RenderConfigPreset
	}
	if !IsNil(o.Aliases) {
		toSerialize["aliases"] = o.Aliases
	}
	if !IsNil(o.IsOnPrem) {
		toSerialize["isOnPrem"] = o.IsOnPrem
	}
	if !IsNil(o.TrustUrlRegexForViewActivity) {
		toSerialize["trustUrlRegexForViewActivity"] = o.TrustUrlRegexForViewActivity
	}
	if !IsNil(o.IncludeUtmSource) {
		toSerialize["includeUtmSource"] = o.IncludeUtmSource
	}
	if !IsNil(o.DatasourceName) {
		toSerialize["datasourceName"] = o.DatasourceName
	}
	if !IsNil(o.InstanceOnlyName) {
		toSerialize["instanceOnlyName"] = o.InstanceOnlyName
	}
	if !IsNil(o.InstanceDescription) {
		toSerialize["instanceDescription"] = o.InstanceDescription
	}
	if !IsNil(o.CalendarEnabled) {
		toSerialize["calendarEnabled"] = o.CalendarEnabled
	}
	if !IsNil(o.CollectBodyInActivity) {
		toSerialize["collectBodyInActivity"] = o.CollectBodyInActivity
	}
	if !IsNil(o.CrawlHomeUrl) {
		toSerialize["crawlHomeUrl"] = o.CrawlHomeUrl
	}
	if !IsNil(o.DatasourceDescription) {
		toSerialize["datasourceDescription"] = o.DatasourceDescription
	}
	if !IsNil(o.DatasourceDisplayName) {
		toSerialize["datasourceDisplayName"] = o.DatasourceDisplayName
	}
	if !IsNil(o.FederatedGoogleOAuth) {
		toSerialize["federatedGoogleOAuth"] = o.FederatedGoogleOAuth
	}
	if !IsNil(o.IsEligibleForNativeReplacement) {
		toSerialize["isEligibleForNativeReplacement"] = o.IsEligibleForNativeReplacement
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.IsNativeReplacementAutoEnabled) {
		toSerialize["isNativeReplacementAutoEnabled"] = o.IsNativeReplacementAutoEnabled
	}
	if !IsNil(o.IsSearchable) {
		toSerialize["isSearchable"] = o.IsSearchable
	}
	if !IsNil(o.MentionsEnabled) {
		toSerialize["mentionsEnabled"] = o.MentionsEnabled
	}
	if !IsNil(o.PrivateAuth) {
		toSerialize["privateAuth"] = o.PrivateAuth
	}
	if !IsNil(o.SearchInputSelectors) {
		toSerialize["searchInputSelectors"] = o.SearchInputSelectors
	}
	if !IsNil(o.SupportsCalendar) {
		toSerialize["supportsCalendar"] = o.SupportsCalendar
	}
	if !IsNil(o.UrlRegexVersion) {
		toSerialize["urlRegexVersion"] = o.UrlRegexVersion
	}
	return toSerialize, nil
}

type NullableDatasourceSchema struct {
	value *DatasourceSchema
	isSet bool
}

func (v NullableDatasourceSchema) Get() *DatasourceSchema {
	return v.value
}

func (v *NullableDatasourceSchema) Set(val *DatasourceSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceSchema(val *DatasourceSchema) *NullableDatasourceSchema {
	return &NullableDatasourceSchema{value: val, isSet: true}
}

func (v NullableDatasourceSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


