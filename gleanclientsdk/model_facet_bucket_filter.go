/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the FacetBucketFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FacetBucketFilter{}

// FacetBucketFilter struct for FacetBucketFilter
type FacetBucketFilter struct {
	// The facet whose buckets should be filtered.
	Facet *string `json:"facet,omitempty"`
	// The per-term prefix that facet buckets should be filtered on.
	Prefix *string `json:"prefix,omitempty"`
}

// NewFacetBucketFilter instantiates a new FacetBucketFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacetBucketFilter() *FacetBucketFilter {
	this := FacetBucketFilter{}
	return &this
}

// NewFacetBucketFilterWithDefaults instantiates a new FacetBucketFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacetBucketFilterWithDefaults() *FacetBucketFilter {
	this := FacetBucketFilter{}
	return &this
}

// GetFacet returns the Facet field value if set, zero value otherwise.
func (o *FacetBucketFilter) GetFacet() string {
	if o == nil || IsNil(o.Facet) {
		var ret string
		return ret
	}
	return *o.Facet
}

// GetFacetOk returns a tuple with the Facet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetBucketFilter) GetFacetOk() (*string, bool) {
	if o == nil || IsNil(o.Facet) {
		return nil, false
	}
	return o.Facet, true
}

// HasFacet returns a boolean if a field has been set.
func (o *FacetBucketFilter) HasFacet() bool {
	if o != nil && !IsNil(o.Facet) {
		return true
	}

	return false
}

// SetFacet gets a reference to the given string and assigns it to the Facet field.
func (o *FacetBucketFilter) SetFacet(v string) {
	o.Facet = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *FacetBucketFilter) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetBucketFilter) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *FacetBucketFilter) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *FacetBucketFilter) SetPrefix(v string) {
	o.Prefix = &v
}

func (o FacetBucketFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FacetBucketFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Facet) {
		toSerialize["facet"] = o.Facet
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	return toSerialize, nil
}

type NullableFacetBucketFilter struct {
	value *FacetBucketFilter
	isSet bool
}

func (v NullableFacetBucketFilter) Get() *FacetBucketFilter {
	return v.value
}

func (v *NullableFacetBucketFilter) Set(val *FacetBucketFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFacetBucketFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFacetBucketFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacetBucketFilter(val *FacetBucketFilter) *NullableFacetBucketFilter {
	return &NullableFacetBucketFilter{value: val, isSet: true}
}

func (v NullableFacetBucketFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacetBucketFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


