/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CollectionPinMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionPinMetadata{}

// CollectionPinMetadata struct for CollectionPinMetadata
type CollectionPinMetadata struct {
	// The id of the collection.
	Id int32 `json:"id"`
	Target CollectionPinTarget `json:"target"`
}

// NewCollectionPinMetadata instantiates a new CollectionPinMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionPinMetadata(id int32, target CollectionPinTarget) *CollectionPinMetadata {
	this := CollectionPinMetadata{}
	this.Id = id
	this.Target = target
	return &this
}

// NewCollectionPinMetadataWithDefaults instantiates a new CollectionPinMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionPinMetadataWithDefaults() *CollectionPinMetadata {
	this := CollectionPinMetadata{}
	return &this
}

// GetId returns the Id field value
func (o *CollectionPinMetadata) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CollectionPinMetadata) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CollectionPinMetadata) SetId(v int32) {
	o.Id = v
}

// GetTarget returns the Target field value
func (o *CollectionPinMetadata) GetTarget() CollectionPinTarget {
	if o == nil {
		var ret CollectionPinTarget
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *CollectionPinMetadata) GetTargetOk() (*CollectionPinTarget, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Target, true
}

// SetTarget sets field value
func (o *CollectionPinMetadata) SetTarget(v CollectionPinTarget) {
	o.Target = v
}

func (o CollectionPinMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionPinMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["target"] = o.Target
	return toSerialize, nil
}

type NullableCollectionPinMetadata struct {
	value *CollectionPinMetadata
	isSet bool
}

func (v NullableCollectionPinMetadata) Get() *CollectionPinMetadata {
	return v.value
}

func (v *NullableCollectionPinMetadata) Set(val *CollectionPinMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionPinMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionPinMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionPinMetadata(val *CollectionPinMetadata) *NullableCollectionPinMetadata {
	return &NullableCollectionPinMetadata{value: val, isSet: true}
}

func (v NullableCollectionPinMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionPinMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


