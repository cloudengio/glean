/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SeenFeedbackInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SeenFeedbackInfo{}

// SeenFeedbackInfo struct for SeenFeedbackInfo
type SeenFeedbackInfo struct {
	// The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction.
	IsExplicit *bool `json:"isExplicit,omitempty"`
}

// NewSeenFeedbackInfo instantiates a new SeenFeedbackInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeenFeedbackInfo() *SeenFeedbackInfo {
	this := SeenFeedbackInfo{}
	return &this
}

// NewSeenFeedbackInfoWithDefaults instantiates a new SeenFeedbackInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeenFeedbackInfoWithDefaults() *SeenFeedbackInfo {
	this := SeenFeedbackInfo{}
	return &this
}

// GetIsExplicit returns the IsExplicit field value if set, zero value otherwise.
func (o *SeenFeedbackInfo) GetIsExplicit() bool {
	if o == nil || IsNil(o.IsExplicit) {
		var ret bool
		return ret
	}
	return *o.IsExplicit
}

// GetIsExplicitOk returns a tuple with the IsExplicit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeenFeedbackInfo) GetIsExplicitOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExplicit) {
		return nil, false
	}
	return o.IsExplicit, true
}

// HasIsExplicit returns a boolean if a field has been set.
func (o *SeenFeedbackInfo) HasIsExplicit() bool {
	if o != nil && !IsNil(o.IsExplicit) {
		return true
	}

	return false
}

// SetIsExplicit gets a reference to the given bool and assigns it to the IsExplicit field.
func (o *SeenFeedbackInfo) SetIsExplicit(v bool) {
	o.IsExplicit = &v
}

func (o SeenFeedbackInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SeenFeedbackInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsExplicit) {
		toSerialize["isExplicit"] = o.IsExplicit
	}
	return toSerialize, nil
}

type NullableSeenFeedbackInfo struct {
	value *SeenFeedbackInfo
	isSet bool
}

func (v NullableSeenFeedbackInfo) Get() *SeenFeedbackInfo {
	return v.value
}

func (v *NullableSeenFeedbackInfo) Set(val *SeenFeedbackInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSeenFeedbackInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSeenFeedbackInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeenFeedbackInfo(val *SeenFeedbackInfo) *NullableSeenFeedbackInfo {
	return &NullableSeenFeedbackInfo{value: val, isSet: true}
}

func (v NullableSeenFeedbackInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeenFeedbackInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


