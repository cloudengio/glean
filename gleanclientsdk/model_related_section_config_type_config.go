/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// RelatedSectionConfigTypeConfig - struct for RelatedSectionConfigTypeConfig
type RelatedSectionConfigTypeConfig struct {
	RelatedDocumentsConfig *RelatedDocumentsConfig
	TagsConfig *TagsConfig
	ThreadConfig *ThreadConfig
}

// RelatedDocumentsConfigAsRelatedSectionConfigTypeConfig is a convenience function that returns RelatedDocumentsConfig wrapped in RelatedSectionConfigTypeConfig
func RelatedDocumentsConfigAsRelatedSectionConfigTypeConfig(v *RelatedDocumentsConfig) RelatedSectionConfigTypeConfig {
	return RelatedSectionConfigTypeConfig{
		RelatedDocumentsConfig: v,
	}
}

// TagsConfigAsRelatedSectionConfigTypeConfig is a convenience function that returns TagsConfig wrapped in RelatedSectionConfigTypeConfig
func TagsConfigAsRelatedSectionConfigTypeConfig(v *TagsConfig) RelatedSectionConfigTypeConfig {
	return RelatedSectionConfigTypeConfig{
		TagsConfig: v,
	}
}

// ThreadConfigAsRelatedSectionConfigTypeConfig is a convenience function that returns ThreadConfig wrapped in RelatedSectionConfigTypeConfig
func ThreadConfigAsRelatedSectionConfigTypeConfig(v *ThreadConfig) RelatedSectionConfigTypeConfig {
	return RelatedSectionConfigTypeConfig{
		ThreadConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RelatedSectionConfigTypeConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RelatedDocumentsConfig
	err = newStrictDecoder(data).Decode(&dst.RelatedDocumentsConfig)
	if err == nil {
		jsonRelatedDocumentsConfig, _ := json.Marshal(dst.RelatedDocumentsConfig)
		if string(jsonRelatedDocumentsConfig) == "{}" { // empty struct
			dst.RelatedDocumentsConfig = nil
		} else {
			match++
		}
	} else {
		dst.RelatedDocumentsConfig = nil
	}

	// try to unmarshal data into TagsConfig
	err = newStrictDecoder(data).Decode(&dst.TagsConfig)
	if err == nil {
		jsonTagsConfig, _ := json.Marshal(dst.TagsConfig)
		if string(jsonTagsConfig) == "{}" { // empty struct
			dst.TagsConfig = nil
		} else {
			match++
		}
	} else {
		dst.TagsConfig = nil
	}

	// try to unmarshal data into ThreadConfig
	err = newStrictDecoder(data).Decode(&dst.ThreadConfig)
	if err == nil {
		jsonThreadConfig, _ := json.Marshal(dst.ThreadConfig)
		if string(jsonThreadConfig) == "{}" { // empty struct
			dst.ThreadConfig = nil
		} else {
			match++
		}
	} else {
		dst.ThreadConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RelatedDocumentsConfig = nil
		dst.TagsConfig = nil
		dst.ThreadConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RelatedSectionConfigTypeConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RelatedSectionConfigTypeConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RelatedSectionConfigTypeConfig) MarshalJSON() ([]byte, error) {
	if src.RelatedDocumentsConfig != nil {
		return json.Marshal(&src.RelatedDocumentsConfig)
	}

	if src.TagsConfig != nil {
		return json.Marshal(&src.TagsConfig)
	}

	if src.ThreadConfig != nil {
		return json.Marshal(&src.ThreadConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RelatedSectionConfigTypeConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RelatedDocumentsConfig != nil {
		return obj.RelatedDocumentsConfig
	}

	if obj.TagsConfig != nil {
		return obj.TagsConfig
	}

	if obj.ThreadConfig != nil {
		return obj.ThreadConfig
	}

	// all schemas are nil
	return nil
}

type NullableRelatedSectionConfigTypeConfig struct {
	value *RelatedSectionConfigTypeConfig
	isSet bool
}

func (v NullableRelatedSectionConfigTypeConfig) Get() *RelatedSectionConfigTypeConfig {
	return v.value
}

func (v *NullableRelatedSectionConfigTypeConfig) Set(val *RelatedSectionConfigTypeConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedSectionConfigTypeConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedSectionConfigTypeConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedSectionConfigTypeConfig(val *RelatedSectionConfigTypeConfig) *NullableRelatedSectionConfigTypeConfig {
	return &NullableRelatedSectionConfigTypeConfig{value: val, isSet: true}
}

func (v NullableRelatedSectionConfigTypeConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedSectionConfigTypeConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


