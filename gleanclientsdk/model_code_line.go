/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CodeLine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CodeLine{}

// CodeLine struct for CodeLine
type CodeLine struct {
	LineNumber *int32 `json:"lineNumber,omitempty"`
	Content *string `json:"content,omitempty"`
	// Index ranges depicting matched sections of the line
	Ranges []TextRange `json:"ranges,omitempty"`
}

// NewCodeLine instantiates a new CodeLine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCodeLine() *CodeLine {
	this := CodeLine{}
	return &this
}

// NewCodeLineWithDefaults instantiates a new CodeLine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCodeLineWithDefaults() *CodeLine {
	this := CodeLine{}
	return &this
}

// GetLineNumber returns the LineNumber field value if set, zero value otherwise.
func (o *CodeLine) GetLineNumber() int32 {
	if o == nil || IsNil(o.LineNumber) {
		var ret int32
		return ret
	}
	return *o.LineNumber
}

// GetLineNumberOk returns a tuple with the LineNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLine) GetLineNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.LineNumber) {
		return nil, false
	}
	return o.LineNumber, true
}

// HasLineNumber returns a boolean if a field has been set.
func (o *CodeLine) HasLineNumber() bool {
	if o != nil && !IsNil(o.LineNumber) {
		return true
	}

	return false
}

// SetLineNumber gets a reference to the given int32 and assigns it to the LineNumber field.
func (o *CodeLine) SetLineNumber(v int32) {
	o.LineNumber = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *CodeLine) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLine) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *CodeLine) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *CodeLine) SetContent(v string) {
	o.Content = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *CodeLine) GetRanges() []TextRange {
	if o == nil || IsNil(o.Ranges) {
		var ret []TextRange
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CodeLine) GetRangesOk() ([]TextRange, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *CodeLine) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []TextRange and assigns it to the Ranges field.
func (o *CodeLine) SetRanges(v []TextRange) {
	o.Ranges = v
}

func (o CodeLine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CodeLine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LineNumber) {
		toSerialize["lineNumber"] = o.LineNumber
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	return toSerialize, nil
}

type NullableCodeLine struct {
	value *CodeLine
	isSet bool
}

func (v NullableCodeLine) Get() *CodeLine {
	return v.value
}

func (v *NullableCodeLine) Set(val *CodeLine) {
	v.value = val
	v.isSet = true
}

func (v NullableCodeLine) IsSet() bool {
	return v.isSet
}

func (v *NullableCodeLine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCodeLine(val *CodeLine) *NullableCodeLine {
	return &NullableCodeLine{value: val, isSet: true}
}

func (v NullableCodeLine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCodeLine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


