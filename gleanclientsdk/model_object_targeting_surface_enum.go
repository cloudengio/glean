/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// ObjectTargetingSurfaceEnum The set of possible surfaces that an object can be targeted on
type ObjectTargetingSurfaceEnum string

// List of ObjectTargetingSurfaceEnum
const (
	FEED_SURFACE ObjectTargetingSurfaceEnum = "FEED_SURFACE"
	NAV_SURFACE ObjectTargetingSurfaceEnum = "NAV_SURFACE"
	TEAM_SURFACE ObjectTargetingSurfaceEnum = "TEAM_SURFACE"
)

// All allowed values of ObjectTargetingSurfaceEnum enum
var AllowedObjectTargetingSurfaceEnumEnumValues = []ObjectTargetingSurfaceEnum{
	"FEED_SURFACE",
	"NAV_SURFACE",
	"TEAM_SURFACE",
}

func (v *ObjectTargetingSurfaceEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ObjectTargetingSurfaceEnum(value)
	for _, existing := range AllowedObjectTargetingSurfaceEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ObjectTargetingSurfaceEnum", value)
}

// NewObjectTargetingSurfaceEnumFromValue returns a pointer to a valid ObjectTargetingSurfaceEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewObjectTargetingSurfaceEnumFromValue(v string) (*ObjectTargetingSurfaceEnum, error) {
	ev := ObjectTargetingSurfaceEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ObjectTargetingSurfaceEnum: valid values are %v", v, AllowedObjectTargetingSurfaceEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ObjectTargetingSurfaceEnum) IsValid() bool {
	for _, existing := range AllowedObjectTargetingSurfaceEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ObjectTargetingSurfaceEnum value
func (v ObjectTargetingSurfaceEnum) Ptr() *ObjectTargetingSurfaceEnum {
	return &v
}

type NullableObjectTargetingSurfaceEnum struct {
	value *ObjectTargetingSurfaceEnum
	isSet bool
}

func (v NullableObjectTargetingSurfaceEnum) Get() *ObjectTargetingSurfaceEnum {
	return v.value
}

func (v *NullableObjectTargetingSurfaceEnum) Set(val *ObjectTargetingSurfaceEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectTargetingSurfaceEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectTargetingSurfaceEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectTargetingSurfaceEnum(val *ObjectTargetingSurfaceEnum) *NullableObjectTargetingSurfaceEnum {
	return &NullableObjectTargetingSurfaceEnum{value: val, isSet: true}
}

func (v NullableObjectTargetingSurfaceEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectTargetingSurfaceEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

