/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SearchRequestInputDetails type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRequestInputDetails{}

// SearchRequestInputDetails struct for SearchRequestInputDetails
type SearchRequestInputDetails struct {
	// Whether the associated query was at least partially copy-pasted.  If subsequent requests are issued after a copy-pasted query is constructed (e.g. with facet modifications), this bit should continue to be set for those requests.
	HasCopyPaste *bool `json:"hasCopyPaste,omitempty"`
}

// NewSearchRequestInputDetails instantiates a new SearchRequestInputDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRequestInputDetails() *SearchRequestInputDetails {
	this := SearchRequestInputDetails{}
	return &this
}

// NewSearchRequestInputDetailsWithDefaults instantiates a new SearchRequestInputDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRequestInputDetailsWithDefaults() *SearchRequestInputDetails {
	this := SearchRequestInputDetails{}
	return &this
}

// GetHasCopyPaste returns the HasCopyPaste field value if set, zero value otherwise.
func (o *SearchRequestInputDetails) GetHasCopyPaste() bool {
	if o == nil || IsNil(o.HasCopyPaste) {
		var ret bool
		return ret
	}
	return *o.HasCopyPaste
}

// GetHasCopyPasteOk returns a tuple with the HasCopyPaste field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestInputDetails) GetHasCopyPasteOk() (*bool, bool) {
	if o == nil || IsNil(o.HasCopyPaste) {
		return nil, false
	}
	return o.HasCopyPaste, true
}

// HasHasCopyPaste returns a boolean if a field has been set.
func (o *SearchRequestInputDetails) HasHasCopyPaste() bool {
	if o != nil && !IsNil(o.HasCopyPaste) {
		return true
	}

	return false
}

// SetHasCopyPaste gets a reference to the given bool and assigns it to the HasCopyPaste field.
func (o *SearchRequestInputDetails) SetHasCopyPaste(v bool) {
	o.HasCopyPaste = &v
}

func (o SearchRequestInputDetails) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRequestInputDetails) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HasCopyPaste) {
		toSerialize["hasCopyPaste"] = o.HasCopyPaste
	}
	return toSerialize, nil
}

type NullableSearchRequestInputDetails struct {
	value *SearchRequestInputDetails
	isSet bool
}

func (v NullableSearchRequestInputDetails) Get() *SearchRequestInputDetails {
	return v.value
}

func (v *NullableSearchRequestInputDetails) Set(val *SearchRequestInputDetails) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRequestInputDetails) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRequestInputDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRequestInputDetails(val *SearchRequestInputDetails) *NullableSearchRequestInputDetails {
	return &NullableSearchRequestInputDetails{value: val, isSet: true}
}

func (v NullableSearchRequestInputDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRequestInputDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


