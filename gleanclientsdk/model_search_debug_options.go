/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SearchDebugOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchDebugOptions{}

// SearchDebugOptions struct for SearchDebugOptions
type SearchDebugOptions struct {
	// Debug only. When present, uses this parsed query JSON string instead of the query in the request. Requires elevated permission.
	ForceParseQuery *string `json:"forceParseQuery,omitempty"`
}

// NewSearchDebugOptions instantiates a new SearchDebugOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchDebugOptions() *SearchDebugOptions {
	this := SearchDebugOptions{}
	return &this
}

// NewSearchDebugOptionsWithDefaults instantiates a new SearchDebugOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchDebugOptionsWithDefaults() *SearchDebugOptions {
	this := SearchDebugOptions{}
	return &this
}

// GetForceParseQuery returns the ForceParseQuery field value if set, zero value otherwise.
func (o *SearchDebugOptions) GetForceParseQuery() string {
	if o == nil || IsNil(o.ForceParseQuery) {
		var ret string
		return ret
	}
	return *o.ForceParseQuery
}

// GetForceParseQueryOk returns a tuple with the ForceParseQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchDebugOptions) GetForceParseQueryOk() (*string, bool) {
	if o == nil || IsNil(o.ForceParseQuery) {
		return nil, false
	}
	return o.ForceParseQuery, true
}

// HasForceParseQuery returns a boolean if a field has been set.
func (o *SearchDebugOptions) HasForceParseQuery() bool {
	if o != nil && !IsNil(o.ForceParseQuery) {
		return true
	}

	return false
}

// SetForceParseQuery gets a reference to the given string and assigns it to the ForceParseQuery field.
func (o *SearchDebugOptions) SetForceParseQuery(v string) {
	o.ForceParseQuery = &v
}

func (o SearchDebugOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchDebugOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForceParseQuery) {
		toSerialize["forceParseQuery"] = o.ForceParseQuery
	}
	return toSerialize, nil
}

type NullableSearchDebugOptions struct {
	value *SearchDebugOptions
	isSet bool
}

func (v NullableSearchDebugOptions) Get() *SearchDebugOptions {
	return v.value
}

func (v *NullableSearchDebugOptions) Set(val *SearchDebugOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchDebugOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchDebugOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchDebugOptions(val *SearchDebugOptions) *NullableSearchDebugOptions {
	return &NullableSearchDebugOptions{value: val, isSet: true}
}

func (v NullableSearchDebugOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchDebugOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


