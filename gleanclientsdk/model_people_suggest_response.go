/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the PeopleSuggestResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeopleSuggestResponse{}

// PeopleSuggestResponse struct for PeopleSuggestResponse
type PeopleSuggestResponse struct {
	// Information about people suggestions for asked categories.
	Suggestions []PersonSuggestionList `json:"suggestions,omitempty"`
}

// NewPeopleSuggestResponse instantiates a new PeopleSuggestResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeopleSuggestResponse() *PeopleSuggestResponse {
	this := PeopleSuggestResponse{}
	return &this
}

// NewPeopleSuggestResponseWithDefaults instantiates a new PeopleSuggestResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeopleSuggestResponseWithDefaults() *PeopleSuggestResponse {
	this := PeopleSuggestResponse{}
	return &this
}

// GetSuggestions returns the Suggestions field value if set, zero value otherwise.
func (o *PeopleSuggestResponse) GetSuggestions() []PersonSuggestionList {
	if o == nil || IsNil(o.Suggestions) {
		var ret []PersonSuggestionList
		return ret
	}
	return o.Suggestions
}

// GetSuggestionsOk returns a tuple with the Suggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeopleSuggestResponse) GetSuggestionsOk() ([]PersonSuggestionList, bool) {
	if o == nil || IsNil(o.Suggestions) {
		return nil, false
	}
	return o.Suggestions, true
}

// HasSuggestions returns a boolean if a field has been set.
func (o *PeopleSuggestResponse) HasSuggestions() bool {
	if o != nil && !IsNil(o.Suggestions) {
		return true
	}

	return false
}

// SetSuggestions gets a reference to the given []PersonSuggestionList and assigns it to the Suggestions field.
func (o *PeopleSuggestResponse) SetSuggestions(v []PersonSuggestionList) {
	o.Suggestions = v
}

func (o PeopleSuggestResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeopleSuggestResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Suggestions) {
		toSerialize["suggestions"] = o.Suggestions
	}
	return toSerialize, nil
}

type NullablePeopleSuggestResponse struct {
	value *PeopleSuggestResponse
	isSet bool
}

func (v NullablePeopleSuggestResponse) Get() *PeopleSuggestResponse {
	return v.value
}

func (v *NullablePeopleSuggestResponse) Set(val *PeopleSuggestResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePeopleSuggestResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePeopleSuggestResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeopleSuggestResponse(val *PeopleSuggestResponse) *NullablePeopleSuggestResponse {
	return &NullablePeopleSuggestResponse{value: val, isSet: true}
}

func (v NullablePeopleSuggestResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeopleSuggestResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


