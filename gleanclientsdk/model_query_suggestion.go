/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the QuerySuggestion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuerySuggestion{}

// QuerySuggestion struct for QuerySuggestion
type QuerySuggestion struct {
	// A query term missing from the original query on which this suggestion is based
	MissingTerm *string `json:"missingTerm,omitempty"`
	// The query being suggested (e.g. enforcing the missing term from the original query)
	Query string `json:"query"`
	// A user-facing description to display for the suggestion
	Label *string `json:"label,omitempty"`
	// The datasource associated with the suggestion
	Datasource *string `json:"datasource,omitempty"`
	RequestOptions *SearchRequestOptions `json:"requestOptions,omitempty"`
	// The bolded ranges within the query of the QuerySuggestion.
	Ranges []TextRange `json:"ranges,omitempty"`
}

// NewQuerySuggestion instantiates a new QuerySuggestion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuerySuggestion(query string) *QuerySuggestion {
	this := QuerySuggestion{}
	this.Query = query
	return &this
}

// NewQuerySuggestionWithDefaults instantiates a new QuerySuggestion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuerySuggestionWithDefaults() *QuerySuggestion {
	this := QuerySuggestion{}
	return &this
}

// GetMissingTerm returns the MissingTerm field value if set, zero value otherwise.
func (o *QuerySuggestion) GetMissingTerm() string {
	if o == nil || IsNil(o.MissingTerm) {
		var ret string
		return ret
	}
	return *o.MissingTerm
}

// GetMissingTermOk returns a tuple with the MissingTerm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySuggestion) GetMissingTermOk() (*string, bool) {
	if o == nil || IsNil(o.MissingTerm) {
		return nil, false
	}
	return o.MissingTerm, true
}

// HasMissingTerm returns a boolean if a field has been set.
func (o *QuerySuggestion) HasMissingTerm() bool {
	if o != nil && !IsNil(o.MissingTerm) {
		return true
	}

	return false
}

// SetMissingTerm gets a reference to the given string and assigns it to the MissingTerm field.
func (o *QuerySuggestion) SetMissingTerm(v string) {
	o.MissingTerm = &v
}

// GetQuery returns the Query field value
func (o *QuerySuggestion) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *QuerySuggestion) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *QuerySuggestion) SetQuery(v string) {
	o.Query = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *QuerySuggestion) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySuggestion) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *QuerySuggestion) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *QuerySuggestion) SetLabel(v string) {
	o.Label = &v
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *QuerySuggestion) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySuggestion) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *QuerySuggestion) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *QuerySuggestion) SetDatasource(v string) {
	o.Datasource = &v
}

// GetRequestOptions returns the RequestOptions field value if set, zero value otherwise.
func (o *QuerySuggestion) GetRequestOptions() SearchRequestOptions {
	if o == nil || IsNil(o.RequestOptions) {
		var ret SearchRequestOptions
		return ret
	}
	return *o.RequestOptions
}

// GetRequestOptionsOk returns a tuple with the RequestOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySuggestion) GetRequestOptionsOk() (*SearchRequestOptions, bool) {
	if o == nil || IsNil(o.RequestOptions) {
		return nil, false
	}
	return o.RequestOptions, true
}

// HasRequestOptions returns a boolean if a field has been set.
func (o *QuerySuggestion) HasRequestOptions() bool {
	if o != nil && !IsNil(o.RequestOptions) {
		return true
	}

	return false
}

// SetRequestOptions gets a reference to the given SearchRequestOptions and assigns it to the RequestOptions field.
func (o *QuerySuggestion) SetRequestOptions(v SearchRequestOptions) {
	o.RequestOptions = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *QuerySuggestion) GetRanges() []TextRange {
	if o == nil || IsNil(o.Ranges) {
		var ret []TextRange
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuerySuggestion) GetRangesOk() ([]TextRange, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *QuerySuggestion) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []TextRange and assigns it to the Ranges field.
func (o *QuerySuggestion) SetRanges(v []TextRange) {
	o.Ranges = v
}

func (o QuerySuggestion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuerySuggestion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MissingTerm) {
		toSerialize["missingTerm"] = o.MissingTerm
	}
	toSerialize["query"] = o.Query
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	if !IsNil(o.RequestOptions) {
		toSerialize["requestOptions"] = o.RequestOptions
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	return toSerialize, nil
}

type NullableQuerySuggestion struct {
	value *QuerySuggestion
	isSet bool
}

func (v NullableQuerySuggestion) Get() *QuerySuggestion {
	return v.value
}

func (v *NullableQuerySuggestion) Set(val *QuerySuggestion) {
	v.value = val
	v.isSet = true
}

func (v NullableQuerySuggestion) IsSet() bool {
	return v.isSet
}

func (v *NullableQuerySuggestion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuerySuggestion(val *QuerySuggestion) *NullableQuerySuggestion {
	return &NullableQuerySuggestion{value: val, isSet: true}
}

func (v NullableQuerySuggestion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuerySuggestion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


