/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CountInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountInfo{}

// CountInfo struct for CountInfo
type CountInfo struct {
	// The counter value
	Count int32 `json:"count"`
	Period *Period `json:"period,omitempty"`
	// The unit of organization over which we did the count aggregation, e.g. org (department) or company
	Org *string `json:"org,omitempty"`
}

// NewCountInfo instantiates a new CountInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountInfo(count int32) *CountInfo {
	this := CountInfo{}
	this.Count = count
	return &this
}

// NewCountInfoWithDefaults instantiates a new CountInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountInfoWithDefaults() *CountInfo {
	this := CountInfo{}
	return &this
}

// GetCount returns the Count field value
func (o *CountInfo) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *CountInfo) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *CountInfo) SetCount(v int32) {
	o.Count = v
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *CountInfo) GetPeriod() Period {
	if o == nil || IsNil(o.Period) {
		var ret Period
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountInfo) GetPeriodOk() (*Period, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *CountInfo) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given Period and assigns it to the Period field.
func (o *CountInfo) SetPeriod(v Period) {
	o.Period = &v
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *CountInfo) GetOrg() string {
	if o == nil || IsNil(o.Org) {
		var ret string
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountInfo) GetOrgOk() (*string, bool) {
	if o == nil || IsNil(o.Org) {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *CountInfo) HasOrg() bool {
	if o != nil && !IsNil(o.Org) {
		return true
	}

	return false
}

// SetOrg gets a reference to the given string and assigns it to the Org field.
func (o *CountInfo) SetOrg(v string) {
	o.Org = &v
}

func (o CountInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["count"] = o.Count
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if !IsNil(o.Org) {
		toSerialize["org"] = o.Org
	}
	return toSerialize, nil
}

type NullableCountInfo struct {
	value *CountInfo
	isSet bool
}

func (v NullableCountInfo) Get() *CountInfo {
	return v.value
}

func (v *NullableCountInfo) Set(val *CountInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCountInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCountInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountInfo(val *CountInfo) *NullableCountInfo {
	return &NullableCountInfo{value: val, isSet: true}
}

func (v NullableCountInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


