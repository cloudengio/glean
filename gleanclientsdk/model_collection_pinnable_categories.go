/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// CollectionPinnableCategories Categories a collection can be pinned to
type CollectionPinnableCategories string

// List of CollectionPinnableCategories
const (
	COMPANY_RESOURCE CollectionPinnableCategories = "COMPANY_RESOURCE"
	DEPARTMENT_RESOURCE CollectionPinnableCategories = "DEPARTMENT_RESOURCE"
	TEAM_RESOURCE CollectionPinnableCategories = "TEAM_RESOURCE"
)

// All allowed values of CollectionPinnableCategories enum
var AllowedCollectionPinnableCategoriesEnumValues = []CollectionPinnableCategories{
	"COMPANY_RESOURCE",
	"DEPARTMENT_RESOURCE",
	"TEAM_RESOURCE",
}

func (v *CollectionPinnableCategories) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CollectionPinnableCategories(value)
	for _, existing := range AllowedCollectionPinnableCategoriesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CollectionPinnableCategories", value)
}

// NewCollectionPinnableCategoriesFromValue returns a pointer to a valid CollectionPinnableCategories
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCollectionPinnableCategoriesFromValue(v string) (*CollectionPinnableCategories, error) {
	ev := CollectionPinnableCategories(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CollectionPinnableCategories: valid values are %v", v, AllowedCollectionPinnableCategoriesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CollectionPinnableCategories) IsValid() bool {
	for _, existing := range AllowedCollectionPinnableCategoriesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CollectionPinnableCategories value
func (v CollectionPinnableCategories) Ptr() *CollectionPinnableCategories {
	return &v
}

type NullableCollectionPinnableCategories struct {
	value *CollectionPinnableCategories
	isSet bool
}

func (v NullableCollectionPinnableCategories) Get() *CollectionPinnableCategories {
	return v.value
}

func (v *NullableCollectionPinnableCategories) Set(val *CollectionPinnableCategories) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionPinnableCategories) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionPinnableCategories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionPinnableCategories(val *CollectionPinnableCategories) *NullableCollectionPinnableCategories {
	return &NullableCollectionPinnableCategories{value: val, isSet: true}
}

func (v NullableCollectionPinnableCategories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionPinnableCategories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

