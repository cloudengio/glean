/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ImageMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImageMetadata{}

// ImageMetadata struct for ImageMetadata
type ImageMetadata struct {
	Type ImageType `json:"type"`
	// ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype.
	Id *string `json:"id,omitempty"`
	// A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for.
	Ds *string `json:"ds,omitempty"`
	// Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty.
	Cid *string `json:"cid,omitempty"`
	// Extension the image is saved with. The extension data is deduced from content type for image uploads.
	Ext *string `json:"ext,omitempty"`
}

// NewImageMetadata instantiates a new ImageMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImageMetadata(type_ ImageType) *ImageMetadata {
	this := ImageMetadata{}
	this.Type = type_
	return &this
}

// NewImageMetadataWithDefaults instantiates a new ImageMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImageMetadataWithDefaults() *ImageMetadata {
	this := ImageMetadata{}
	return &this
}

// GetType returns the Type field value
func (o *ImageMetadata) GetType() ImageType {
	if o == nil {
		var ret ImageType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetTypeOk() (*ImageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ImageMetadata) SetType(v ImageType) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ImageMetadata) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ImageMetadata) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ImageMetadata) SetId(v string) {
	o.Id = &v
}

// GetDs returns the Ds field value if set, zero value otherwise.
func (o *ImageMetadata) GetDs() string {
	if o == nil || IsNil(o.Ds) {
		var ret string
		return ret
	}
	return *o.Ds
}

// GetDsOk returns a tuple with the Ds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetDsOk() (*string, bool) {
	if o == nil || IsNil(o.Ds) {
		return nil, false
	}
	return o.Ds, true
}

// HasDs returns a boolean if a field has been set.
func (o *ImageMetadata) HasDs() bool {
	if o != nil && !IsNil(o.Ds) {
		return true
	}

	return false
}

// SetDs gets a reference to the given string and assigns it to the Ds field.
func (o *ImageMetadata) SetDs(v string) {
	o.Ds = &v
}

// GetCid returns the Cid field value if set, zero value otherwise.
func (o *ImageMetadata) GetCid() string {
	if o == nil || IsNil(o.Cid) {
		var ret string
		return ret
	}
	return *o.Cid
}

// GetCidOk returns a tuple with the Cid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetCidOk() (*string, bool) {
	if o == nil || IsNil(o.Cid) {
		return nil, false
	}
	return o.Cid, true
}

// HasCid returns a boolean if a field has been set.
func (o *ImageMetadata) HasCid() bool {
	if o != nil && !IsNil(o.Cid) {
		return true
	}

	return false
}

// SetCid gets a reference to the given string and assigns it to the Cid field.
func (o *ImageMetadata) SetCid(v string) {
	o.Cid = &v
}

// GetExt returns the Ext field value if set, zero value otherwise.
func (o *ImageMetadata) GetExt() string {
	if o == nil || IsNil(o.Ext) {
		var ret string
		return ret
	}
	return *o.Ext
}

// GetExtOk returns a tuple with the Ext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImageMetadata) GetExtOk() (*string, bool) {
	if o == nil || IsNil(o.Ext) {
		return nil, false
	}
	return o.Ext, true
}

// HasExt returns a boolean if a field has been set.
func (o *ImageMetadata) HasExt() bool {
	if o != nil && !IsNil(o.Ext) {
		return true
	}

	return false
}

// SetExt gets a reference to the given string and assigns it to the Ext field.
func (o *ImageMetadata) SetExt(v string) {
	o.Ext = &v
}

func (o ImageMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImageMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ds) {
		toSerialize["ds"] = o.Ds
	}
	if !IsNil(o.Cid) {
		toSerialize["cid"] = o.Cid
	}
	if !IsNil(o.Ext) {
		toSerialize["ext"] = o.Ext
	}
	return toSerialize, nil
}

type NullableImageMetadata struct {
	value *ImageMetadata
	isSet bool
}

func (v NullableImageMetadata) Get() *ImageMetadata {
	return v.value
}

func (v *NullableImageMetadata) Set(val *ImageMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableImageMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableImageMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageMetadata(val *ImageMetadata) *NullableImageMetadata {
	return &NullableImageMetadata{value: val, isSet: true}
}

func (v NullableImageMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


