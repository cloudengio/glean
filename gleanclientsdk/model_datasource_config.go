/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DatasourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasourceConfig{}

// DatasourceConfig A \"class\" wrapper of Datasource instances. Rule of thumb: any field that is applicable to all instances of a datasource is probably a DatasourceConfig field
type DatasourceConfig struct {
	// The human-readable name of the datasource
	DisplayName *string `json:"displayName,omitempty"`
	// The fallback homepage for all instances of this datasource. Ex for slack: https://apps.slack.com/client
	HomeUrl *string `json:"homeUrl,omitempty"`
	// The URL to an image to be displayed as an icon for this generic datasource. Must have a transparency mask. SVG are recommended over PNG. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	IconUrl *string `json:"iconUrl,omitempty"`
	// Id of the datasource. So happens to be lowercase name like \"slack\", but could become opaque in the future. Don't rely on the id's format.
	Id *string `json:"id,omitempty"`
	// UNIMPLEMENTED. You're probably wanting DatasourceSchema, which are misnamed instances that are slated for replacement with this DatasourceConfig.instances field
	Instances []interface{} `json:"instances,omitempty"`
	// Whether the datasource allows for multiple instances. Ex: \"Jira (on prem)\" and \"Jira (cloud)\"
	SupportsMultipleInstances *bool `json:"supportsMultipleInstances,omitempty"`
	// Whether the datasource allows for automatic multiple instance setup. Currently only supported by GitHub.\"
	MultipleInstanceSetupEnabled *bool `json:"multipleInstanceSetupEnabled,omitempty"`
}

// NewDatasourceConfig instantiates a new DatasourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceConfig() *DatasourceConfig {
	this := DatasourceConfig{}
	return &this
}

// NewDatasourceConfigWithDefaults instantiates a new DatasourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceConfigWithDefaults() *DatasourceConfig {
	this := DatasourceConfig{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DatasourceConfig) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceConfig) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DatasourceConfig) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DatasourceConfig) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetHomeUrl returns the HomeUrl field value if set, zero value otherwise.
func (o *DatasourceConfig) GetHomeUrl() string {
	if o == nil || IsNil(o.HomeUrl) {
		var ret string
		return ret
	}
	return *o.HomeUrl
}

// GetHomeUrlOk returns a tuple with the HomeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceConfig) GetHomeUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HomeUrl) {
		return nil, false
	}
	return o.HomeUrl, true
}

// HasHomeUrl returns a boolean if a field has been set.
func (o *DatasourceConfig) HasHomeUrl() bool {
	if o != nil && !IsNil(o.HomeUrl) {
		return true
	}

	return false
}

// SetHomeUrl gets a reference to the given string and assigns it to the HomeUrl field.
func (o *DatasourceConfig) SetHomeUrl(v string) {
	o.HomeUrl = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *DatasourceConfig) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceConfig) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *DatasourceConfig) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *DatasourceConfig) SetIconUrl(v string) {
	o.IconUrl = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DatasourceConfig) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceConfig) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DatasourceConfig) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DatasourceConfig) SetId(v string) {
	o.Id = &v
}

// GetInstances returns the Instances field value if set, zero value otherwise.
func (o *DatasourceConfig) GetInstances() []interface{} {
	if o == nil || IsNil(o.Instances) {
		var ret []interface{}
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceConfig) GetInstancesOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Instances) {
		return nil, false
	}
	return o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *DatasourceConfig) HasInstances() bool {
	if o != nil && !IsNil(o.Instances) {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []interface{} and assigns it to the Instances field.
func (o *DatasourceConfig) SetInstances(v []interface{}) {
	o.Instances = v
}

// GetSupportsMultipleInstances returns the SupportsMultipleInstances field value if set, zero value otherwise.
func (o *DatasourceConfig) GetSupportsMultipleInstances() bool {
	if o == nil || IsNil(o.SupportsMultipleInstances) {
		var ret bool
		return ret
	}
	return *o.SupportsMultipleInstances
}

// GetSupportsMultipleInstancesOk returns a tuple with the SupportsMultipleInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceConfig) GetSupportsMultipleInstancesOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsMultipleInstances) {
		return nil, false
	}
	return o.SupportsMultipleInstances, true
}

// HasSupportsMultipleInstances returns a boolean if a field has been set.
func (o *DatasourceConfig) HasSupportsMultipleInstances() bool {
	if o != nil && !IsNil(o.SupportsMultipleInstances) {
		return true
	}

	return false
}

// SetSupportsMultipleInstances gets a reference to the given bool and assigns it to the SupportsMultipleInstances field.
func (o *DatasourceConfig) SetSupportsMultipleInstances(v bool) {
	o.SupportsMultipleInstances = &v
}

// GetMultipleInstanceSetupEnabled returns the MultipleInstanceSetupEnabled field value if set, zero value otherwise.
func (o *DatasourceConfig) GetMultipleInstanceSetupEnabled() bool {
	if o == nil || IsNil(o.MultipleInstanceSetupEnabled) {
		var ret bool
		return ret
	}
	return *o.MultipleInstanceSetupEnabled
}

// GetMultipleInstanceSetupEnabledOk returns a tuple with the MultipleInstanceSetupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceConfig) GetMultipleInstanceSetupEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MultipleInstanceSetupEnabled) {
		return nil, false
	}
	return o.MultipleInstanceSetupEnabled, true
}

// HasMultipleInstanceSetupEnabled returns a boolean if a field has been set.
func (o *DatasourceConfig) HasMultipleInstanceSetupEnabled() bool {
	if o != nil && !IsNil(o.MultipleInstanceSetupEnabled) {
		return true
	}

	return false
}

// SetMultipleInstanceSetupEnabled gets a reference to the given bool and assigns it to the MultipleInstanceSetupEnabled field.
func (o *DatasourceConfig) SetMultipleInstanceSetupEnabled(v bool) {
	o.MultipleInstanceSetupEnabled = &v
}

func (o DatasourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.HomeUrl) {
		toSerialize["homeUrl"] = o.HomeUrl
	}
	if !IsNil(o.IconUrl) {
		toSerialize["iconUrl"] = o.IconUrl
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Instances) {
		toSerialize["instances"] = o.Instances
	}
	if !IsNil(o.SupportsMultipleInstances) {
		toSerialize["supportsMultipleInstances"] = o.SupportsMultipleInstances
	}
	if !IsNil(o.MultipleInstanceSetupEnabled) {
		toSerialize["multipleInstanceSetupEnabled"] = o.MultipleInstanceSetupEnabled
	}
	return toSerialize, nil
}

type NullableDatasourceConfig struct {
	value *DatasourceConfig
	isSet bool
}

func (v NullableDatasourceConfig) Get() *DatasourceConfig {
	return v.value
}

func (v *NullableDatasourceConfig) Set(val *DatasourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceConfig(val *DatasourceConfig) *NullableDatasourceConfig {
	return &NullableDatasourceConfig{value: val, isSet: true}
}

func (v NullableDatasourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


