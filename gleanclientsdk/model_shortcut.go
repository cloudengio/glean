/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the Shortcut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Shortcut{}

// Shortcut struct for Shortcut
type Shortcut struct {
	// The opaque id of the user generated content.
	Id *int32 `json:"id,omitempty"`
	// link text following go/ prefix as entered by the user.
	InputAlias string `json:"inputAlias"`
	// destination URL for the shortcut.
	DestinationUrl *string `json:"destinationUrl,omitempty"`
	// document id for the url, if known.
	DestinationDocumentId *string `json:"destinationDocumentId,omitempty"`
	// A short, plain text blurb to help people understand the intent of the shortcut.
	Description *string `json:"description,omitempty"`
	// Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only.
	Unlisted *bool `json:"unlisted,omitempty"`
	// For variable shortcuts, contains the url template; note, destinationUrl contains default url
	UrlTemplate *string `json:"urlTemplate,omitempty"`
	// A list of user roles added for the Shortcut.
	AddedRoles []UserRoleSpecification `json:"addedRoles,omitempty"`
	// A list of user roles removed for the Shortcut.
	RemovedRoles []UserRoleSpecification `json:"removedRoles,omitempty"`
	Permissions *ObjectPermissions `json:"permissions,omitempty"`
	CreatedBy *Person `json:"createdBy,omitempty"`
	// The time the shortcut was created in ISO format (ISO 8601).
	CreateTime *time.Time `json:"createTime,omitempty"`
	UpdatedBy *Person `json:"updatedBy,omitempty"`
	// The time the shortcut was updated in ISO format (ISO 8601).
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	DestinationDocument *Document `json:"destinationDocument,omitempty"`
	// The URL from which the user is then redirected to the destination URL. Full replacement for https://go/<inputAlias>.
	IntermediateUrl *string `json:"intermediateUrl,omitempty"`
	// The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with \"/\". e.g. \"go/\" for native shortcuts.
	ViewPrefix *string `json:"viewPrefix,omitempty"`
	// Indicates whether a shortcut is native or external.
	IsExternal *bool `json:"isExternal,omitempty"`
	// The URL using which the user can access the edit page of the shortcut.
	EditUrl *string `json:"editUrl,omitempty"`
	// canonical link text following go/ prefix where hyphen/underscore is removed.
	Alias *string `json:"alias,omitempty"`
	// Title for the Go Link
	Title *string `json:"title,omitempty"`
	// A list of user roles for the Go Link.
	Roles []UserRoleSpecification `json:"roles,omitempty"`
}

// NewShortcut instantiates a new Shortcut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortcut(inputAlias string) *Shortcut {
	this := Shortcut{}
	this.InputAlias = inputAlias
	return &this
}

// NewShortcutWithDefaults instantiates a new Shortcut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortcutWithDefaults() *Shortcut {
	this := Shortcut{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Shortcut) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Shortcut) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Shortcut) SetId(v int32) {
	o.Id = &v
}

// GetInputAlias returns the InputAlias field value
func (o *Shortcut) GetInputAlias() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InputAlias
}

// GetInputAliasOk returns a tuple with the InputAlias field value
// and a boolean to check if the value has been set.
func (o *Shortcut) GetInputAliasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InputAlias, true
}

// SetInputAlias sets field value
func (o *Shortcut) SetInputAlias(v string) {
	o.InputAlias = v
}

// GetDestinationUrl returns the DestinationUrl field value if set, zero value otherwise.
func (o *Shortcut) GetDestinationUrl() string {
	if o == nil || IsNil(o.DestinationUrl) {
		var ret string
		return ret
	}
	return *o.DestinationUrl
}

// GetDestinationUrlOk returns a tuple with the DestinationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetDestinationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationUrl) {
		return nil, false
	}
	return o.DestinationUrl, true
}

// HasDestinationUrl returns a boolean if a field has been set.
func (o *Shortcut) HasDestinationUrl() bool {
	if o != nil && !IsNil(o.DestinationUrl) {
		return true
	}

	return false
}

// SetDestinationUrl gets a reference to the given string and assigns it to the DestinationUrl field.
func (o *Shortcut) SetDestinationUrl(v string) {
	o.DestinationUrl = &v
}

// GetDestinationDocumentId returns the DestinationDocumentId field value if set, zero value otherwise.
func (o *Shortcut) GetDestinationDocumentId() string {
	if o == nil || IsNil(o.DestinationDocumentId) {
		var ret string
		return ret
	}
	return *o.DestinationDocumentId
}

// GetDestinationDocumentIdOk returns a tuple with the DestinationDocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetDestinationDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationDocumentId) {
		return nil, false
	}
	return o.DestinationDocumentId, true
}

// HasDestinationDocumentId returns a boolean if a field has been set.
func (o *Shortcut) HasDestinationDocumentId() bool {
	if o != nil && !IsNil(o.DestinationDocumentId) {
		return true
	}

	return false
}

// SetDestinationDocumentId gets a reference to the given string and assigns it to the DestinationDocumentId field.
func (o *Shortcut) SetDestinationDocumentId(v string) {
	o.DestinationDocumentId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Shortcut) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Shortcut) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Shortcut) SetDescription(v string) {
	o.Description = &v
}

// GetUnlisted returns the Unlisted field value if set, zero value otherwise.
func (o *Shortcut) GetUnlisted() bool {
	if o == nil || IsNil(o.Unlisted) {
		var ret bool
		return ret
	}
	return *o.Unlisted
}

// GetUnlistedOk returns a tuple with the Unlisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetUnlistedOk() (*bool, bool) {
	if o == nil || IsNil(o.Unlisted) {
		return nil, false
	}
	return o.Unlisted, true
}

// HasUnlisted returns a boolean if a field has been set.
func (o *Shortcut) HasUnlisted() bool {
	if o != nil && !IsNil(o.Unlisted) {
		return true
	}

	return false
}

// SetUnlisted gets a reference to the given bool and assigns it to the Unlisted field.
func (o *Shortcut) SetUnlisted(v bool) {
	o.Unlisted = &v
}

// GetUrlTemplate returns the UrlTemplate field value if set, zero value otherwise.
func (o *Shortcut) GetUrlTemplate() string {
	if o == nil || IsNil(o.UrlTemplate) {
		var ret string
		return ret
	}
	return *o.UrlTemplate
}

// GetUrlTemplateOk returns a tuple with the UrlTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetUrlTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.UrlTemplate) {
		return nil, false
	}
	return o.UrlTemplate, true
}

// HasUrlTemplate returns a boolean if a field has been set.
func (o *Shortcut) HasUrlTemplate() bool {
	if o != nil && !IsNil(o.UrlTemplate) {
		return true
	}

	return false
}

// SetUrlTemplate gets a reference to the given string and assigns it to the UrlTemplate field.
func (o *Shortcut) SetUrlTemplate(v string) {
	o.UrlTemplate = &v
}

// GetAddedRoles returns the AddedRoles field value if set, zero value otherwise.
func (o *Shortcut) GetAddedRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.AddedRoles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.AddedRoles
}

// GetAddedRolesOk returns a tuple with the AddedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetAddedRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.AddedRoles) {
		return nil, false
	}
	return o.AddedRoles, true
}

// HasAddedRoles returns a boolean if a field has been set.
func (o *Shortcut) HasAddedRoles() bool {
	if o != nil && !IsNil(o.AddedRoles) {
		return true
	}

	return false
}

// SetAddedRoles gets a reference to the given []UserRoleSpecification and assigns it to the AddedRoles field.
func (o *Shortcut) SetAddedRoles(v []UserRoleSpecification) {
	o.AddedRoles = v
}

// GetRemovedRoles returns the RemovedRoles field value if set, zero value otherwise.
func (o *Shortcut) GetRemovedRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.RemovedRoles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.RemovedRoles
}

// GetRemovedRolesOk returns a tuple with the RemovedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetRemovedRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.RemovedRoles) {
		return nil, false
	}
	return o.RemovedRoles, true
}

// HasRemovedRoles returns a boolean if a field has been set.
func (o *Shortcut) HasRemovedRoles() bool {
	if o != nil && !IsNil(o.RemovedRoles) {
		return true
	}

	return false
}

// SetRemovedRoles gets a reference to the given []UserRoleSpecification and assigns it to the RemovedRoles field.
func (o *Shortcut) SetRemovedRoles(v []UserRoleSpecification) {
	o.RemovedRoles = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *Shortcut) GetPermissions() ObjectPermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret ObjectPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetPermissionsOk() (*ObjectPermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *Shortcut) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given ObjectPermissions and assigns it to the Permissions field.
func (o *Shortcut) SetPermissions(v ObjectPermissions) {
	o.Permissions = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Shortcut) GetCreatedBy() Person {
	if o == nil || IsNil(o.CreatedBy) {
		var ret Person
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetCreatedByOk() (*Person, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Shortcut) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given Person and assigns it to the CreatedBy field.
func (o *Shortcut) SetCreatedBy(v Person) {
	o.CreatedBy = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Shortcut) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Shortcut) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Shortcut) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Shortcut) GetUpdatedBy() Person {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret Person
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetUpdatedByOk() (*Person, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Shortcut) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given Person and assigns it to the UpdatedBy field.
func (o *Shortcut) SetUpdatedBy(v Person) {
	o.UpdatedBy = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Shortcut) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Shortcut) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *Shortcut) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetDestinationDocument returns the DestinationDocument field value if set, zero value otherwise.
func (o *Shortcut) GetDestinationDocument() Document {
	if o == nil || IsNil(o.DestinationDocument) {
		var ret Document
		return ret
	}
	return *o.DestinationDocument
}

// GetDestinationDocumentOk returns a tuple with the DestinationDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetDestinationDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.DestinationDocument) {
		return nil, false
	}
	return o.DestinationDocument, true
}

// HasDestinationDocument returns a boolean if a field has been set.
func (o *Shortcut) HasDestinationDocument() bool {
	if o != nil && !IsNil(o.DestinationDocument) {
		return true
	}

	return false
}

// SetDestinationDocument gets a reference to the given Document and assigns it to the DestinationDocument field.
func (o *Shortcut) SetDestinationDocument(v Document) {
	o.DestinationDocument = &v
}

// GetIntermediateUrl returns the IntermediateUrl field value if set, zero value otherwise.
func (o *Shortcut) GetIntermediateUrl() string {
	if o == nil || IsNil(o.IntermediateUrl) {
		var ret string
		return ret
	}
	return *o.IntermediateUrl
}

// GetIntermediateUrlOk returns a tuple with the IntermediateUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetIntermediateUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IntermediateUrl) {
		return nil, false
	}
	return o.IntermediateUrl, true
}

// HasIntermediateUrl returns a boolean if a field has been set.
func (o *Shortcut) HasIntermediateUrl() bool {
	if o != nil && !IsNil(o.IntermediateUrl) {
		return true
	}

	return false
}

// SetIntermediateUrl gets a reference to the given string and assigns it to the IntermediateUrl field.
func (o *Shortcut) SetIntermediateUrl(v string) {
	o.IntermediateUrl = &v
}

// GetViewPrefix returns the ViewPrefix field value if set, zero value otherwise.
func (o *Shortcut) GetViewPrefix() string {
	if o == nil || IsNil(o.ViewPrefix) {
		var ret string
		return ret
	}
	return *o.ViewPrefix
}

// GetViewPrefixOk returns a tuple with the ViewPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetViewPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.ViewPrefix) {
		return nil, false
	}
	return o.ViewPrefix, true
}

// HasViewPrefix returns a boolean if a field has been set.
func (o *Shortcut) HasViewPrefix() bool {
	if o != nil && !IsNil(o.ViewPrefix) {
		return true
	}

	return false
}

// SetViewPrefix gets a reference to the given string and assigns it to the ViewPrefix field.
func (o *Shortcut) SetViewPrefix(v string) {
	o.ViewPrefix = &v
}

// GetIsExternal returns the IsExternal field value if set, zero value otherwise.
func (o *Shortcut) GetIsExternal() bool {
	if o == nil || IsNil(o.IsExternal) {
		var ret bool
		return ret
	}
	return *o.IsExternal
}

// GetIsExternalOk returns a tuple with the IsExternal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetIsExternalOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExternal) {
		return nil, false
	}
	return o.IsExternal, true
}

// HasIsExternal returns a boolean if a field has been set.
func (o *Shortcut) HasIsExternal() bool {
	if o != nil && !IsNil(o.IsExternal) {
		return true
	}

	return false
}

// SetIsExternal gets a reference to the given bool and assigns it to the IsExternal field.
func (o *Shortcut) SetIsExternal(v bool) {
	o.IsExternal = &v
}

// GetEditUrl returns the EditUrl field value if set, zero value otherwise.
func (o *Shortcut) GetEditUrl() string {
	if o == nil || IsNil(o.EditUrl) {
		var ret string
		return ret
	}
	return *o.EditUrl
}

// GetEditUrlOk returns a tuple with the EditUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetEditUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EditUrl) {
		return nil, false
	}
	return o.EditUrl, true
}

// HasEditUrl returns a boolean if a field has been set.
func (o *Shortcut) HasEditUrl() bool {
	if o != nil && !IsNil(o.EditUrl) {
		return true
	}

	return false
}

// SetEditUrl gets a reference to the given string and assigns it to the EditUrl field.
func (o *Shortcut) SetEditUrl(v string) {
	o.EditUrl = &v
}

// GetAlias returns the Alias field value if set, zero value otherwise.
func (o *Shortcut) GetAlias() string {
	if o == nil || IsNil(o.Alias) {
		var ret string
		return ret
	}
	return *o.Alias
}

// GetAliasOk returns a tuple with the Alias field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetAliasOk() (*string, bool) {
	if o == nil || IsNil(o.Alias) {
		return nil, false
	}
	return o.Alias, true
}

// HasAlias returns a boolean if a field has been set.
func (o *Shortcut) HasAlias() bool {
	if o != nil && !IsNil(o.Alias) {
		return true
	}

	return false
}

// SetAlias gets a reference to the given string and assigns it to the Alias field.
func (o *Shortcut) SetAlias(v string) {
	o.Alias = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Shortcut) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Shortcut) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Shortcut) SetTitle(v string) {
	o.Title = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Shortcut) GetRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.Roles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Shortcut) GetRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Shortcut) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UserRoleSpecification and assigns it to the Roles field.
func (o *Shortcut) SetRoles(v []UserRoleSpecification) {
	o.Roles = v
}

func (o Shortcut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Shortcut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["inputAlias"] = o.InputAlias
	if !IsNil(o.DestinationUrl) {
		toSerialize["destinationUrl"] = o.DestinationUrl
	}
	if !IsNil(o.DestinationDocumentId) {
		toSerialize["destinationDocumentId"] = o.DestinationDocumentId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Unlisted) {
		toSerialize["unlisted"] = o.Unlisted
	}
	if !IsNil(o.UrlTemplate) {
		toSerialize["urlTemplate"] = o.UrlTemplate
	}
	if !IsNil(o.AddedRoles) {
		toSerialize["addedRoles"] = o.AddedRoles
	}
	if !IsNil(o.RemovedRoles) {
		toSerialize["removedRoles"] = o.RemovedRoles
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if !IsNil(o.DestinationDocument) {
		toSerialize["destinationDocument"] = o.DestinationDocument
	}
	if !IsNil(o.IntermediateUrl) {
		toSerialize["intermediateUrl"] = o.IntermediateUrl
	}
	if !IsNil(o.ViewPrefix) {
		toSerialize["viewPrefix"] = o.ViewPrefix
	}
	if !IsNil(o.IsExternal) {
		toSerialize["isExternal"] = o.IsExternal
	}
	if !IsNil(o.EditUrl) {
		toSerialize["editUrl"] = o.EditUrl
	}
	if !IsNil(o.Alias) {
		toSerialize["alias"] = o.Alias
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableShortcut struct {
	value *Shortcut
	isSet bool
}

func (v NullableShortcut) Get() *Shortcut {
	return v.value
}

func (v *NullableShortcut) Set(val *Shortcut) {
	v.value = val
	v.isSet = true
}

func (v NullableShortcut) IsSet() bool {
	return v.isSet
}

func (v *NullableShortcut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortcut(val *Shortcut) *NullableShortcut {
	return &NullableShortcut{value: val, isSet: true}
}

func (v NullableShortcut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortcut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


