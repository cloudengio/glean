/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the TagsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TagsConfig{}

// TagsConfig struct for TagsConfig
type TagsConfig struct {
	DisplayLimit *float32 `json:"displayLimit,omitempty"`
	ShowTags *bool `json:"showTags,omitempty"`
}

// NewTagsConfig instantiates a new TagsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagsConfig() *TagsConfig {
	this := TagsConfig{}
	return &this
}

// NewTagsConfigWithDefaults instantiates a new TagsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagsConfigWithDefaults() *TagsConfig {
	this := TagsConfig{}
	return &this
}

// GetDisplayLimit returns the DisplayLimit field value if set, zero value otherwise.
func (o *TagsConfig) GetDisplayLimit() float32 {
	if o == nil || IsNil(o.DisplayLimit) {
		var ret float32
		return ret
	}
	return *o.DisplayLimit
}

// GetDisplayLimitOk returns a tuple with the DisplayLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagsConfig) GetDisplayLimitOk() (*float32, bool) {
	if o == nil || IsNil(o.DisplayLimit) {
		return nil, false
	}
	return o.DisplayLimit, true
}

// HasDisplayLimit returns a boolean if a field has been set.
func (o *TagsConfig) HasDisplayLimit() bool {
	if o != nil && !IsNil(o.DisplayLimit) {
		return true
	}

	return false
}

// SetDisplayLimit gets a reference to the given float32 and assigns it to the DisplayLimit field.
func (o *TagsConfig) SetDisplayLimit(v float32) {
	o.DisplayLimit = &v
}

// GetShowTags returns the ShowTags field value if set, zero value otherwise.
func (o *TagsConfig) GetShowTags() bool {
	if o == nil || IsNil(o.ShowTags) {
		var ret bool
		return ret
	}
	return *o.ShowTags
}

// GetShowTagsOk returns a tuple with the ShowTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TagsConfig) GetShowTagsOk() (*bool, bool) {
	if o == nil || IsNil(o.ShowTags) {
		return nil, false
	}
	return o.ShowTags, true
}

// HasShowTags returns a boolean if a field has been set.
func (o *TagsConfig) HasShowTags() bool {
	if o != nil && !IsNil(o.ShowTags) {
		return true
	}

	return false
}

// SetShowTags gets a reference to the given bool and assigns it to the ShowTags field.
func (o *TagsConfig) SetShowTags(v bool) {
	o.ShowTags = &v
}

func (o TagsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TagsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayLimit) {
		toSerialize["displayLimit"] = o.DisplayLimit
	}
	if !IsNil(o.ShowTags) {
		toSerialize["showTags"] = o.ShowTags
	}
	return toSerialize, nil
}

type NullableTagsConfig struct {
	value *TagsConfig
	isSet bool
}

func (v NullableTagsConfig) Get() *TagsConfig {
	return v.value
}

func (v *NullableTagsConfig) Set(val *TagsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTagsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTagsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagsConfig(val *TagsConfig) *NullableTagsConfig {
	return &NullableTagsConfig{value: val, isSet: true}
}

func (v NullableTagsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


