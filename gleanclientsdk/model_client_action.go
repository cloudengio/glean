/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ClientAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientAction{}

// ClientAction struct for ClientAction
type ClientAction struct {
	// Type of the client action.
	Type string `json:"type"`
	Quicklink *Quicklink `json:"quicklink,omitempty"`
	// Specific url if action requires a destination url to complete. Has precedence over action context.
	DestinationUrl *string `json:"destinationUrl,omitempty"`
}

// NewClientAction instantiates a new ClientAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientAction(type_ string) *ClientAction {
	this := ClientAction{}
	this.Type = type_
	return &this
}

// NewClientActionWithDefaults instantiates a new ClientAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientActionWithDefaults() *ClientAction {
	this := ClientAction{}
	return &this
}

// GetType returns the Type field value
func (o *ClientAction) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ClientAction) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ClientAction) SetType(v string) {
	o.Type = v
}

// GetQuicklink returns the Quicklink field value if set, zero value otherwise.
func (o *ClientAction) GetQuicklink() Quicklink {
	if o == nil || IsNil(o.Quicklink) {
		var ret Quicklink
		return ret
	}
	return *o.Quicklink
}

// GetQuicklinkOk returns a tuple with the Quicklink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAction) GetQuicklinkOk() (*Quicklink, bool) {
	if o == nil || IsNil(o.Quicklink) {
		return nil, false
	}
	return o.Quicklink, true
}

// HasQuicklink returns a boolean if a field has been set.
func (o *ClientAction) HasQuicklink() bool {
	if o != nil && !IsNil(o.Quicklink) {
		return true
	}

	return false
}

// SetQuicklink gets a reference to the given Quicklink and assigns it to the Quicklink field.
func (o *ClientAction) SetQuicklink(v Quicklink) {
	o.Quicklink = &v
}

// GetDestinationUrl returns the DestinationUrl field value if set, zero value otherwise.
func (o *ClientAction) GetDestinationUrl() string {
	if o == nil || IsNil(o.DestinationUrl) {
		var ret string
		return ret
	}
	return *o.DestinationUrl
}

// GetDestinationUrlOk returns a tuple with the DestinationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAction) GetDestinationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationUrl) {
		return nil, false
	}
	return o.DestinationUrl, true
}

// HasDestinationUrl returns a boolean if a field has been set.
func (o *ClientAction) HasDestinationUrl() bool {
	if o != nil && !IsNil(o.DestinationUrl) {
		return true
	}

	return false
}

// SetDestinationUrl gets a reference to the given string and assigns it to the DestinationUrl field.
func (o *ClientAction) SetDestinationUrl(v string) {
	o.DestinationUrl = &v
}

func (o ClientAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Quicklink) {
		toSerialize["quicklink"] = o.Quicklink
	}
	if !IsNil(o.DestinationUrl) {
		toSerialize["destinationUrl"] = o.DestinationUrl
	}
	return toSerialize, nil
}

type NullableClientAction struct {
	value *ClientAction
	isSet bool
}

func (v NullableClientAction) Get() *ClientAction {
	return v.value
}

func (v *NullableClientAction) Set(val *ClientAction) {
	v.value = val
	v.isSet = true
}

func (v NullableClientAction) IsSet() bool {
	return v.isSet
}

func (v *NullableClientAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientAction(val *ClientAction) *NullableClientAction {
	return &NullableClientAction{value: val, isSet: true}
}

func (v NullableClientAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


