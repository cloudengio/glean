/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the FacetFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FacetFilter{}

// FacetFilter struct for FacetFilter
type FacetFilter struct {
	FieldName *string `json:"fieldName,omitempty"`
	// Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName doc_type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet.
	Values []FacetFilterValue `json:"values,omitempty"`
	// Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet.
	GroupName *string `json:"groupName,omitempty"`
}

// NewFacetFilter instantiates a new FacetFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFacetFilter() *FacetFilter {
	this := FacetFilter{}
	return &this
}

// NewFacetFilterWithDefaults instantiates a new FacetFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFacetFilterWithDefaults() *FacetFilter {
	this := FacetFilter{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *FacetFilter) GetFieldName() string {
	if o == nil || IsNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetFilter) GetFieldNameOk() (*string, bool) {
	if o == nil || IsNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *FacetFilter) HasFieldName() bool {
	if o != nil && !IsNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *FacetFilter) SetFieldName(v string) {
	o.FieldName = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *FacetFilter) GetValues() []FacetFilterValue {
	if o == nil || IsNil(o.Values) {
		var ret []FacetFilterValue
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetFilter) GetValuesOk() ([]FacetFilterValue, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *FacetFilter) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []FacetFilterValue and assigns it to the Values field.
func (o *FacetFilter) SetValues(v []FacetFilterValue) {
	o.Values = v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *FacetFilter) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FacetFilter) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *FacetFilter) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *FacetFilter) SetGroupName(v string) {
	o.GroupName = &v
}

func (o FacetFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FacetFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	if !IsNil(o.GroupName) {
		toSerialize["groupName"] = o.GroupName
	}
	return toSerialize, nil
}

type NullableFacetFilter struct {
	value *FacetFilter
	isSet bool
}

func (v NullableFacetFilter) Get() *FacetFilter {
	return v.value
}

func (v *NullableFacetFilter) Set(val *FacetFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFacetFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFacetFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFacetFilter(val *FacetFilter) *NullableFacetFilter {
	return &NullableFacetFilter{value: val, isSet: true}
}

func (v NullableFacetFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFacetFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


