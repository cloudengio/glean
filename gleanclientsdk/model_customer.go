/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Customer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Customer{}

// Customer struct for Customer
type Customer struct {
	// Unique identifier.
	Id string `json:"id"`
	// Link to company's associated website domains.
	Domains []string `json:"domains,omitempty"`
	Company Company `json:"company"`
	// A map of {string, int} pairs representing counts of each document type associated with this customer.
	DocumentCounts *map[string]int32 `json:"documentCounts,omitempty"`
	// A list of POC for company.
	Poc []Person `json:"poc,omitempty"`
	Metadata *CustomerMetadata `json:"metadata,omitempty"`
	// A list of Customers.
	MergedCustomers []Customer `json:"mergedCustomers,omitempty"`
	// The date when the interaction with customer started.
	StartDate *string `json:"startDate,omitempty"`
	// Average contract annual revenue with that customer.
	ContractAnnualRevenue *float64 `json:"contractAnnualRevenue,omitempty"`
	// User facing (potentially generated) notes about company.
	Notes *string `json:"notes,omitempty"`
}

// NewCustomer instantiates a new Customer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomer(id string, company Company) *Customer {
	this := Customer{}
	this.Id = id
	this.Company = company
	return &this
}

// NewCustomerWithDefaults instantiates a new Customer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomerWithDefaults() *Customer {
	this := Customer{}
	return &this
}

// GetId returns the Id field value
func (o *Customer) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Customer) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Customer) SetId(v string) {
	o.Id = v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *Customer) GetDomains() []string {
	if o == nil || IsNil(o.Domains) {
		var ret []string
		return ret
	}
	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.Domains) {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *Customer) HasDomains() bool {
	if o != nil && !IsNil(o.Domains) {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []string and assigns it to the Domains field.
func (o *Customer) SetDomains(v []string) {
	o.Domains = v
}

// GetCompany returns the Company field value
func (o *Customer) GetCompany() Company {
	if o == nil {
		var ret Company
		return ret
	}

	return o.Company
}

// GetCompanyOk returns a tuple with the Company field value
// and a boolean to check if the value has been set.
func (o *Customer) GetCompanyOk() (*Company, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Company, true
}

// SetCompany sets field value
func (o *Customer) SetCompany(v Company) {
	o.Company = v
}

// GetDocumentCounts returns the DocumentCounts field value if set, zero value otherwise.
func (o *Customer) GetDocumentCounts() map[string]int32 {
	if o == nil || IsNil(o.DocumentCounts) {
		var ret map[string]int32
		return ret
	}
	return *o.DocumentCounts
}

// GetDocumentCountsOk returns a tuple with the DocumentCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetDocumentCountsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.DocumentCounts) {
		return nil, false
	}
	return o.DocumentCounts, true
}

// HasDocumentCounts returns a boolean if a field has been set.
func (o *Customer) HasDocumentCounts() bool {
	if o != nil && !IsNil(o.DocumentCounts) {
		return true
	}

	return false
}

// SetDocumentCounts gets a reference to the given map[string]int32 and assigns it to the DocumentCounts field.
func (o *Customer) SetDocumentCounts(v map[string]int32) {
	o.DocumentCounts = &v
}

// GetPoc returns the Poc field value if set, zero value otherwise.
func (o *Customer) GetPoc() []Person {
	if o == nil || IsNil(o.Poc) {
		var ret []Person
		return ret
	}
	return o.Poc
}

// GetPocOk returns a tuple with the Poc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetPocOk() ([]Person, bool) {
	if o == nil || IsNil(o.Poc) {
		return nil, false
	}
	return o.Poc, true
}

// HasPoc returns a boolean if a field has been set.
func (o *Customer) HasPoc() bool {
	if o != nil && !IsNil(o.Poc) {
		return true
	}

	return false
}

// SetPoc gets a reference to the given []Person and assigns it to the Poc field.
func (o *Customer) SetPoc(v []Person) {
	o.Poc = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *Customer) GetMetadata() CustomerMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret CustomerMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetMetadataOk() (*CustomerMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *Customer) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given CustomerMetadata and assigns it to the Metadata field.
func (o *Customer) SetMetadata(v CustomerMetadata) {
	o.Metadata = &v
}

// GetMergedCustomers returns the MergedCustomers field value if set, zero value otherwise.
func (o *Customer) GetMergedCustomers() []Customer {
	if o == nil || IsNil(o.MergedCustomers) {
		var ret []Customer
		return ret
	}
	return o.MergedCustomers
}

// GetMergedCustomersOk returns a tuple with the MergedCustomers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetMergedCustomersOk() ([]Customer, bool) {
	if o == nil || IsNil(o.MergedCustomers) {
		return nil, false
	}
	return o.MergedCustomers, true
}

// HasMergedCustomers returns a boolean if a field has been set.
func (o *Customer) HasMergedCustomers() bool {
	if o != nil && !IsNil(o.MergedCustomers) {
		return true
	}

	return false
}

// SetMergedCustomers gets a reference to the given []Customer and assigns it to the MergedCustomers field.
func (o *Customer) SetMergedCustomers(v []Customer) {
	o.MergedCustomers = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *Customer) GetStartDate() string {
	if o == nil || IsNil(o.StartDate) {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetStartDateOk() (*string, bool) {
	if o == nil || IsNil(o.StartDate) {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *Customer) HasStartDate() bool {
	if o != nil && !IsNil(o.StartDate) {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *Customer) SetStartDate(v string) {
	o.StartDate = &v
}

// GetContractAnnualRevenue returns the ContractAnnualRevenue field value if set, zero value otherwise.
func (o *Customer) GetContractAnnualRevenue() float64 {
	if o == nil || IsNil(o.ContractAnnualRevenue) {
		var ret float64
		return ret
	}
	return *o.ContractAnnualRevenue
}

// GetContractAnnualRevenueOk returns a tuple with the ContractAnnualRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetContractAnnualRevenueOk() (*float64, bool) {
	if o == nil || IsNil(o.ContractAnnualRevenue) {
		return nil, false
	}
	return o.ContractAnnualRevenue, true
}

// HasContractAnnualRevenue returns a boolean if a field has been set.
func (o *Customer) HasContractAnnualRevenue() bool {
	if o != nil && !IsNil(o.ContractAnnualRevenue) {
		return true
	}

	return false
}

// SetContractAnnualRevenue gets a reference to the given float64 and assigns it to the ContractAnnualRevenue field.
func (o *Customer) SetContractAnnualRevenue(v float64) {
	o.ContractAnnualRevenue = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *Customer) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Customer) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *Customer) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *Customer) SetNotes(v string) {
	o.Notes = &v
}

func (o Customer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Customer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Domains) {
		toSerialize["domains"] = o.Domains
	}
	toSerialize["company"] = o.Company
	if !IsNil(o.DocumentCounts) {
		toSerialize["documentCounts"] = o.DocumentCounts
	}
	if !IsNil(o.Poc) {
		toSerialize["poc"] = o.Poc
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	if !IsNil(o.MergedCustomers) {
		toSerialize["mergedCustomers"] = o.MergedCustomers
	}
	if !IsNil(o.StartDate) {
		toSerialize["startDate"] = o.StartDate
	}
	if !IsNil(o.ContractAnnualRevenue) {
		toSerialize["contractAnnualRevenue"] = o.ContractAnnualRevenue
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	return toSerialize, nil
}

type NullableCustomer struct {
	value *Customer
	isSet bool
}

func (v NullableCustomer) Get() *Customer {
	return v.value
}

func (v *NullableCustomer) Set(val *Customer) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomer) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomer(val *Customer) *NullableCustomer {
	return &NullableCustomer{value: val, isSet: true}
}

func (v NullableCustomer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


