/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the FeedResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedResponse{}

// FeedResponse struct for FeedResponse
type FeedResponse struct {
	// List of experiment ids for the corresponding request.
	ExperimentIds []int64 `json:"experimentIds,omitempty"`
	// An opaque token that represents this particular feed response.
	TrackingToken *string `json:"trackingToken,omitempty"`
	// Server unix timestamp (in seconds since epoch UTC).
	ServerTimestamp int32 `json:"serverTimestamp"`
	Results []FeedResult `json:"results,omitempty"`
	// Time in milliseconds the backend took to respond to the request.
	BackendTimeMillis *int64 `json:"backendTimeMillis,omitempty"`
	// Build versions to be rendered in debug mode.
	ServerBuildVersion *string `json:"serverBuildVersion,omitempty"`
	// A mapping from datasources to affinity of the user to each with scores.
	DatasourceAffinity *map[string]float32 `json:"datasourceAffinity,omitempty"`
	DebugInfo *FeedDebugInfo `json:"debugInfo,omitempty"`
	ManualFeedbackSignals *FeedManualFeedback `json:"manualFeedbackSignals,omitempty"`
	// The unique ID of the collection for company resources.
	CompanyResourcesCollectionId *int32 `json:"companyResourcesCollectionId,omitempty"`
	// Map from category to the list of facets that can be used to filter the entry's content.
	FacetResults *map[string][]FacetResult `json:"facetResults,omitempty"`
	// The time window (in hours) used for generating user mentions.
	MentionsTimeWindowInHours *int32 `json:"mentionsTimeWindowInHours,omitempty"`
}

// NewFeedResponse instantiates a new FeedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedResponse(serverTimestamp int32) *FeedResponse {
	this := FeedResponse{}
	this.ServerTimestamp = serverTimestamp
	return &this
}

// NewFeedResponseWithDefaults instantiates a new FeedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedResponseWithDefaults() *FeedResponse {
	this := FeedResponse{}
	return &this
}

// GetExperimentIds returns the ExperimentIds field value if set, zero value otherwise.
func (o *FeedResponse) GetExperimentIds() []int64 {
	if o == nil || IsNil(o.ExperimentIds) {
		var ret []int64
		return ret
	}
	return o.ExperimentIds
}

// GetExperimentIdsOk returns a tuple with the ExperimentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetExperimentIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ExperimentIds) {
		return nil, false
	}
	return o.ExperimentIds, true
}

// HasExperimentIds returns a boolean if a field has been set.
func (o *FeedResponse) HasExperimentIds() bool {
	if o != nil && !IsNil(o.ExperimentIds) {
		return true
	}

	return false
}

// SetExperimentIds gets a reference to the given []int64 and assigns it to the ExperimentIds field.
func (o *FeedResponse) SetExperimentIds(v []int64) {
	o.ExperimentIds = v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *FeedResponse) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *FeedResponse) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *FeedResponse) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

// GetServerTimestamp returns the ServerTimestamp field value
func (o *FeedResponse) GetServerTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServerTimestamp
}

// GetServerTimestampOk returns a tuple with the ServerTimestamp field value
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetServerTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerTimestamp, true
}

// SetServerTimestamp sets field value
func (o *FeedResponse) SetServerTimestamp(v int32) {
	o.ServerTimestamp = v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *FeedResponse) GetResults() []FeedResult {
	if o == nil || IsNil(o.Results) {
		var ret []FeedResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetResultsOk() ([]FeedResult, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *FeedResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []FeedResult and assigns it to the Results field.
func (o *FeedResponse) SetResults(v []FeedResult) {
	o.Results = v
}

// GetBackendTimeMillis returns the BackendTimeMillis field value if set, zero value otherwise.
func (o *FeedResponse) GetBackendTimeMillis() int64 {
	if o == nil || IsNil(o.BackendTimeMillis) {
		var ret int64
		return ret
	}
	return *o.BackendTimeMillis
}

// GetBackendTimeMillisOk returns a tuple with the BackendTimeMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetBackendTimeMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.BackendTimeMillis) {
		return nil, false
	}
	return o.BackendTimeMillis, true
}

// HasBackendTimeMillis returns a boolean if a field has been set.
func (o *FeedResponse) HasBackendTimeMillis() bool {
	if o != nil && !IsNil(o.BackendTimeMillis) {
		return true
	}

	return false
}

// SetBackendTimeMillis gets a reference to the given int64 and assigns it to the BackendTimeMillis field.
func (o *FeedResponse) SetBackendTimeMillis(v int64) {
	o.BackendTimeMillis = &v
}

// GetServerBuildVersion returns the ServerBuildVersion field value if set, zero value otherwise.
func (o *FeedResponse) GetServerBuildVersion() string {
	if o == nil || IsNil(o.ServerBuildVersion) {
		var ret string
		return ret
	}
	return *o.ServerBuildVersion
}

// GetServerBuildVersionOk returns a tuple with the ServerBuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetServerBuildVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerBuildVersion) {
		return nil, false
	}
	return o.ServerBuildVersion, true
}

// HasServerBuildVersion returns a boolean if a field has been set.
func (o *FeedResponse) HasServerBuildVersion() bool {
	if o != nil && !IsNil(o.ServerBuildVersion) {
		return true
	}

	return false
}

// SetServerBuildVersion gets a reference to the given string and assigns it to the ServerBuildVersion field.
func (o *FeedResponse) SetServerBuildVersion(v string) {
	o.ServerBuildVersion = &v
}

// GetDatasourceAffinity returns the DatasourceAffinity field value if set, zero value otherwise.
func (o *FeedResponse) GetDatasourceAffinity() map[string]float32 {
	if o == nil || IsNil(o.DatasourceAffinity) {
		var ret map[string]float32
		return ret
	}
	return *o.DatasourceAffinity
}

// GetDatasourceAffinityOk returns a tuple with the DatasourceAffinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetDatasourceAffinityOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.DatasourceAffinity) {
		return nil, false
	}
	return o.DatasourceAffinity, true
}

// HasDatasourceAffinity returns a boolean if a field has been set.
func (o *FeedResponse) HasDatasourceAffinity() bool {
	if o != nil && !IsNil(o.DatasourceAffinity) {
		return true
	}

	return false
}

// SetDatasourceAffinity gets a reference to the given map[string]float32 and assigns it to the DatasourceAffinity field.
func (o *FeedResponse) SetDatasourceAffinity(v map[string]float32) {
	o.DatasourceAffinity = &v
}

// GetDebugInfo returns the DebugInfo field value if set, zero value otherwise.
func (o *FeedResponse) GetDebugInfo() FeedDebugInfo {
	if o == nil || IsNil(o.DebugInfo) {
		var ret FeedDebugInfo
		return ret
	}
	return *o.DebugInfo
}

// GetDebugInfoOk returns a tuple with the DebugInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetDebugInfoOk() (*FeedDebugInfo, bool) {
	if o == nil || IsNil(o.DebugInfo) {
		return nil, false
	}
	return o.DebugInfo, true
}

// HasDebugInfo returns a boolean if a field has been set.
func (o *FeedResponse) HasDebugInfo() bool {
	if o != nil && !IsNil(o.DebugInfo) {
		return true
	}

	return false
}

// SetDebugInfo gets a reference to the given FeedDebugInfo and assigns it to the DebugInfo field.
func (o *FeedResponse) SetDebugInfo(v FeedDebugInfo) {
	o.DebugInfo = &v
}

// GetManualFeedbackSignals returns the ManualFeedbackSignals field value if set, zero value otherwise.
func (o *FeedResponse) GetManualFeedbackSignals() FeedManualFeedback {
	if o == nil || IsNil(o.ManualFeedbackSignals) {
		var ret FeedManualFeedback
		return ret
	}
	return *o.ManualFeedbackSignals
}

// GetManualFeedbackSignalsOk returns a tuple with the ManualFeedbackSignals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetManualFeedbackSignalsOk() (*FeedManualFeedback, bool) {
	if o == nil || IsNil(o.ManualFeedbackSignals) {
		return nil, false
	}
	return o.ManualFeedbackSignals, true
}

// HasManualFeedbackSignals returns a boolean if a field has been set.
func (o *FeedResponse) HasManualFeedbackSignals() bool {
	if o != nil && !IsNil(o.ManualFeedbackSignals) {
		return true
	}

	return false
}

// SetManualFeedbackSignals gets a reference to the given FeedManualFeedback and assigns it to the ManualFeedbackSignals field.
func (o *FeedResponse) SetManualFeedbackSignals(v FeedManualFeedback) {
	o.ManualFeedbackSignals = &v
}

// GetCompanyResourcesCollectionId returns the CompanyResourcesCollectionId field value if set, zero value otherwise.
func (o *FeedResponse) GetCompanyResourcesCollectionId() int32 {
	if o == nil || IsNil(o.CompanyResourcesCollectionId) {
		var ret int32
		return ret
	}
	return *o.CompanyResourcesCollectionId
}

// GetCompanyResourcesCollectionIdOk returns a tuple with the CompanyResourcesCollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetCompanyResourcesCollectionIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CompanyResourcesCollectionId) {
		return nil, false
	}
	return o.CompanyResourcesCollectionId, true
}

// HasCompanyResourcesCollectionId returns a boolean if a field has been set.
func (o *FeedResponse) HasCompanyResourcesCollectionId() bool {
	if o != nil && !IsNil(o.CompanyResourcesCollectionId) {
		return true
	}

	return false
}

// SetCompanyResourcesCollectionId gets a reference to the given int32 and assigns it to the CompanyResourcesCollectionId field.
func (o *FeedResponse) SetCompanyResourcesCollectionId(v int32) {
	o.CompanyResourcesCollectionId = &v
}

// GetFacetResults returns the FacetResults field value if set, zero value otherwise.
func (o *FeedResponse) GetFacetResults() map[string][]FacetResult {
	if o == nil || IsNil(o.FacetResults) {
		var ret map[string][]FacetResult
		return ret
	}
	return *o.FacetResults
}

// GetFacetResultsOk returns a tuple with the FacetResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetFacetResultsOk() (*map[string][]FacetResult, bool) {
	if o == nil || IsNil(o.FacetResults) {
		return nil, false
	}
	return o.FacetResults, true
}

// HasFacetResults returns a boolean if a field has been set.
func (o *FeedResponse) HasFacetResults() bool {
	if o != nil && !IsNil(o.FacetResults) {
		return true
	}

	return false
}

// SetFacetResults gets a reference to the given map[string][]FacetResult and assigns it to the FacetResults field.
func (o *FeedResponse) SetFacetResults(v map[string][]FacetResult) {
	o.FacetResults = &v
}

// GetMentionsTimeWindowInHours returns the MentionsTimeWindowInHours field value if set, zero value otherwise.
func (o *FeedResponse) GetMentionsTimeWindowInHours() int32 {
	if o == nil || IsNil(o.MentionsTimeWindowInHours) {
		var ret int32
		return ret
	}
	return *o.MentionsTimeWindowInHours
}

// GetMentionsTimeWindowInHoursOk returns a tuple with the MentionsTimeWindowInHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedResponse) GetMentionsTimeWindowInHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.MentionsTimeWindowInHours) {
		return nil, false
	}
	return o.MentionsTimeWindowInHours, true
}

// HasMentionsTimeWindowInHours returns a boolean if a field has been set.
func (o *FeedResponse) HasMentionsTimeWindowInHours() bool {
	if o != nil && !IsNil(o.MentionsTimeWindowInHours) {
		return true
	}

	return false
}

// SetMentionsTimeWindowInHours gets a reference to the given int32 and assigns it to the MentionsTimeWindowInHours field.
func (o *FeedResponse) SetMentionsTimeWindowInHours(v int32) {
	o.MentionsTimeWindowInHours = &v
}

func (o FeedResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExperimentIds) {
		toSerialize["experimentIds"] = o.ExperimentIds
	}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	toSerialize["serverTimestamp"] = o.ServerTimestamp
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.BackendTimeMillis) {
		toSerialize["backendTimeMillis"] = o.BackendTimeMillis
	}
	if !IsNil(o.ServerBuildVersion) {
		toSerialize["serverBuildVersion"] = o.ServerBuildVersion
	}
	if !IsNil(o.DatasourceAffinity) {
		toSerialize["datasourceAffinity"] = o.DatasourceAffinity
	}
	if !IsNil(o.DebugInfo) {
		toSerialize["debugInfo"] = o.DebugInfo
	}
	if !IsNil(o.ManualFeedbackSignals) {
		toSerialize["manualFeedbackSignals"] = o.ManualFeedbackSignals
	}
	if !IsNil(o.CompanyResourcesCollectionId) {
		toSerialize["companyResourcesCollectionId"] = o.CompanyResourcesCollectionId
	}
	if !IsNil(o.FacetResults) {
		toSerialize["facetResults"] = o.FacetResults
	}
	if !IsNil(o.MentionsTimeWindowInHours) {
		toSerialize["mentionsTimeWindowInHours"] = o.MentionsTimeWindowInHours
	}
	return toSerialize, nil
}

type NullableFeedResponse struct {
	value *FeedResponse
	isSet bool
}

func (v NullableFeedResponse) Get() *FeedResponse {
	return v.value
}

func (v *NullableFeedResponse) Set(val *FeedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedResponse(val *FeedResponse) *NullableFeedResponse {
	return &NullableFeedResponse{value: val, isSet: true}
}

func (v NullableFeedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


