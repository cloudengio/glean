/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AnonymousEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnonymousEvent{}

// AnonymousEvent A generic, light-weight calendar event.
type AnonymousEvent struct {
	Time *TimeInterval `json:"time,omitempty"`
	// The nature of the event, for example \"out of office\".
	EventType *string `json:"eventType,omitempty"`
}

// NewAnonymousEvent instantiates a new AnonymousEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnonymousEvent() *AnonymousEvent {
	this := AnonymousEvent{}
	return &this
}

// NewAnonymousEventWithDefaults instantiates a new AnonymousEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnonymousEventWithDefaults() *AnonymousEvent {
	this := AnonymousEvent{}
	return &this
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *AnonymousEvent) GetTime() TimeInterval {
	if o == nil || IsNil(o.Time) {
		var ret TimeInterval
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnonymousEvent) GetTimeOk() (*TimeInterval, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *AnonymousEvent) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given TimeInterval and assigns it to the Time field.
func (o *AnonymousEvent) SetTime(v TimeInterval) {
	o.Time = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *AnonymousEvent) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnonymousEvent) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *AnonymousEvent) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *AnonymousEvent) SetEventType(v string) {
	o.EventType = &v
}

func (o AnonymousEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnonymousEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.EventType) {
		toSerialize["eventType"] = o.EventType
	}
	return toSerialize, nil
}

type NullableAnonymousEvent struct {
	value *AnonymousEvent
	isSet bool
}

func (v NullableAnonymousEvent) Get() *AnonymousEvent {
	return v.value
}

func (v *NullableAnonymousEvent) Set(val *AnonymousEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableAnonymousEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableAnonymousEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnonymousEvent(val *AnonymousEvent) *NullableAnonymousEvent {
	return &NullableAnonymousEvent{value: val, isSet: true}
}

func (v NullableAnonymousEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnonymousEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


