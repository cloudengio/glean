/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the PopoverConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PopoverConfig{}

// PopoverConfig struct for PopoverConfig
type PopoverConfig struct {
	DatumConfigs *map[string]DatumConfig `json:"datumConfigs,omitempty"`
	Keys []string `json:"keys,omitempty"`
	Separator *string `json:"separator,omitempty"`
	Collections *TagsConfig `json:"collections,omitempty"`
	Omit *bool `json:"omit,omitempty"`
	Person *string `json:"person,omitempty"`
	Placement *string `json:"placement,omitempty"`
	Title *string `json:"title,omitempty"`
}

// NewPopoverConfig instantiates a new PopoverConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPopoverConfig() *PopoverConfig {
	this := PopoverConfig{}
	return &this
}

// NewPopoverConfigWithDefaults instantiates a new PopoverConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPopoverConfigWithDefaults() *PopoverConfig {
	this := PopoverConfig{}
	return &this
}

// GetDatumConfigs returns the DatumConfigs field value if set, zero value otherwise.
func (o *PopoverConfig) GetDatumConfigs() map[string]DatumConfig {
	if o == nil || IsNil(o.DatumConfigs) {
		var ret map[string]DatumConfig
		return ret
	}
	return *o.DatumConfigs
}

// GetDatumConfigsOk returns a tuple with the DatumConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopoverConfig) GetDatumConfigsOk() (*map[string]DatumConfig, bool) {
	if o == nil || IsNil(o.DatumConfigs) {
		return nil, false
	}
	return o.DatumConfigs, true
}

// HasDatumConfigs returns a boolean if a field has been set.
func (o *PopoverConfig) HasDatumConfigs() bool {
	if o != nil && !IsNil(o.DatumConfigs) {
		return true
	}

	return false
}

// SetDatumConfigs gets a reference to the given map[string]DatumConfig and assigns it to the DatumConfigs field.
func (o *PopoverConfig) SetDatumConfigs(v map[string]DatumConfig) {
	o.DatumConfigs = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *PopoverConfig) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopoverConfig) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *PopoverConfig) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *PopoverConfig) SetKeys(v []string) {
	o.Keys = v
}

// GetSeparator returns the Separator field value if set, zero value otherwise.
func (o *PopoverConfig) GetSeparator() string {
	if o == nil || IsNil(o.Separator) {
		var ret string
		return ret
	}
	return *o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopoverConfig) GetSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Separator) {
		return nil, false
	}
	return o.Separator, true
}

// HasSeparator returns a boolean if a field has been set.
func (o *PopoverConfig) HasSeparator() bool {
	if o != nil && !IsNil(o.Separator) {
		return true
	}

	return false
}

// SetSeparator gets a reference to the given string and assigns it to the Separator field.
func (o *PopoverConfig) SetSeparator(v string) {
	o.Separator = &v
}

// GetCollections returns the Collections field value if set, zero value otherwise.
func (o *PopoverConfig) GetCollections() TagsConfig {
	if o == nil || IsNil(o.Collections) {
		var ret TagsConfig
		return ret
	}
	return *o.Collections
}

// GetCollectionsOk returns a tuple with the Collections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopoverConfig) GetCollectionsOk() (*TagsConfig, bool) {
	if o == nil || IsNil(o.Collections) {
		return nil, false
	}
	return o.Collections, true
}

// HasCollections returns a boolean if a field has been set.
func (o *PopoverConfig) HasCollections() bool {
	if o != nil && !IsNil(o.Collections) {
		return true
	}

	return false
}

// SetCollections gets a reference to the given TagsConfig and assigns it to the Collections field.
func (o *PopoverConfig) SetCollections(v TagsConfig) {
	o.Collections = &v
}

// GetOmit returns the Omit field value if set, zero value otherwise.
func (o *PopoverConfig) GetOmit() bool {
	if o == nil || IsNil(o.Omit) {
		var ret bool
		return ret
	}
	return *o.Omit
}

// GetOmitOk returns a tuple with the Omit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopoverConfig) GetOmitOk() (*bool, bool) {
	if o == nil || IsNil(o.Omit) {
		return nil, false
	}
	return o.Omit, true
}

// HasOmit returns a boolean if a field has been set.
func (o *PopoverConfig) HasOmit() bool {
	if o != nil && !IsNil(o.Omit) {
		return true
	}

	return false
}

// SetOmit gets a reference to the given bool and assigns it to the Omit field.
func (o *PopoverConfig) SetOmit(v bool) {
	o.Omit = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *PopoverConfig) GetPerson() string {
	if o == nil || IsNil(o.Person) {
		var ret string
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopoverConfig) GetPersonOk() (*string, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *PopoverConfig) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given string and assigns it to the Person field.
func (o *PopoverConfig) SetPerson(v string) {
	o.Person = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *PopoverConfig) GetPlacement() string {
	if o == nil || IsNil(o.Placement) {
		var ret string
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopoverConfig) GetPlacementOk() (*string, bool) {
	if o == nil || IsNil(o.Placement) {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *PopoverConfig) HasPlacement() bool {
	if o != nil && !IsNil(o.Placement) {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given string and assigns it to the Placement field.
func (o *PopoverConfig) SetPlacement(v string) {
	o.Placement = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PopoverConfig) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PopoverConfig) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PopoverConfig) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PopoverConfig) SetTitle(v string) {
	o.Title = &v
}

func (o PopoverConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PopoverConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatumConfigs) {
		toSerialize["datumConfigs"] = o.DatumConfigs
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Separator) {
		toSerialize["separator"] = o.Separator
	}
	if !IsNil(o.Collections) {
		toSerialize["collections"] = o.Collections
	}
	if !IsNil(o.Omit) {
		toSerialize["omit"] = o.Omit
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if !IsNil(o.Placement) {
		toSerialize["placement"] = o.Placement
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullablePopoverConfig struct {
	value *PopoverConfig
	isSet bool
}

func (v NullablePopoverConfig) Get() *PopoverConfig {
	return v.value
}

func (v *NullablePopoverConfig) Set(val *PopoverConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePopoverConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePopoverConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePopoverConfig(val *PopoverConfig) *NullablePopoverConfig {
	return &NullablePopoverConfig{value: val, isSet: true}
}

func (v NullablePopoverConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePopoverConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


