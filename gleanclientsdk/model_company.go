/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Company type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Company{}

// Company struct for Company
type Company struct {
	// User-friendly display name.
	Name string `json:"name"`
	// Link to internal company company profile.
	ProfileUrl *string `json:"profileUrl,omitempty"`
	// Link to company's associated websites.
	WebsiteUrls []string `json:"websiteUrls,omitempty"`
	// The URL of the company's logo. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs).
	LogoUrl *string `json:"logoUrl,omitempty"`
	// User facing string representing the company's location.
	Location *string `json:"location,omitempty"`
	// Phone number as a number string.
	Phone *string `json:"phone,omitempty"`
	// Fax number as a number string.
	Fax *string `json:"fax,omitempty"`
	// User facing string representing the company's industry.
	Industry *string `json:"industry,omitempty"`
	// Average company's annual revenue for reference.
	AnnualRevenue *float64 `json:"annualRevenue,omitempty"`
	// Average company's number of employees for reference.
	NumberOfEmployees *int64 `json:"numberOfEmployees,omitempty"`
	// Company's stock symbol if company is public.
	StockSymbol *string `json:"stockSymbol,omitempty"`
	// The date when the company was founded.
	FoundedDate *string `json:"foundedDate,omitempty"`
	// User facing description of company.
	About *string `json:"about,omitempty"`
}

// NewCompany instantiates a new Company object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompany(name string) *Company {
	this := Company{}
	this.Name = name
	return &this
}

// NewCompanyWithDefaults instantiates a new Company object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompanyWithDefaults() *Company {
	this := Company{}
	return &this
}

// GetName returns the Name field value
func (o *Company) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Company) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Company) SetName(v string) {
	o.Name = v
}

// GetProfileUrl returns the ProfileUrl field value if set, zero value otherwise.
func (o *Company) GetProfileUrl() string {
	if o == nil || IsNil(o.ProfileUrl) {
		var ret string
		return ret
	}
	return *o.ProfileUrl
}

// GetProfileUrlOk returns a tuple with the ProfileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetProfileUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ProfileUrl) {
		return nil, false
	}
	return o.ProfileUrl, true
}

// HasProfileUrl returns a boolean if a field has been set.
func (o *Company) HasProfileUrl() bool {
	if o != nil && !IsNil(o.ProfileUrl) {
		return true
	}

	return false
}

// SetProfileUrl gets a reference to the given string and assigns it to the ProfileUrl field.
func (o *Company) SetProfileUrl(v string) {
	o.ProfileUrl = &v
}

// GetWebsiteUrls returns the WebsiteUrls field value if set, zero value otherwise.
func (o *Company) GetWebsiteUrls() []string {
	if o == nil || IsNil(o.WebsiteUrls) {
		var ret []string
		return ret
	}
	return o.WebsiteUrls
}

// GetWebsiteUrlsOk returns a tuple with the WebsiteUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetWebsiteUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.WebsiteUrls) {
		return nil, false
	}
	return o.WebsiteUrls, true
}

// HasWebsiteUrls returns a boolean if a field has been set.
func (o *Company) HasWebsiteUrls() bool {
	if o != nil && !IsNil(o.WebsiteUrls) {
		return true
	}

	return false
}

// SetWebsiteUrls gets a reference to the given []string and assigns it to the WebsiteUrls field.
func (o *Company) SetWebsiteUrls(v []string) {
	o.WebsiteUrls = v
}

// GetLogoUrl returns the LogoUrl field value if set, zero value otherwise.
func (o *Company) GetLogoUrl() string {
	if o == nil || IsNil(o.LogoUrl) {
		var ret string
		return ret
	}
	return *o.LogoUrl
}

// GetLogoUrlOk returns a tuple with the LogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.LogoUrl) {
		return nil, false
	}
	return o.LogoUrl, true
}

// HasLogoUrl returns a boolean if a field has been set.
func (o *Company) HasLogoUrl() bool {
	if o != nil && !IsNil(o.LogoUrl) {
		return true
	}

	return false
}

// SetLogoUrl gets a reference to the given string and assigns it to the LogoUrl field.
func (o *Company) SetLogoUrl(v string) {
	o.LogoUrl = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Company) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Company) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Company) SetLocation(v string) {
	o.Location = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *Company) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *Company) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *Company) SetPhone(v string) {
	o.Phone = &v
}

// GetFax returns the Fax field value if set, zero value otherwise.
func (o *Company) GetFax() string {
	if o == nil || IsNil(o.Fax) {
		var ret string
		return ret
	}
	return *o.Fax
}

// GetFaxOk returns a tuple with the Fax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetFaxOk() (*string, bool) {
	if o == nil || IsNil(o.Fax) {
		return nil, false
	}
	return o.Fax, true
}

// HasFax returns a boolean if a field has been set.
func (o *Company) HasFax() bool {
	if o != nil && !IsNil(o.Fax) {
		return true
	}

	return false
}

// SetFax gets a reference to the given string and assigns it to the Fax field.
func (o *Company) SetFax(v string) {
	o.Fax = &v
}

// GetIndustry returns the Industry field value if set, zero value otherwise.
func (o *Company) GetIndustry() string {
	if o == nil || IsNil(o.Industry) {
		var ret string
		return ret
	}
	return *o.Industry
}

// GetIndustryOk returns a tuple with the Industry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetIndustryOk() (*string, bool) {
	if o == nil || IsNil(o.Industry) {
		return nil, false
	}
	return o.Industry, true
}

// HasIndustry returns a boolean if a field has been set.
func (o *Company) HasIndustry() bool {
	if o != nil && !IsNil(o.Industry) {
		return true
	}

	return false
}

// SetIndustry gets a reference to the given string and assigns it to the Industry field.
func (o *Company) SetIndustry(v string) {
	o.Industry = &v
}

// GetAnnualRevenue returns the AnnualRevenue field value if set, zero value otherwise.
func (o *Company) GetAnnualRevenue() float64 {
	if o == nil || IsNil(o.AnnualRevenue) {
		var ret float64
		return ret
	}
	return *o.AnnualRevenue
}

// GetAnnualRevenueOk returns a tuple with the AnnualRevenue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetAnnualRevenueOk() (*float64, bool) {
	if o == nil || IsNil(o.AnnualRevenue) {
		return nil, false
	}
	return o.AnnualRevenue, true
}

// HasAnnualRevenue returns a boolean if a field has been set.
func (o *Company) HasAnnualRevenue() bool {
	if o != nil && !IsNil(o.AnnualRevenue) {
		return true
	}

	return false
}

// SetAnnualRevenue gets a reference to the given float64 and assigns it to the AnnualRevenue field.
func (o *Company) SetAnnualRevenue(v float64) {
	o.AnnualRevenue = &v
}

// GetNumberOfEmployees returns the NumberOfEmployees field value if set, zero value otherwise.
func (o *Company) GetNumberOfEmployees() int64 {
	if o == nil || IsNil(o.NumberOfEmployees) {
		var ret int64
		return ret
	}
	return *o.NumberOfEmployees
}

// GetNumberOfEmployeesOk returns a tuple with the NumberOfEmployees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetNumberOfEmployeesOk() (*int64, bool) {
	if o == nil || IsNil(o.NumberOfEmployees) {
		return nil, false
	}
	return o.NumberOfEmployees, true
}

// HasNumberOfEmployees returns a boolean if a field has been set.
func (o *Company) HasNumberOfEmployees() bool {
	if o != nil && !IsNil(o.NumberOfEmployees) {
		return true
	}

	return false
}

// SetNumberOfEmployees gets a reference to the given int64 and assigns it to the NumberOfEmployees field.
func (o *Company) SetNumberOfEmployees(v int64) {
	o.NumberOfEmployees = &v
}

// GetStockSymbol returns the StockSymbol field value if set, zero value otherwise.
func (o *Company) GetStockSymbol() string {
	if o == nil || IsNil(o.StockSymbol) {
		var ret string
		return ret
	}
	return *o.StockSymbol
}

// GetStockSymbolOk returns a tuple with the StockSymbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetStockSymbolOk() (*string, bool) {
	if o == nil || IsNil(o.StockSymbol) {
		return nil, false
	}
	return o.StockSymbol, true
}

// HasStockSymbol returns a boolean if a field has been set.
func (o *Company) HasStockSymbol() bool {
	if o != nil && !IsNil(o.StockSymbol) {
		return true
	}

	return false
}

// SetStockSymbol gets a reference to the given string and assigns it to the StockSymbol field.
func (o *Company) SetStockSymbol(v string) {
	o.StockSymbol = &v
}

// GetFoundedDate returns the FoundedDate field value if set, zero value otherwise.
func (o *Company) GetFoundedDate() string {
	if o == nil || IsNil(o.FoundedDate) {
		var ret string
		return ret
	}
	return *o.FoundedDate
}

// GetFoundedDateOk returns a tuple with the FoundedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetFoundedDateOk() (*string, bool) {
	if o == nil || IsNil(o.FoundedDate) {
		return nil, false
	}
	return o.FoundedDate, true
}

// HasFoundedDate returns a boolean if a field has been set.
func (o *Company) HasFoundedDate() bool {
	if o != nil && !IsNil(o.FoundedDate) {
		return true
	}

	return false
}

// SetFoundedDate gets a reference to the given string and assigns it to the FoundedDate field.
func (o *Company) SetFoundedDate(v string) {
	o.FoundedDate = &v
}

// GetAbout returns the About field value if set, zero value otherwise.
func (o *Company) GetAbout() string {
	if o == nil || IsNil(o.About) {
		var ret string
		return ret
	}
	return *o.About
}

// GetAboutOk returns a tuple with the About field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Company) GetAboutOk() (*string, bool) {
	if o == nil || IsNil(o.About) {
		return nil, false
	}
	return o.About, true
}

// HasAbout returns a boolean if a field has been set.
func (o *Company) HasAbout() bool {
	if o != nil && !IsNil(o.About) {
		return true
	}

	return false
}

// SetAbout gets a reference to the given string and assigns it to the About field.
func (o *Company) SetAbout(v string) {
	o.About = &v
}

func (o Company) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Company) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.ProfileUrl) {
		toSerialize["profileUrl"] = o.ProfileUrl
	}
	if !IsNil(o.WebsiteUrls) {
		toSerialize["websiteUrls"] = o.WebsiteUrls
	}
	if !IsNil(o.LogoUrl) {
		toSerialize["logoUrl"] = o.LogoUrl
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Fax) {
		toSerialize["fax"] = o.Fax
	}
	if !IsNil(o.Industry) {
		toSerialize["industry"] = o.Industry
	}
	if !IsNil(o.AnnualRevenue) {
		toSerialize["annualRevenue"] = o.AnnualRevenue
	}
	if !IsNil(o.NumberOfEmployees) {
		toSerialize["numberOfEmployees"] = o.NumberOfEmployees
	}
	if !IsNil(o.StockSymbol) {
		toSerialize["stockSymbol"] = o.StockSymbol
	}
	if !IsNil(o.FoundedDate) {
		toSerialize["foundedDate"] = o.FoundedDate
	}
	if !IsNil(o.About) {
		toSerialize["about"] = o.About
	}
	return toSerialize, nil
}

type NullableCompany struct {
	value *Company
	isSet bool
}

func (v NullableCompany) Get() *Company {
	return v.value
}

func (v *NullableCompany) Set(val *Company) {
	v.value = val
	v.isSet = true
}

func (v NullableCompany) IsSet() bool {
	return v.isSet
}

func (v *NullableCompany) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompany(val *Company) *NullableCompany {
	return &NullableCompany{value: val, isSet: true}
}

func (v NullableCompany) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompany) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


