/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ExtractedQnA type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtractedQnA{}

// ExtractedQnA struct for ExtractedQnA
type ExtractedQnA struct {
	// Heading text that was matched to produce this result.
	Heading *string `json:"heading,omitempty"`
	// Question text that was matched to produce this result.
	Question *string `json:"question,omitempty"`
	QuestionResult *SearchResult `json:"questionResult,omitempty"`
}

// NewExtractedQnA instantiates a new ExtractedQnA object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtractedQnA() *ExtractedQnA {
	this := ExtractedQnA{}
	return &this
}

// NewExtractedQnAWithDefaults instantiates a new ExtractedQnA object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtractedQnAWithDefaults() *ExtractedQnA {
	this := ExtractedQnA{}
	return &this
}

// GetHeading returns the Heading field value if set, zero value otherwise.
func (o *ExtractedQnA) GetHeading() string {
	if o == nil || IsNil(o.Heading) {
		var ret string
		return ret
	}
	return *o.Heading
}

// GetHeadingOk returns a tuple with the Heading field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractedQnA) GetHeadingOk() (*string, bool) {
	if o == nil || IsNil(o.Heading) {
		return nil, false
	}
	return o.Heading, true
}

// HasHeading returns a boolean if a field has been set.
func (o *ExtractedQnA) HasHeading() bool {
	if o != nil && !IsNil(o.Heading) {
		return true
	}

	return false
}

// SetHeading gets a reference to the given string and assigns it to the Heading field.
func (o *ExtractedQnA) SetHeading(v string) {
	o.Heading = &v
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *ExtractedQnA) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractedQnA) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *ExtractedQnA) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *ExtractedQnA) SetQuestion(v string) {
	o.Question = &v
}

// GetQuestionResult returns the QuestionResult field value if set, zero value otherwise.
func (o *ExtractedQnA) GetQuestionResult() SearchResult {
	if o == nil || IsNil(o.QuestionResult) {
		var ret SearchResult
		return ret
	}
	return *o.QuestionResult
}

// GetQuestionResultOk returns a tuple with the QuestionResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtractedQnA) GetQuestionResultOk() (*SearchResult, bool) {
	if o == nil || IsNil(o.QuestionResult) {
		return nil, false
	}
	return o.QuestionResult, true
}

// HasQuestionResult returns a boolean if a field has been set.
func (o *ExtractedQnA) HasQuestionResult() bool {
	if o != nil && !IsNil(o.QuestionResult) {
		return true
	}

	return false
}

// SetQuestionResult gets a reference to the given SearchResult and assigns it to the QuestionResult field.
func (o *ExtractedQnA) SetQuestionResult(v SearchResult) {
	o.QuestionResult = &v
}

func (o ExtractedQnA) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtractedQnA) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Heading) {
		toSerialize["heading"] = o.Heading
	}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.QuestionResult) {
		toSerialize["questionResult"] = o.QuestionResult
	}
	return toSerialize, nil
}

type NullableExtractedQnA struct {
	value *ExtractedQnA
	isSet bool
}

func (v NullableExtractedQnA) Get() *ExtractedQnA {
	return v.value
}

func (v *NullableExtractedQnA) Set(val *ExtractedQnA) {
	v.value = val
	v.isSet = true
}

func (v NullableExtractedQnA) IsSet() bool {
	return v.isSet
}

func (v *NullableExtractedQnA) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtractedQnA(val *ExtractedQnA) *NullableExtractedQnA {
	return &NullableExtractedQnA{value: val, isSet: true}
}

func (v NullableExtractedQnA) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtractedQnA) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


