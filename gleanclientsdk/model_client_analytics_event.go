/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ClientAnalyticsEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientAnalyticsEvent{}

// ClientAnalyticsEvent struct for ClientAnalyticsEvent
type ClientAnalyticsEvent struct {
	TrackingParams *ClientAnalyticsEventTrackingParams `json:"trackingParams,omitempty"`
	// Additional string parameters associated with the analytics event, contents will depend on event category and type.
	StringParams *map[string]string `json:"stringParams,omitempty"`
	// Additional numerical parameters associated with the analytics event, contents will depend on event category and type.
	NumberParams *map[string]float32 `json:"numberParams,omitempty"`
	// Additional boolean parameters associated with the analytics event, contents will depend on event category and type.
	BoolParams *map[string]bool `json:"boolParams,omitempty"`
}

// NewClientAnalyticsEvent instantiates a new ClientAnalyticsEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientAnalyticsEvent() *ClientAnalyticsEvent {
	this := ClientAnalyticsEvent{}
	return &this
}

// NewClientAnalyticsEventWithDefaults instantiates a new ClientAnalyticsEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientAnalyticsEventWithDefaults() *ClientAnalyticsEvent {
	this := ClientAnalyticsEvent{}
	return &this
}

// GetTrackingParams returns the TrackingParams field value if set, zero value otherwise.
func (o *ClientAnalyticsEvent) GetTrackingParams() ClientAnalyticsEventTrackingParams {
	if o == nil || IsNil(o.TrackingParams) {
		var ret ClientAnalyticsEventTrackingParams
		return ret
	}
	return *o.TrackingParams
}

// GetTrackingParamsOk returns a tuple with the TrackingParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAnalyticsEvent) GetTrackingParamsOk() (*ClientAnalyticsEventTrackingParams, bool) {
	if o == nil || IsNil(o.TrackingParams) {
		return nil, false
	}
	return o.TrackingParams, true
}

// HasTrackingParams returns a boolean if a field has been set.
func (o *ClientAnalyticsEvent) HasTrackingParams() bool {
	if o != nil && !IsNil(o.TrackingParams) {
		return true
	}

	return false
}

// SetTrackingParams gets a reference to the given ClientAnalyticsEventTrackingParams and assigns it to the TrackingParams field.
func (o *ClientAnalyticsEvent) SetTrackingParams(v ClientAnalyticsEventTrackingParams) {
	o.TrackingParams = &v
}

// GetStringParams returns the StringParams field value if set, zero value otherwise.
func (o *ClientAnalyticsEvent) GetStringParams() map[string]string {
	if o == nil || IsNil(o.StringParams) {
		var ret map[string]string
		return ret
	}
	return *o.StringParams
}

// GetStringParamsOk returns a tuple with the StringParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAnalyticsEvent) GetStringParamsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.StringParams) {
		return nil, false
	}
	return o.StringParams, true
}

// HasStringParams returns a boolean if a field has been set.
func (o *ClientAnalyticsEvent) HasStringParams() bool {
	if o != nil && !IsNil(o.StringParams) {
		return true
	}

	return false
}

// SetStringParams gets a reference to the given map[string]string and assigns it to the StringParams field.
func (o *ClientAnalyticsEvent) SetStringParams(v map[string]string) {
	o.StringParams = &v
}

// GetNumberParams returns the NumberParams field value if set, zero value otherwise.
func (o *ClientAnalyticsEvent) GetNumberParams() map[string]float32 {
	if o == nil || IsNil(o.NumberParams) {
		var ret map[string]float32
		return ret
	}
	return *o.NumberParams
}

// GetNumberParamsOk returns a tuple with the NumberParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAnalyticsEvent) GetNumberParamsOk() (*map[string]float32, bool) {
	if o == nil || IsNil(o.NumberParams) {
		return nil, false
	}
	return o.NumberParams, true
}

// HasNumberParams returns a boolean if a field has been set.
func (o *ClientAnalyticsEvent) HasNumberParams() bool {
	if o != nil && !IsNil(o.NumberParams) {
		return true
	}

	return false
}

// SetNumberParams gets a reference to the given map[string]float32 and assigns it to the NumberParams field.
func (o *ClientAnalyticsEvent) SetNumberParams(v map[string]float32) {
	o.NumberParams = &v
}

// GetBoolParams returns the BoolParams field value if set, zero value otherwise.
func (o *ClientAnalyticsEvent) GetBoolParams() map[string]bool {
	if o == nil || IsNil(o.BoolParams) {
		var ret map[string]bool
		return ret
	}
	return *o.BoolParams
}

// GetBoolParamsOk returns a tuple with the BoolParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAnalyticsEvent) GetBoolParamsOk() (*map[string]bool, bool) {
	if o == nil || IsNil(o.BoolParams) {
		return nil, false
	}
	return o.BoolParams, true
}

// HasBoolParams returns a boolean if a field has been set.
func (o *ClientAnalyticsEvent) HasBoolParams() bool {
	if o != nil && !IsNil(o.BoolParams) {
		return true
	}

	return false
}

// SetBoolParams gets a reference to the given map[string]bool and assigns it to the BoolParams field.
func (o *ClientAnalyticsEvent) SetBoolParams(v map[string]bool) {
	o.BoolParams = &v
}

func (o ClientAnalyticsEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientAnalyticsEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackingParams) {
		toSerialize["trackingParams"] = o.TrackingParams
	}
	if !IsNil(o.StringParams) {
		toSerialize["stringParams"] = o.StringParams
	}
	if !IsNil(o.NumberParams) {
		toSerialize["numberParams"] = o.NumberParams
	}
	if !IsNil(o.BoolParams) {
		toSerialize["boolParams"] = o.BoolParams
	}
	return toSerialize, nil
}

type NullableClientAnalyticsEvent struct {
	value *ClientAnalyticsEvent
	isSet bool
}

func (v NullableClientAnalyticsEvent) Get() *ClientAnalyticsEvent {
	return v.value
}

func (v *NullableClientAnalyticsEvent) Set(val *ClientAnalyticsEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableClientAnalyticsEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableClientAnalyticsEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientAnalyticsEvent(val *ClientAnalyticsEvent) *NullableClientAnalyticsEvent {
	return &NullableClientAnalyticsEvent{value: val, isSet: true}
}

func (v NullableClientAnalyticsEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientAnalyticsEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


