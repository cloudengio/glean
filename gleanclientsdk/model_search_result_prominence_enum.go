/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// SearchResultProminenceEnum The level of visual distinction that should be given to a result. HERO - A high-confidence result that should feature prominently on the page. PROMOTED - May not be the best result but should be given additional visual distinction. STANDARD - Should not be distinct from any other results. 
type SearchResultProminenceEnum string

// List of SearchResultProminenceEnum
const (
	HERO SearchResultProminenceEnum = "HERO"
	PROMOTED SearchResultProminenceEnum = "PROMOTED"
	STANDARD SearchResultProminenceEnum = "STANDARD"
)

// All allowed values of SearchResultProminenceEnum enum
var AllowedSearchResultProminenceEnumEnumValues = []SearchResultProminenceEnum{
	"HERO",
	"PROMOTED",
	"STANDARD",
}

func (v *SearchResultProminenceEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchResultProminenceEnum(value)
	for _, existing := range AllowedSearchResultProminenceEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchResultProminenceEnum", value)
}

// NewSearchResultProminenceEnumFromValue returns a pointer to a valid SearchResultProminenceEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchResultProminenceEnumFromValue(v string) (*SearchResultProminenceEnum, error) {
	ev := SearchResultProminenceEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchResultProminenceEnum: valid values are %v", v, AllowedSearchResultProminenceEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchResultProminenceEnum) IsValid() bool {
	for _, existing := range AllowedSearchResultProminenceEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchResultProminenceEnum value
func (v SearchResultProminenceEnum) Ptr() *SearchResultProminenceEnum {
	return &v
}

type NullableSearchResultProminenceEnum struct {
	value *SearchResultProminenceEnum
	isSet bool
}

func (v NullableSearchResultProminenceEnum) Get() *SearchResultProminenceEnum {
	return v.value
}

func (v *NullableSearchResultProminenceEnum) Set(val *SearchResultProminenceEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultProminenceEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultProminenceEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultProminenceEnum(val *SearchResultProminenceEnum) *NullableSearchResultProminenceEnum {
	return &NullableSearchResultProminenceEnum{value: val, isSet: true}
}

func (v NullableSearchResultProminenceEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultProminenceEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

