/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ObjectPropertyOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectPropertyOptions{}

// ObjectPropertyOptions Options for object properties.
type ObjectPropertyOptions struct {
	// The properties of the sub-object. These properties represent a nested object. For example, if this property represents a postal address, the subobjectProperties might be named street, city, and state.
	SubobjectProperties []PropertyDefinition `json:"subobjectProperties,omitempty"`
}

// NewObjectPropertyOptions instantiates a new ObjectPropertyOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectPropertyOptions() *ObjectPropertyOptions {
	this := ObjectPropertyOptions{}
	return &this
}

// NewObjectPropertyOptionsWithDefaults instantiates a new ObjectPropertyOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectPropertyOptionsWithDefaults() *ObjectPropertyOptions {
	this := ObjectPropertyOptions{}
	return &this
}

// GetSubobjectProperties returns the SubobjectProperties field value if set, zero value otherwise.
func (o *ObjectPropertyOptions) GetSubobjectProperties() []PropertyDefinition {
	if o == nil || IsNil(o.SubobjectProperties) {
		var ret []PropertyDefinition
		return ret
	}
	return o.SubobjectProperties
}

// GetSubobjectPropertiesOk returns a tuple with the SubobjectProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectPropertyOptions) GetSubobjectPropertiesOk() ([]PropertyDefinition, bool) {
	if o == nil || IsNil(o.SubobjectProperties) {
		return nil, false
	}
	return o.SubobjectProperties, true
}

// HasSubobjectProperties returns a boolean if a field has been set.
func (o *ObjectPropertyOptions) HasSubobjectProperties() bool {
	if o != nil && !IsNil(o.SubobjectProperties) {
		return true
	}

	return false
}

// SetSubobjectProperties gets a reference to the given []PropertyDefinition and assigns it to the SubobjectProperties field.
func (o *ObjectPropertyOptions) SetSubobjectProperties(v []PropertyDefinition) {
	o.SubobjectProperties = v
}

func (o ObjectPropertyOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectPropertyOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SubobjectProperties) {
		toSerialize["subobjectProperties"] = o.SubobjectProperties
	}
	return toSerialize, nil
}

type NullableObjectPropertyOptions struct {
	value *ObjectPropertyOptions
	isSet bool
}

func (v NullableObjectPropertyOptions) Get() *ObjectPropertyOptions {
	return v.value
}

func (v *NullableObjectPropertyOptions) Set(val *ObjectPropertyOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectPropertyOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectPropertyOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectPropertyOptions(val *ObjectPropertyOptions) *NullableObjectPropertyOptions {
	return &NullableObjectPropertyOptions{value: val, isSet: true}
}

func (v NullableObjectPropertyOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectPropertyOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


