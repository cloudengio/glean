/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DocumentDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentDefinition{}

// DocumentDefinition Indexable document structure
type DocumentDefinition struct {
	// Document title, in plain text, if present.
	Title *string `json:"title,omitempty"`
	// The container name for the content (Folder for example for file content).
	Container *string `json:"container,omitempty"`
	// This represents the datasource sepcific id of the container.
	ContainerDatasourceId *string `json:"containerDatasourceId,omitempty"`
	// This represents the object type of the container. It cannot have spaces or _
	ContainerObjectType *string `json:"containerObjectType,omitempty"`
	Datasource string `json:"datasource"`
	// The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _
	ObjectType *string `json:"objectType,omitempty"`
	// The permalink for viewing the document.
	ViewURL *string `json:"viewURL,omitempty"`
	// The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length.
	Id *string `json:"id,omitempty"`
	Summary *ContentDefinition `json:"summary,omitempty"`
	Body *ContentDefinition `json:"body,omitempty"`
	Author *UserReferenceDefinition `json:"author,omitempty"`
	Owner *UserReferenceDefinition `json:"owner,omitempty"`
	Permissions *DocumentPermissionsDefinition `json:"permissions,omitempty"`
	// The creation time, in epoch seconds.
	CreatedAt *int64 `json:"createdAt,omitempty"`
	// The last update time, in epoch seconds.
	UpdatedAt *int64 `json:"updatedAt,omitempty"`
	UpdatedBy *UserReferenceDefinition `json:"updatedBy,omitempty"`
	// Labels associated with the document.
	Tags []string `json:"tags,omitempty"`
	Interactions *DocumentInteractionsDefinition `json:"interactions,omitempty"`
	Status *string `json:"status,omitempty"`
	// Additional variations of the url that this document points to.
	AdditionalUrls []string `json:"additionalUrls,omitempty"`
	// Additional metadata properties of the document.
	CustomProperties []CustomProperty `json:"customProperties,omitempty"`
}

// NewDocumentDefinition instantiates a new DocumentDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentDefinition(datasource string) *DocumentDefinition {
	this := DocumentDefinition{}
	this.Datasource = datasource
	return &this
}

// NewDocumentDefinitionWithDefaults instantiates a new DocumentDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentDefinitionWithDefaults() *DocumentDefinition {
	this := DocumentDefinition{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *DocumentDefinition) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *DocumentDefinition) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *DocumentDefinition) SetTitle(v string) {
	o.Title = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *DocumentDefinition) GetContainer() string {
	if o == nil || IsNil(o.Container) {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetContainerOk() (*string, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *DocumentDefinition) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *DocumentDefinition) SetContainer(v string) {
	o.Container = &v
}

// GetContainerDatasourceId returns the ContainerDatasourceId field value if set, zero value otherwise.
func (o *DocumentDefinition) GetContainerDatasourceId() string {
	if o == nil || IsNil(o.ContainerDatasourceId) {
		var ret string
		return ret
	}
	return *o.ContainerDatasourceId
}

// GetContainerDatasourceIdOk returns a tuple with the ContainerDatasourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetContainerDatasourceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerDatasourceId) {
		return nil, false
	}
	return o.ContainerDatasourceId, true
}

// HasContainerDatasourceId returns a boolean if a field has been set.
func (o *DocumentDefinition) HasContainerDatasourceId() bool {
	if o != nil && !IsNil(o.ContainerDatasourceId) {
		return true
	}

	return false
}

// SetContainerDatasourceId gets a reference to the given string and assigns it to the ContainerDatasourceId field.
func (o *DocumentDefinition) SetContainerDatasourceId(v string) {
	o.ContainerDatasourceId = &v
}

// GetContainerObjectType returns the ContainerObjectType field value if set, zero value otherwise.
func (o *DocumentDefinition) GetContainerObjectType() string {
	if o == nil || IsNil(o.ContainerObjectType) {
		var ret string
		return ret
	}
	return *o.ContainerObjectType
}

// GetContainerObjectTypeOk returns a tuple with the ContainerObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetContainerObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ContainerObjectType) {
		return nil, false
	}
	return o.ContainerObjectType, true
}

// HasContainerObjectType returns a boolean if a field has been set.
func (o *DocumentDefinition) HasContainerObjectType() bool {
	if o != nil && !IsNil(o.ContainerObjectType) {
		return true
	}

	return false
}

// SetContainerObjectType gets a reference to the given string and assigns it to the ContainerObjectType field.
func (o *DocumentDefinition) SetContainerObjectType(v string) {
	o.ContainerObjectType = &v
}

// GetDatasource returns the Datasource field value
func (o *DocumentDefinition) GetDatasource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetDatasourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datasource, true
}

// SetDatasource sets field value
func (o *DocumentDefinition) SetDatasource(v string) {
	o.Datasource = v
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *DocumentDefinition) GetObjectType() string {
	if o == nil || IsNil(o.ObjectType) {
		var ret string
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetObjectTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *DocumentDefinition) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given string and assigns it to the ObjectType field.
func (o *DocumentDefinition) SetObjectType(v string) {
	o.ObjectType = &v
}

// GetViewURL returns the ViewURL field value if set, zero value otherwise.
func (o *DocumentDefinition) GetViewURL() string {
	if o == nil || IsNil(o.ViewURL) {
		var ret string
		return ret
	}
	return *o.ViewURL
}

// GetViewURLOk returns a tuple with the ViewURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetViewURLOk() (*string, bool) {
	if o == nil || IsNil(o.ViewURL) {
		return nil, false
	}
	return o.ViewURL, true
}

// HasViewURL returns a boolean if a field has been set.
func (o *DocumentDefinition) HasViewURL() bool {
	if o != nil && !IsNil(o.ViewURL) {
		return true
	}

	return false
}

// SetViewURL gets a reference to the given string and assigns it to the ViewURL field.
func (o *DocumentDefinition) SetViewURL(v string) {
	o.ViewURL = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DocumentDefinition) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DocumentDefinition) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DocumentDefinition) SetId(v string) {
	o.Id = &v
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *DocumentDefinition) GetSummary() ContentDefinition {
	if o == nil || IsNil(o.Summary) {
		var ret ContentDefinition
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetSummaryOk() (*ContentDefinition, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *DocumentDefinition) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given ContentDefinition and assigns it to the Summary field.
func (o *DocumentDefinition) SetSummary(v ContentDefinition) {
	o.Summary = &v
}

// GetBody returns the Body field value if set, zero value otherwise.
func (o *DocumentDefinition) GetBody() ContentDefinition {
	if o == nil || IsNil(o.Body) {
		var ret ContentDefinition
		return ret
	}
	return *o.Body
}

// GetBodyOk returns a tuple with the Body field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetBodyOk() (*ContentDefinition, bool) {
	if o == nil || IsNil(o.Body) {
		return nil, false
	}
	return o.Body, true
}

// HasBody returns a boolean if a field has been set.
func (o *DocumentDefinition) HasBody() bool {
	if o != nil && !IsNil(o.Body) {
		return true
	}

	return false
}

// SetBody gets a reference to the given ContentDefinition and assigns it to the Body field.
func (o *DocumentDefinition) SetBody(v ContentDefinition) {
	o.Body = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *DocumentDefinition) GetAuthor() UserReferenceDefinition {
	if o == nil || IsNil(o.Author) {
		var ret UserReferenceDefinition
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetAuthorOk() (*UserReferenceDefinition, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *DocumentDefinition) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given UserReferenceDefinition and assigns it to the Author field.
func (o *DocumentDefinition) SetAuthor(v UserReferenceDefinition) {
	o.Author = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *DocumentDefinition) GetOwner() UserReferenceDefinition {
	if o == nil || IsNil(o.Owner) {
		var ret UserReferenceDefinition
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetOwnerOk() (*UserReferenceDefinition, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *DocumentDefinition) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given UserReferenceDefinition and assigns it to the Owner field.
func (o *DocumentDefinition) SetOwner(v UserReferenceDefinition) {
	o.Owner = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *DocumentDefinition) GetPermissions() DocumentPermissionsDefinition {
	if o == nil || IsNil(o.Permissions) {
		var ret DocumentPermissionsDefinition
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetPermissionsOk() (*DocumentPermissionsDefinition, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *DocumentDefinition) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given DocumentPermissionsDefinition and assigns it to the Permissions field.
func (o *DocumentDefinition) SetPermissions(v DocumentPermissionsDefinition) {
	o.Permissions = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *DocumentDefinition) GetCreatedAt() int64 {
	if o == nil || IsNil(o.CreatedAt) {
		var ret int64
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetCreatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *DocumentDefinition) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given int64 and assigns it to the CreatedAt field.
func (o *DocumentDefinition) SetCreatedAt(v int64) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *DocumentDefinition) GetUpdatedAt() int64 {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret int64
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetUpdatedAtOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *DocumentDefinition) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given int64 and assigns it to the UpdatedAt field.
func (o *DocumentDefinition) SetUpdatedAt(v int64) {
	o.UpdatedAt = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *DocumentDefinition) GetUpdatedBy() UserReferenceDefinition {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret UserReferenceDefinition
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetUpdatedByOk() (*UserReferenceDefinition, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *DocumentDefinition) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UserReferenceDefinition and assigns it to the UpdatedBy field.
func (o *DocumentDefinition) SetUpdatedBy(v UserReferenceDefinition) {
	o.UpdatedBy = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *DocumentDefinition) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DocumentDefinition) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *DocumentDefinition) SetTags(v []string) {
	o.Tags = v
}

// GetInteractions returns the Interactions field value if set, zero value otherwise.
func (o *DocumentDefinition) GetInteractions() DocumentInteractionsDefinition {
	if o == nil || IsNil(o.Interactions) {
		var ret DocumentInteractionsDefinition
		return ret
	}
	return *o.Interactions
}

// GetInteractionsOk returns a tuple with the Interactions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetInteractionsOk() (*DocumentInteractionsDefinition, bool) {
	if o == nil || IsNil(o.Interactions) {
		return nil, false
	}
	return o.Interactions, true
}

// HasInteractions returns a boolean if a field has been set.
func (o *DocumentDefinition) HasInteractions() bool {
	if o != nil && !IsNil(o.Interactions) {
		return true
	}

	return false
}

// SetInteractions gets a reference to the given DocumentInteractionsDefinition and assigns it to the Interactions field.
func (o *DocumentDefinition) SetInteractions(v DocumentInteractionsDefinition) {
	o.Interactions = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DocumentDefinition) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DocumentDefinition) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DocumentDefinition) SetStatus(v string) {
	o.Status = &v
}

// GetAdditionalUrls returns the AdditionalUrls field value if set, zero value otherwise.
func (o *DocumentDefinition) GetAdditionalUrls() []string {
	if o == nil || IsNil(o.AdditionalUrls) {
		var ret []string
		return ret
	}
	return o.AdditionalUrls
}

// GetAdditionalUrlsOk returns a tuple with the AdditionalUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetAdditionalUrlsOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalUrls) {
		return nil, false
	}
	return o.AdditionalUrls, true
}

// HasAdditionalUrls returns a boolean if a field has been set.
func (o *DocumentDefinition) HasAdditionalUrls() bool {
	if o != nil && !IsNil(o.AdditionalUrls) {
		return true
	}

	return false
}

// SetAdditionalUrls gets a reference to the given []string and assigns it to the AdditionalUrls field.
func (o *DocumentDefinition) SetAdditionalUrls(v []string) {
	o.AdditionalUrls = v
}

// GetCustomProperties returns the CustomProperties field value if set, zero value otherwise.
func (o *DocumentDefinition) GetCustomProperties() []CustomProperty {
	if o == nil || IsNil(o.CustomProperties) {
		var ret []CustomProperty
		return ret
	}
	return o.CustomProperties
}

// GetCustomPropertiesOk returns a tuple with the CustomProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentDefinition) GetCustomPropertiesOk() ([]CustomProperty, bool) {
	if o == nil || IsNil(o.CustomProperties) {
		return nil, false
	}
	return o.CustomProperties, true
}

// HasCustomProperties returns a boolean if a field has been set.
func (o *DocumentDefinition) HasCustomProperties() bool {
	if o != nil && !IsNil(o.CustomProperties) {
		return true
	}

	return false
}

// SetCustomProperties gets a reference to the given []CustomProperty and assigns it to the CustomProperties field.
func (o *DocumentDefinition) SetCustomProperties(v []CustomProperty) {
	o.CustomProperties = v
}

func (o DocumentDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !IsNil(o.ContainerDatasourceId) {
		toSerialize["containerDatasourceId"] = o.ContainerDatasourceId
	}
	if !IsNil(o.ContainerObjectType) {
		toSerialize["containerObjectType"] = o.ContainerObjectType
	}
	toSerialize["datasource"] = o.Datasource
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if !IsNil(o.ViewURL) {
		toSerialize["viewURL"] = o.ViewURL
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.Body) {
		toSerialize["body"] = o.Body
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updatedAt"] = o.UpdatedAt
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Interactions) {
		toSerialize["interactions"] = o.Interactions
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.AdditionalUrls) {
		toSerialize["additionalUrls"] = o.AdditionalUrls
	}
	if !IsNil(o.CustomProperties) {
		toSerialize["customProperties"] = o.CustomProperties
	}
	return toSerialize, nil
}

type NullableDocumentDefinition struct {
	value *DocumentDefinition
	isSet bool
}

func (v NullableDocumentDefinition) Get() *DocumentDefinition {
	return v.value
}

func (v *NullableDocumentDefinition) Set(val *DocumentDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentDefinition(val *DocumentDefinition) *NullableDocumentDefinition {
	return &NullableDocumentDefinition{value: val, isSet: true}
}

func (v NullableDocumentDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


