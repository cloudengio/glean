/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DatasourceSchemaAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatasourceSchemaAllOf{}

// DatasourceSchemaAllOf struct for DatasourceSchemaAllOf
type DatasourceSchemaAllOf struct {
	// Whether this datasource will show calendar feed events
	CalendarEnabled *bool `json:"calendarEnabled,omitempty"`
	// Whether the HTML body should be reported in ActivityEvents.
	CollectBodyInActivity *bool `json:"collectBodyInActivity,omitempty"`
	// Whether to crawl site starting at the home URL and all crawler seed URLs.
	CrawlHomeUrl *bool `json:"crawlHomeUrl,omitempty"`
	// The support Glean provides for this datasource.
	DatasourceDescription *string `json:"datasourceDescription,omitempty"`
	// The user label for the datasource. This is distinct from the display names of the instances.
	DatasourceDisplayName *string `json:"datasourceDisplayName,omitempty"`
	FederatedGoogleOAuth *OAuthConfig `json:"federatedGoogleOAuth,omitempty"`
	// Whether the datasource supports the native search replacement feature.
	IsEligibleForNativeReplacement *bool `json:"isEligibleForNativeReplacement,omitempty"`
	// Whether the datasource is set in queryapi.datasources.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Make Native Search Replace opt-out rather than opt-in.
	IsNativeReplacementAutoEnabled *bool `json:"isNativeReplacementAutoEnabled,omitempty"`
	// Whether the user is able to search for results from this datasource.
	IsSearchable *bool `json:"isSearchable,omitempty"`
	// Whether the the datasource is configured to be used within mentions features such as the mentions feed
	MentionsEnabled *bool `json:"mentionsEnabled,omitempty"`
	PrivateAuth *PrivateAuth `json:"privateAuth,omitempty"`
	// CSS selectors that identify native search input elements on the datasource's website.
	SearchInputSelectors []string `json:"searchInputSelectors,omitempty"`
	// Whether the datasource can power the user's calendar.
	SupportsCalendar *bool `json:"supportsCalendar,omitempty"`
	// The current version of the urlRegex, changes would instruct the client to clear any information based on previous versions of the urlRegex.
	UrlRegexVersion *int32 `json:"urlRegexVersion,omitempty"`
}

// NewDatasourceSchemaAllOf instantiates a new DatasourceSchemaAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceSchemaAllOf() *DatasourceSchemaAllOf {
	this := DatasourceSchemaAllOf{}
	return &this
}

// NewDatasourceSchemaAllOfWithDefaults instantiates a new DatasourceSchemaAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceSchemaAllOfWithDefaults() *DatasourceSchemaAllOf {
	this := DatasourceSchemaAllOf{}
	return &this
}

// GetCalendarEnabled returns the CalendarEnabled field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetCalendarEnabled() bool {
	if o == nil || IsNil(o.CalendarEnabled) {
		var ret bool
		return ret
	}
	return *o.CalendarEnabled
}

// GetCalendarEnabledOk returns a tuple with the CalendarEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetCalendarEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CalendarEnabled) {
		return nil, false
	}
	return o.CalendarEnabled, true
}

// HasCalendarEnabled returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasCalendarEnabled() bool {
	if o != nil && !IsNil(o.CalendarEnabled) {
		return true
	}

	return false
}

// SetCalendarEnabled gets a reference to the given bool and assigns it to the CalendarEnabled field.
func (o *DatasourceSchemaAllOf) SetCalendarEnabled(v bool) {
	o.CalendarEnabled = &v
}

// GetCollectBodyInActivity returns the CollectBodyInActivity field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetCollectBodyInActivity() bool {
	if o == nil || IsNil(o.CollectBodyInActivity) {
		var ret bool
		return ret
	}
	return *o.CollectBodyInActivity
}

// GetCollectBodyInActivityOk returns a tuple with the CollectBodyInActivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetCollectBodyInActivityOk() (*bool, bool) {
	if o == nil || IsNil(o.CollectBodyInActivity) {
		return nil, false
	}
	return o.CollectBodyInActivity, true
}

// HasCollectBodyInActivity returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasCollectBodyInActivity() bool {
	if o != nil && !IsNil(o.CollectBodyInActivity) {
		return true
	}

	return false
}

// SetCollectBodyInActivity gets a reference to the given bool and assigns it to the CollectBodyInActivity field.
func (o *DatasourceSchemaAllOf) SetCollectBodyInActivity(v bool) {
	o.CollectBodyInActivity = &v
}

// GetCrawlHomeUrl returns the CrawlHomeUrl field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetCrawlHomeUrl() bool {
	if o == nil || IsNil(o.CrawlHomeUrl) {
		var ret bool
		return ret
	}
	return *o.CrawlHomeUrl
}

// GetCrawlHomeUrlOk returns a tuple with the CrawlHomeUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetCrawlHomeUrlOk() (*bool, bool) {
	if o == nil || IsNil(o.CrawlHomeUrl) {
		return nil, false
	}
	return o.CrawlHomeUrl, true
}

// HasCrawlHomeUrl returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasCrawlHomeUrl() bool {
	if o != nil && !IsNil(o.CrawlHomeUrl) {
		return true
	}

	return false
}

// SetCrawlHomeUrl gets a reference to the given bool and assigns it to the CrawlHomeUrl field.
func (o *DatasourceSchemaAllOf) SetCrawlHomeUrl(v bool) {
	o.CrawlHomeUrl = &v
}

// GetDatasourceDescription returns the DatasourceDescription field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetDatasourceDescription() string {
	if o == nil || IsNil(o.DatasourceDescription) {
		var ret string
		return ret
	}
	return *o.DatasourceDescription
}

// GetDatasourceDescriptionOk returns a tuple with the DatasourceDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetDatasourceDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceDescription) {
		return nil, false
	}
	return o.DatasourceDescription, true
}

// HasDatasourceDescription returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasDatasourceDescription() bool {
	if o != nil && !IsNil(o.DatasourceDescription) {
		return true
	}

	return false
}

// SetDatasourceDescription gets a reference to the given string and assigns it to the DatasourceDescription field.
func (o *DatasourceSchemaAllOf) SetDatasourceDescription(v string) {
	o.DatasourceDescription = &v
}

// GetDatasourceDisplayName returns the DatasourceDisplayName field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetDatasourceDisplayName() string {
	if o == nil || IsNil(o.DatasourceDisplayName) {
		var ret string
		return ret
	}
	return *o.DatasourceDisplayName
}

// GetDatasourceDisplayNameOk returns a tuple with the DatasourceDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetDatasourceDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceDisplayName) {
		return nil, false
	}
	return o.DatasourceDisplayName, true
}

// HasDatasourceDisplayName returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasDatasourceDisplayName() bool {
	if o != nil && !IsNil(o.DatasourceDisplayName) {
		return true
	}

	return false
}

// SetDatasourceDisplayName gets a reference to the given string and assigns it to the DatasourceDisplayName field.
func (o *DatasourceSchemaAllOf) SetDatasourceDisplayName(v string) {
	o.DatasourceDisplayName = &v
}

// GetFederatedGoogleOAuth returns the FederatedGoogleOAuth field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetFederatedGoogleOAuth() OAuthConfig {
	if o == nil || IsNil(o.FederatedGoogleOAuth) {
		var ret OAuthConfig
		return ret
	}
	return *o.FederatedGoogleOAuth
}

// GetFederatedGoogleOAuthOk returns a tuple with the FederatedGoogleOAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetFederatedGoogleOAuthOk() (*OAuthConfig, bool) {
	if o == nil || IsNil(o.FederatedGoogleOAuth) {
		return nil, false
	}
	return o.FederatedGoogleOAuth, true
}

// HasFederatedGoogleOAuth returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasFederatedGoogleOAuth() bool {
	if o != nil && !IsNil(o.FederatedGoogleOAuth) {
		return true
	}

	return false
}

// SetFederatedGoogleOAuth gets a reference to the given OAuthConfig and assigns it to the FederatedGoogleOAuth field.
func (o *DatasourceSchemaAllOf) SetFederatedGoogleOAuth(v OAuthConfig) {
	o.FederatedGoogleOAuth = &v
}

// GetIsEligibleForNativeReplacement returns the IsEligibleForNativeReplacement field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetIsEligibleForNativeReplacement() bool {
	if o == nil || IsNil(o.IsEligibleForNativeReplacement) {
		var ret bool
		return ret
	}
	return *o.IsEligibleForNativeReplacement
}

// GetIsEligibleForNativeReplacementOk returns a tuple with the IsEligibleForNativeReplacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetIsEligibleForNativeReplacementOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEligibleForNativeReplacement) {
		return nil, false
	}
	return o.IsEligibleForNativeReplacement, true
}

// HasIsEligibleForNativeReplacement returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasIsEligibleForNativeReplacement() bool {
	if o != nil && !IsNil(o.IsEligibleForNativeReplacement) {
		return true
	}

	return false
}

// SetIsEligibleForNativeReplacement gets a reference to the given bool and assigns it to the IsEligibleForNativeReplacement field.
func (o *DatasourceSchemaAllOf) SetIsEligibleForNativeReplacement(v bool) {
	o.IsEligibleForNativeReplacement = &v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *DatasourceSchemaAllOf) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetIsNativeReplacementAutoEnabled returns the IsNativeReplacementAutoEnabled field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetIsNativeReplacementAutoEnabled() bool {
	if o == nil || IsNil(o.IsNativeReplacementAutoEnabled) {
		var ret bool
		return ret
	}
	return *o.IsNativeReplacementAutoEnabled
}

// GetIsNativeReplacementAutoEnabledOk returns a tuple with the IsNativeReplacementAutoEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetIsNativeReplacementAutoEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNativeReplacementAutoEnabled) {
		return nil, false
	}
	return o.IsNativeReplacementAutoEnabled, true
}

// HasIsNativeReplacementAutoEnabled returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasIsNativeReplacementAutoEnabled() bool {
	if o != nil && !IsNil(o.IsNativeReplacementAutoEnabled) {
		return true
	}

	return false
}

// SetIsNativeReplacementAutoEnabled gets a reference to the given bool and assigns it to the IsNativeReplacementAutoEnabled field.
func (o *DatasourceSchemaAllOf) SetIsNativeReplacementAutoEnabled(v bool) {
	o.IsNativeReplacementAutoEnabled = &v
}

// GetIsSearchable returns the IsSearchable field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetIsSearchable() bool {
	if o == nil || IsNil(o.IsSearchable) {
		var ret bool
		return ret
	}
	return *o.IsSearchable
}

// GetIsSearchableOk returns a tuple with the IsSearchable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetIsSearchableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSearchable) {
		return nil, false
	}
	return o.IsSearchable, true
}

// HasIsSearchable returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasIsSearchable() bool {
	if o != nil && !IsNil(o.IsSearchable) {
		return true
	}

	return false
}

// SetIsSearchable gets a reference to the given bool and assigns it to the IsSearchable field.
func (o *DatasourceSchemaAllOf) SetIsSearchable(v bool) {
	o.IsSearchable = &v
}

// GetMentionsEnabled returns the MentionsEnabled field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetMentionsEnabled() bool {
	if o == nil || IsNil(o.MentionsEnabled) {
		var ret bool
		return ret
	}
	return *o.MentionsEnabled
}

// GetMentionsEnabledOk returns a tuple with the MentionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetMentionsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.MentionsEnabled) {
		return nil, false
	}
	return o.MentionsEnabled, true
}

// HasMentionsEnabled returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasMentionsEnabled() bool {
	if o != nil && !IsNil(o.MentionsEnabled) {
		return true
	}

	return false
}

// SetMentionsEnabled gets a reference to the given bool and assigns it to the MentionsEnabled field.
func (o *DatasourceSchemaAllOf) SetMentionsEnabled(v bool) {
	o.MentionsEnabled = &v
}

// GetPrivateAuth returns the PrivateAuth field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetPrivateAuth() PrivateAuth {
	if o == nil || IsNil(o.PrivateAuth) {
		var ret PrivateAuth
		return ret
	}
	return *o.PrivateAuth
}

// GetPrivateAuthOk returns a tuple with the PrivateAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetPrivateAuthOk() (*PrivateAuth, bool) {
	if o == nil || IsNil(o.PrivateAuth) {
		return nil, false
	}
	return o.PrivateAuth, true
}

// HasPrivateAuth returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasPrivateAuth() bool {
	if o != nil && !IsNil(o.PrivateAuth) {
		return true
	}

	return false
}

// SetPrivateAuth gets a reference to the given PrivateAuth and assigns it to the PrivateAuth field.
func (o *DatasourceSchemaAllOf) SetPrivateAuth(v PrivateAuth) {
	o.PrivateAuth = &v
}

// GetSearchInputSelectors returns the SearchInputSelectors field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetSearchInputSelectors() []string {
	if o == nil || IsNil(o.SearchInputSelectors) {
		var ret []string
		return ret
	}
	return o.SearchInputSelectors
}

// GetSearchInputSelectorsOk returns a tuple with the SearchInputSelectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetSearchInputSelectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchInputSelectors) {
		return nil, false
	}
	return o.SearchInputSelectors, true
}

// HasSearchInputSelectors returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasSearchInputSelectors() bool {
	if o != nil && !IsNil(o.SearchInputSelectors) {
		return true
	}

	return false
}

// SetSearchInputSelectors gets a reference to the given []string and assigns it to the SearchInputSelectors field.
func (o *DatasourceSchemaAllOf) SetSearchInputSelectors(v []string) {
	o.SearchInputSelectors = v
}

// GetSupportsCalendar returns the SupportsCalendar field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetSupportsCalendar() bool {
	if o == nil || IsNil(o.SupportsCalendar) {
		var ret bool
		return ret
	}
	return *o.SupportsCalendar
}

// GetSupportsCalendarOk returns a tuple with the SupportsCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetSupportsCalendarOk() (*bool, bool) {
	if o == nil || IsNil(o.SupportsCalendar) {
		return nil, false
	}
	return o.SupportsCalendar, true
}

// HasSupportsCalendar returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasSupportsCalendar() bool {
	if o != nil && !IsNil(o.SupportsCalendar) {
		return true
	}

	return false
}

// SetSupportsCalendar gets a reference to the given bool and assigns it to the SupportsCalendar field.
func (o *DatasourceSchemaAllOf) SetSupportsCalendar(v bool) {
	o.SupportsCalendar = &v
}

// GetUrlRegexVersion returns the UrlRegexVersion field value if set, zero value otherwise.
func (o *DatasourceSchemaAllOf) GetUrlRegexVersion() int32 {
	if o == nil || IsNil(o.UrlRegexVersion) {
		var ret int32
		return ret
	}
	return *o.UrlRegexVersion
}

// GetUrlRegexVersionOk returns a tuple with the UrlRegexVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceSchemaAllOf) GetUrlRegexVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.UrlRegexVersion) {
		return nil, false
	}
	return o.UrlRegexVersion, true
}

// HasUrlRegexVersion returns a boolean if a field has been set.
func (o *DatasourceSchemaAllOf) HasUrlRegexVersion() bool {
	if o != nil && !IsNil(o.UrlRegexVersion) {
		return true
	}

	return false
}

// SetUrlRegexVersion gets a reference to the given int32 and assigns it to the UrlRegexVersion field.
func (o *DatasourceSchemaAllOf) SetUrlRegexVersion(v int32) {
	o.UrlRegexVersion = &v
}

func (o DatasourceSchemaAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatasourceSchemaAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CalendarEnabled) {
		toSerialize["calendarEnabled"] = o.CalendarEnabled
	}
	if !IsNil(o.CollectBodyInActivity) {
		toSerialize["collectBodyInActivity"] = o.CollectBodyInActivity
	}
	if !IsNil(o.CrawlHomeUrl) {
		toSerialize["crawlHomeUrl"] = o.CrawlHomeUrl
	}
	if !IsNil(o.DatasourceDescription) {
		toSerialize["datasourceDescription"] = o.DatasourceDescription
	}
	if !IsNil(o.DatasourceDisplayName) {
		toSerialize["datasourceDisplayName"] = o.DatasourceDisplayName
	}
	if !IsNil(o.FederatedGoogleOAuth) {
		toSerialize["federatedGoogleOAuth"] = o.FederatedGoogleOAuth
	}
	if !IsNil(o.IsEligibleForNativeReplacement) {
		toSerialize["isEligibleForNativeReplacement"] = o.IsEligibleForNativeReplacement
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if !IsNil(o.IsNativeReplacementAutoEnabled) {
		toSerialize["isNativeReplacementAutoEnabled"] = o.IsNativeReplacementAutoEnabled
	}
	if !IsNil(o.IsSearchable) {
		toSerialize["isSearchable"] = o.IsSearchable
	}
	if !IsNil(o.MentionsEnabled) {
		toSerialize["mentionsEnabled"] = o.MentionsEnabled
	}
	if !IsNil(o.PrivateAuth) {
		toSerialize["privateAuth"] = o.PrivateAuth
	}
	if !IsNil(o.SearchInputSelectors) {
		toSerialize["searchInputSelectors"] = o.SearchInputSelectors
	}
	if !IsNil(o.SupportsCalendar) {
		toSerialize["supportsCalendar"] = o.SupportsCalendar
	}
	if !IsNil(o.UrlRegexVersion) {
		toSerialize["urlRegexVersion"] = o.UrlRegexVersion
	}
	return toSerialize, nil
}

type NullableDatasourceSchemaAllOf struct {
	value *DatasourceSchemaAllOf
	isSet bool
}

func (v NullableDatasourceSchemaAllOf) Get() *DatasourceSchemaAllOf {
	return v.value
}

func (v *NullableDatasourceSchemaAllOf) Set(val *DatasourceSchemaAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceSchemaAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceSchemaAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceSchemaAllOf(val *DatasourceSchemaAllOf) *NullableDatasourceSchemaAllOf {
	return &NullableDatasourceSchemaAllOf{value: val, isSet: true}
}

func (v NullableDatasourceSchemaAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceSchemaAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


