/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ResultsDescription type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResultsDescription{}

// ResultsDescription struct for ResultsDescription
type ResultsDescription struct {
	// Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab.
	Text *string `json:"text,omitempty"`
	IconConfig *IconConfig `json:"iconConfig,omitempty"`
}

// NewResultsDescription instantiates a new ResultsDescription object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResultsDescription() *ResultsDescription {
	this := ResultsDescription{}
	return &this
}

// NewResultsDescriptionWithDefaults instantiates a new ResultsDescription object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResultsDescriptionWithDefaults() *ResultsDescription {
	this := ResultsDescription{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *ResultsDescription) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsDescription) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *ResultsDescription) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *ResultsDescription) SetText(v string) {
	o.Text = &v
}

// GetIconConfig returns the IconConfig field value if set, zero value otherwise.
func (o *ResultsDescription) GetIconConfig() IconConfig {
	if o == nil || IsNil(o.IconConfig) {
		var ret IconConfig
		return ret
	}
	return *o.IconConfig
}

// GetIconConfigOk returns a tuple with the IconConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResultsDescription) GetIconConfigOk() (*IconConfig, bool) {
	if o == nil || IsNil(o.IconConfig) {
		return nil, false
	}
	return o.IconConfig, true
}

// HasIconConfig returns a boolean if a field has been set.
func (o *ResultsDescription) HasIconConfig() bool {
	if o != nil && !IsNil(o.IconConfig) {
		return true
	}

	return false
}

// SetIconConfig gets a reference to the given IconConfig and assigns it to the IconConfig field.
func (o *ResultsDescription) SetIconConfig(v IconConfig) {
	o.IconConfig = &v
}

func (o ResultsDescription) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResultsDescription) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.IconConfig) {
		toSerialize["iconConfig"] = o.IconConfig
	}
	return toSerialize, nil
}

type NullableResultsDescription struct {
	value *ResultsDescription
	isSet bool
}

func (v NullableResultsDescription) Get() *ResultsDescription {
	return v.value
}

func (v *NullableResultsDescription) Set(val *ResultsDescription) {
	v.value = val
	v.isSet = true
}

func (v NullableResultsDescription) IsSet() bool {
	return v.isSet
}

func (v *NullableResultsDescription) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResultsDescription(val *ResultsDescription) *NullableResultsDescription {
	return &NullableResultsDescription{value: val, isSet: true}
}

func (v NullableResultsDescription) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResultsDescription) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


