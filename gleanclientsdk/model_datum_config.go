/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DatumConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatumConfig{}

// DatumConfig struct for DatumConfig
type DatumConfig struct {
	Conditions []DatumCondition `json:"conditions,omitempty"`
	DatumConfigs *map[string]DatumConfig `json:"datumConfigs,omitempty"`
	Icon *IconConfig `json:"icon,omitempty"`
	Keys []string `json:"keys,omitempty"`
	Label *string `json:"label,omitempty"`
	Omit *bool `json:"omit,omitempty"`
	Popover *PopoverConfig `json:"popover,omitempty"`
	Prefix *string `json:"prefix,omitempty"`
	RoleConfig *DatumRoleConfig `json:"roleConfig,omitempty"`
	Separator *string `json:"separator,omitempty"`
	Suffix *string `json:"suffix,omitempty"`
	Transforms []DatumTransform `json:"transforms,omitempty"`
	Type *DatumType `json:"type,omitempty"`
}

// NewDatumConfig instantiates a new DatumConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatumConfig() *DatumConfig {
	this := DatumConfig{}
	return &this
}

// NewDatumConfigWithDefaults instantiates a new DatumConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatumConfigWithDefaults() *DatumConfig {
	this := DatumConfig{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *DatumConfig) GetConditions() []DatumCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []DatumCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetConditionsOk() ([]DatumCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *DatumConfig) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []DatumCondition and assigns it to the Conditions field.
func (o *DatumConfig) SetConditions(v []DatumCondition) {
	o.Conditions = v
}

// GetDatumConfigs returns the DatumConfigs field value if set, zero value otherwise.
func (o *DatumConfig) GetDatumConfigs() map[string]DatumConfig {
	if o == nil || IsNil(o.DatumConfigs) {
		var ret map[string]DatumConfig
		return ret
	}
	return *o.DatumConfigs
}

// GetDatumConfigsOk returns a tuple with the DatumConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetDatumConfigsOk() (*map[string]DatumConfig, bool) {
	if o == nil || IsNil(o.DatumConfigs) {
		return nil, false
	}
	return o.DatumConfigs, true
}

// HasDatumConfigs returns a boolean if a field has been set.
func (o *DatumConfig) HasDatumConfigs() bool {
	if o != nil && !IsNil(o.DatumConfigs) {
		return true
	}

	return false
}

// SetDatumConfigs gets a reference to the given map[string]DatumConfig and assigns it to the DatumConfigs field.
func (o *DatumConfig) SetDatumConfigs(v map[string]DatumConfig) {
	o.DatumConfigs = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *DatumConfig) GetIcon() IconConfig {
	if o == nil || IsNil(o.Icon) {
		var ret IconConfig
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetIconOk() (*IconConfig, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *DatumConfig) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given IconConfig and assigns it to the Icon field.
func (o *DatumConfig) SetIcon(v IconConfig) {
	o.Icon = &v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *DatumConfig) GetKeys() []string {
	if o == nil || IsNil(o.Keys) {
		var ret []string
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetKeysOk() ([]string, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *DatumConfig) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []string and assigns it to the Keys field.
func (o *DatumConfig) SetKeys(v []string) {
	o.Keys = v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *DatumConfig) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *DatumConfig) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *DatumConfig) SetLabel(v string) {
	o.Label = &v
}

// GetOmit returns the Omit field value if set, zero value otherwise.
func (o *DatumConfig) GetOmit() bool {
	if o == nil || IsNil(o.Omit) {
		var ret bool
		return ret
	}
	return *o.Omit
}

// GetOmitOk returns a tuple with the Omit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetOmitOk() (*bool, bool) {
	if o == nil || IsNil(o.Omit) {
		return nil, false
	}
	return o.Omit, true
}

// HasOmit returns a boolean if a field has been set.
func (o *DatumConfig) HasOmit() bool {
	if o != nil && !IsNil(o.Omit) {
		return true
	}

	return false
}

// SetOmit gets a reference to the given bool and assigns it to the Omit field.
func (o *DatumConfig) SetOmit(v bool) {
	o.Omit = &v
}

// GetPopover returns the Popover field value if set, zero value otherwise.
func (o *DatumConfig) GetPopover() PopoverConfig {
	if o == nil || IsNil(o.Popover) {
		var ret PopoverConfig
		return ret
	}
	return *o.Popover
}

// GetPopoverOk returns a tuple with the Popover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetPopoverOk() (*PopoverConfig, bool) {
	if o == nil || IsNil(o.Popover) {
		return nil, false
	}
	return o.Popover, true
}

// HasPopover returns a boolean if a field has been set.
func (o *DatumConfig) HasPopover() bool {
	if o != nil && !IsNil(o.Popover) {
		return true
	}

	return false
}

// SetPopover gets a reference to the given PopoverConfig and assigns it to the Popover field.
func (o *DatumConfig) SetPopover(v PopoverConfig) {
	o.Popover = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *DatumConfig) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *DatumConfig) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *DatumConfig) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRoleConfig returns the RoleConfig field value if set, zero value otherwise.
func (o *DatumConfig) GetRoleConfig() DatumRoleConfig {
	if o == nil || IsNil(o.RoleConfig) {
		var ret DatumRoleConfig
		return ret
	}
	return *o.RoleConfig
}

// GetRoleConfigOk returns a tuple with the RoleConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetRoleConfigOk() (*DatumRoleConfig, bool) {
	if o == nil || IsNil(o.RoleConfig) {
		return nil, false
	}
	return o.RoleConfig, true
}

// HasRoleConfig returns a boolean if a field has been set.
func (o *DatumConfig) HasRoleConfig() bool {
	if o != nil && !IsNil(o.RoleConfig) {
		return true
	}

	return false
}

// SetRoleConfig gets a reference to the given DatumRoleConfig and assigns it to the RoleConfig field.
func (o *DatumConfig) SetRoleConfig(v DatumRoleConfig) {
	o.RoleConfig = &v
}

// GetSeparator returns the Separator field value if set, zero value otherwise.
func (o *DatumConfig) GetSeparator() string {
	if o == nil || IsNil(o.Separator) {
		var ret string
		return ret
	}
	return *o.Separator
}

// GetSeparatorOk returns a tuple with the Separator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetSeparatorOk() (*string, bool) {
	if o == nil || IsNil(o.Separator) {
		return nil, false
	}
	return o.Separator, true
}

// HasSeparator returns a boolean if a field has been set.
func (o *DatumConfig) HasSeparator() bool {
	if o != nil && !IsNil(o.Separator) {
		return true
	}

	return false
}

// SetSeparator gets a reference to the given string and assigns it to the Separator field.
func (o *DatumConfig) SetSeparator(v string) {
	o.Separator = &v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise.
func (o *DatumConfig) GetSuffix() string {
	if o == nil || IsNil(o.Suffix) {
		var ret string
		return ret
	}
	return *o.Suffix
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.Suffix) {
		return nil, false
	}
	return o.Suffix, true
}

// HasSuffix returns a boolean if a field has been set.
func (o *DatumConfig) HasSuffix() bool {
	if o != nil && !IsNil(o.Suffix) {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given string and assigns it to the Suffix field.
func (o *DatumConfig) SetSuffix(v string) {
	o.Suffix = &v
}

// GetTransforms returns the Transforms field value if set, zero value otherwise.
func (o *DatumConfig) GetTransforms() []DatumTransform {
	if o == nil || IsNil(o.Transforms) {
		var ret []DatumTransform
		return ret
	}
	return o.Transforms
}

// GetTransformsOk returns a tuple with the Transforms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetTransformsOk() ([]DatumTransform, bool) {
	if o == nil || IsNil(o.Transforms) {
		return nil, false
	}
	return o.Transforms, true
}

// HasTransforms returns a boolean if a field has been set.
func (o *DatumConfig) HasTransforms() bool {
	if o != nil && !IsNil(o.Transforms) {
		return true
	}

	return false
}

// SetTransforms gets a reference to the given []DatumTransform and assigns it to the Transforms field.
func (o *DatumConfig) SetTransforms(v []DatumTransform) {
	o.Transforms = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatumConfig) GetType() DatumType {
	if o == nil || IsNil(o.Type) {
		var ret DatumType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumConfig) GetTypeOk() (*DatumType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatumConfig) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DatumType and assigns it to the Type field.
func (o *DatumConfig) SetType(v DatumType) {
	o.Type = &v
}

func (o DatumConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatumConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.DatumConfigs) {
		toSerialize["datumConfigs"] = o.DatumConfigs
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Omit) {
		toSerialize["omit"] = o.Omit
	}
	if !IsNil(o.Popover) {
		toSerialize["popover"] = o.Popover
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.RoleConfig) {
		toSerialize["roleConfig"] = o.RoleConfig
	}
	if !IsNil(o.Separator) {
		toSerialize["separator"] = o.Separator
	}
	if !IsNil(o.Suffix) {
		toSerialize["suffix"] = o.Suffix
	}
	if !IsNil(o.Transforms) {
		toSerialize["transforms"] = o.Transforms
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableDatumConfig struct {
	value *DatumConfig
	isSet bool
}

func (v NullableDatumConfig) Get() *DatumConfig {
	return v.value
}

func (v *NullableDatumConfig) Set(val *DatumConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDatumConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDatumConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatumConfig(val *DatumConfig) *NullableDatumConfig {
	return &NullableDatumConfig{value: val, isSet: true}
}

func (v NullableDatumConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatumConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


