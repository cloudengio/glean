/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Branding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Branding{}

// Branding A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.
type Branding struct {
	// User facing company background image to be displayed to users on the home page.
	CompanyBackgroundImageName *string `json:"companyBackgroundImageName,omitempty"`
	// An image url pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred.
	CompanyLogoUrl *string `json:"companyLogoUrl,omitempty"`
	// An image url pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred.
	CompanyWideLogoUrl *string `json:"companyWideLogoUrl,omitempty"`
	// A hex RGB color to display behind custom logo (e.g. '#ff4080').
	CompanyLogoBackgroundColor *string `json:"companyLogoBackgroundColor,omitempty"`
}

// NewBranding instantiates a new Branding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranding() *Branding {
	this := Branding{}
	return &this
}

// NewBrandingWithDefaults instantiates a new Branding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrandingWithDefaults() *Branding {
	this := Branding{}
	return &this
}

// GetCompanyBackgroundImageName returns the CompanyBackgroundImageName field value if set, zero value otherwise.
func (o *Branding) GetCompanyBackgroundImageName() string {
	if o == nil || IsNil(o.CompanyBackgroundImageName) {
		var ret string
		return ret
	}
	return *o.CompanyBackgroundImageName
}

// GetCompanyBackgroundImageNameOk returns a tuple with the CompanyBackgroundImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branding) GetCompanyBackgroundImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyBackgroundImageName) {
		return nil, false
	}
	return o.CompanyBackgroundImageName, true
}

// HasCompanyBackgroundImageName returns a boolean if a field has been set.
func (o *Branding) HasCompanyBackgroundImageName() bool {
	if o != nil && !IsNil(o.CompanyBackgroundImageName) {
		return true
	}

	return false
}

// SetCompanyBackgroundImageName gets a reference to the given string and assigns it to the CompanyBackgroundImageName field.
func (o *Branding) SetCompanyBackgroundImageName(v string) {
	o.CompanyBackgroundImageName = &v
}

// GetCompanyLogoUrl returns the CompanyLogoUrl field value if set, zero value otherwise.
func (o *Branding) GetCompanyLogoUrl() string {
	if o == nil || IsNil(o.CompanyLogoUrl) {
		var ret string
		return ret
	}
	return *o.CompanyLogoUrl
}

// GetCompanyLogoUrlOk returns a tuple with the CompanyLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branding) GetCompanyLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyLogoUrl) {
		return nil, false
	}
	return o.CompanyLogoUrl, true
}

// HasCompanyLogoUrl returns a boolean if a field has been set.
func (o *Branding) HasCompanyLogoUrl() bool {
	if o != nil && !IsNil(o.CompanyLogoUrl) {
		return true
	}

	return false
}

// SetCompanyLogoUrl gets a reference to the given string and assigns it to the CompanyLogoUrl field.
func (o *Branding) SetCompanyLogoUrl(v string) {
	o.CompanyLogoUrl = &v
}

// GetCompanyWideLogoUrl returns the CompanyWideLogoUrl field value if set, zero value otherwise.
func (o *Branding) GetCompanyWideLogoUrl() string {
	if o == nil || IsNil(o.CompanyWideLogoUrl) {
		var ret string
		return ret
	}
	return *o.CompanyWideLogoUrl
}

// GetCompanyWideLogoUrlOk returns a tuple with the CompanyWideLogoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branding) GetCompanyWideLogoUrlOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyWideLogoUrl) {
		return nil, false
	}
	return o.CompanyWideLogoUrl, true
}

// HasCompanyWideLogoUrl returns a boolean if a field has been set.
func (o *Branding) HasCompanyWideLogoUrl() bool {
	if o != nil && !IsNil(o.CompanyWideLogoUrl) {
		return true
	}

	return false
}

// SetCompanyWideLogoUrl gets a reference to the given string and assigns it to the CompanyWideLogoUrl field.
func (o *Branding) SetCompanyWideLogoUrl(v string) {
	o.CompanyWideLogoUrl = &v
}

// GetCompanyLogoBackgroundColor returns the CompanyLogoBackgroundColor field value if set, zero value otherwise.
func (o *Branding) GetCompanyLogoBackgroundColor() string {
	if o == nil || IsNil(o.CompanyLogoBackgroundColor) {
		var ret string
		return ret
	}
	return *o.CompanyLogoBackgroundColor
}

// GetCompanyLogoBackgroundColorOk returns a tuple with the CompanyLogoBackgroundColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Branding) GetCompanyLogoBackgroundColorOk() (*string, bool) {
	if o == nil || IsNil(o.CompanyLogoBackgroundColor) {
		return nil, false
	}
	return o.CompanyLogoBackgroundColor, true
}

// HasCompanyLogoBackgroundColor returns a boolean if a field has been set.
func (o *Branding) HasCompanyLogoBackgroundColor() bool {
	if o != nil && !IsNil(o.CompanyLogoBackgroundColor) {
		return true
	}

	return false
}

// SetCompanyLogoBackgroundColor gets a reference to the given string and assigns it to the CompanyLogoBackgroundColor field.
func (o *Branding) SetCompanyLogoBackgroundColor(v string) {
	o.CompanyLogoBackgroundColor = &v
}

func (o Branding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Branding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompanyBackgroundImageName) {
		toSerialize["companyBackgroundImageName"] = o.CompanyBackgroundImageName
	}
	if !IsNil(o.CompanyLogoUrl) {
		toSerialize["companyLogoUrl"] = o.CompanyLogoUrl
	}
	if !IsNil(o.CompanyWideLogoUrl) {
		toSerialize["companyWideLogoUrl"] = o.CompanyWideLogoUrl
	}
	if !IsNil(o.CompanyLogoBackgroundColor) {
		toSerialize["companyLogoBackgroundColor"] = o.CompanyLogoBackgroundColor
	}
	return toSerialize, nil
}

type NullableBranding struct {
	value *Branding
	isSet bool
}

func (v NullableBranding) Get() *Branding {
	return v.value
}

func (v *NullableBranding) Set(val *Branding) {
	v.value = val
	v.isSet = true
}

func (v NullableBranding) IsSet() bool {
	return v.isSet
}

func (v *NullableBranding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranding(val *Branding) *NullableBranding {
	return &NullableBranding{value: val, isSet: true}
}

func (v NullableBranding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


