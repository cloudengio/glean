/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the RemovedCollections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemovedCollections{}

// RemovedCollections struct for RemovedCollections
type RemovedCollections struct {
	// IDs of collections from which a document is removed.
	RemovedCollections []int32 `json:"removedCollections,omitempty"`
}

// NewRemovedCollections instantiates a new RemovedCollections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemovedCollections() *RemovedCollections {
	this := RemovedCollections{}
	return &this
}

// NewRemovedCollectionsWithDefaults instantiates a new RemovedCollections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemovedCollectionsWithDefaults() *RemovedCollections {
	this := RemovedCollections{}
	return &this
}

// GetRemovedCollections returns the RemovedCollections field value if set, zero value otherwise.
func (o *RemovedCollections) GetRemovedCollections() []int32 {
	if o == nil || IsNil(o.RemovedCollections) {
		var ret []int32
		return ret
	}
	return o.RemovedCollections
}

// GetRemovedCollectionsOk returns a tuple with the RemovedCollections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemovedCollections) GetRemovedCollectionsOk() ([]int32, bool) {
	if o == nil || IsNil(o.RemovedCollections) {
		return nil, false
	}
	return o.RemovedCollections, true
}

// HasRemovedCollections returns a boolean if a field has been set.
func (o *RemovedCollections) HasRemovedCollections() bool {
	if o != nil && !IsNil(o.RemovedCollections) {
		return true
	}

	return false
}

// SetRemovedCollections gets a reference to the given []int32 and assigns it to the RemovedCollections field.
func (o *RemovedCollections) SetRemovedCollections(v []int32) {
	o.RemovedCollections = v
}

func (o RemovedCollections) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemovedCollections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RemovedCollections) {
		toSerialize["removedCollections"] = o.RemovedCollections
	}
	return toSerialize, nil
}

type NullableRemovedCollections struct {
	value *RemovedCollections
	isSet bool
}

func (v NullableRemovedCollections) Get() *RemovedCollections {
	return v.value
}

func (v *NullableRemovedCollections) Set(val *RemovedCollections) {
	v.value = val
	v.isSet = true
}

func (v NullableRemovedCollections) IsSet() bool {
	return v.isSet
}

func (v *NullableRemovedCollections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemovedCollections(val *RemovedCollections) *NullableRemovedCollections {
	return &NullableRemovedCollections{value: val, isSet: true}
}

func (v NullableRemovedCollections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemovedCollections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


