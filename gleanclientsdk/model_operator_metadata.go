/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the OperatorMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperatorMetadata{}

// OperatorMetadata struct for OperatorMetadata
type OperatorMetadata struct {
	Name string `json:"name"`
	// Whether this operator is supported by default or something that was created within a workplace app (e.g. custom jira field).
	IsCustom *bool `json:"isCustom,omitempty"`
	OperatorType *string `json:"operatorType,omitempty"`
	HelpText *string `json:"helpText,omitempty"`
	Scopes []OperatorScope `json:"scopes,omitempty"`
}

// NewOperatorMetadata instantiates a new OperatorMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatorMetadata(name string) *OperatorMetadata {
	this := OperatorMetadata{}
	this.Name = name
	return &this
}

// NewOperatorMetadataWithDefaults instantiates a new OperatorMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatorMetadataWithDefaults() *OperatorMetadata {
	this := OperatorMetadata{}
	return &this
}

// GetName returns the Name field value
func (o *OperatorMetadata) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OperatorMetadata) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OperatorMetadata) SetName(v string) {
	o.Name = v
}

// GetIsCustom returns the IsCustom field value if set, zero value otherwise.
func (o *OperatorMetadata) GetIsCustom() bool {
	if o == nil || IsNil(o.IsCustom) {
		var ret bool
		return ret
	}
	return *o.IsCustom
}

// GetIsCustomOk returns a tuple with the IsCustom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorMetadata) GetIsCustomOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCustom) {
		return nil, false
	}
	return o.IsCustom, true
}

// HasIsCustom returns a boolean if a field has been set.
func (o *OperatorMetadata) HasIsCustom() bool {
	if o != nil && !IsNil(o.IsCustom) {
		return true
	}

	return false
}

// SetIsCustom gets a reference to the given bool and assigns it to the IsCustom field.
func (o *OperatorMetadata) SetIsCustom(v bool) {
	o.IsCustom = &v
}

// GetOperatorType returns the OperatorType field value if set, zero value otherwise.
func (o *OperatorMetadata) GetOperatorType() string {
	if o == nil || IsNil(o.OperatorType) {
		var ret string
		return ret
	}
	return *o.OperatorType
}

// GetOperatorTypeOk returns a tuple with the OperatorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorMetadata) GetOperatorTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OperatorType) {
		return nil, false
	}
	return o.OperatorType, true
}

// HasOperatorType returns a boolean if a field has been set.
func (o *OperatorMetadata) HasOperatorType() bool {
	if o != nil && !IsNil(o.OperatorType) {
		return true
	}

	return false
}

// SetOperatorType gets a reference to the given string and assigns it to the OperatorType field.
func (o *OperatorMetadata) SetOperatorType(v string) {
	o.OperatorType = &v
}

// GetHelpText returns the HelpText field value if set, zero value otherwise.
func (o *OperatorMetadata) GetHelpText() string {
	if o == nil || IsNil(o.HelpText) {
		var ret string
		return ret
	}
	return *o.HelpText
}

// GetHelpTextOk returns a tuple with the HelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorMetadata) GetHelpTextOk() (*string, bool) {
	if o == nil || IsNil(o.HelpText) {
		return nil, false
	}
	return o.HelpText, true
}

// HasHelpText returns a boolean if a field has been set.
func (o *OperatorMetadata) HasHelpText() bool {
	if o != nil && !IsNil(o.HelpText) {
		return true
	}

	return false
}

// SetHelpText gets a reference to the given string and assigns it to the HelpText field.
func (o *OperatorMetadata) SetHelpText(v string) {
	o.HelpText = &v
}

// GetScopes returns the Scopes field value if set, zero value otherwise.
func (o *OperatorMetadata) GetScopes() []OperatorScope {
	if o == nil || IsNil(o.Scopes) {
		var ret []OperatorScope
		return ret
	}
	return o.Scopes
}

// GetScopesOk returns a tuple with the Scopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorMetadata) GetScopesOk() ([]OperatorScope, bool) {
	if o == nil || IsNil(o.Scopes) {
		return nil, false
	}
	return o.Scopes, true
}

// HasScopes returns a boolean if a field has been set.
func (o *OperatorMetadata) HasScopes() bool {
	if o != nil && !IsNil(o.Scopes) {
		return true
	}

	return false
}

// SetScopes gets a reference to the given []OperatorScope and assigns it to the Scopes field.
func (o *OperatorMetadata) SetScopes(v []OperatorScope) {
	o.Scopes = v
}

func (o OperatorMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperatorMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.IsCustom) {
		toSerialize["isCustom"] = o.IsCustom
	}
	if !IsNil(o.OperatorType) {
		toSerialize["operatorType"] = o.OperatorType
	}
	if !IsNil(o.HelpText) {
		toSerialize["helpText"] = o.HelpText
	}
	if !IsNil(o.Scopes) {
		toSerialize["scopes"] = o.Scopes
	}
	return toSerialize, nil
}

type NullableOperatorMetadata struct {
	value *OperatorMetadata
	isSet bool
}

func (v NullableOperatorMetadata) Get() *OperatorMetadata {
	return v.value
}

func (v *NullableOperatorMetadata) Set(val *OperatorMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatorMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatorMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatorMetadata(val *OperatorMetadata) *NullableOperatorMetadata {
	return &NullableOperatorMetadata{value: val, isSet: true}
}

func (v NullableOperatorMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatorMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


