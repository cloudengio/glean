/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DatumCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatumCondition{}

// DatumCondition struct for DatumCondition
type DatumCondition struct {
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`
	Key *string `json:"key,omitempty"`
	Type *DatumConditionType `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewDatumCondition instantiates a new DatumCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatumCondition() *DatumCondition {
	this := DatumCondition{}
	return &this
}

// NewDatumConditionWithDefaults instantiates a new DatumCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatumConditionWithDefaults() *DatumCondition {
	this := DatumCondition{}
	return &this
}

// GetCaseInsensitive returns the CaseInsensitive field value if set, zero value otherwise.
func (o *DatumCondition) GetCaseInsensitive() bool {
	if o == nil || IsNil(o.CaseInsensitive) {
		var ret bool
		return ret
	}
	return *o.CaseInsensitive
}

// GetCaseInsensitiveOk returns a tuple with the CaseInsensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumCondition) GetCaseInsensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.CaseInsensitive) {
		return nil, false
	}
	return o.CaseInsensitive, true
}

// HasCaseInsensitive returns a boolean if a field has been set.
func (o *DatumCondition) HasCaseInsensitive() bool {
	if o != nil && !IsNil(o.CaseInsensitive) {
		return true
	}

	return false
}

// SetCaseInsensitive gets a reference to the given bool and assigns it to the CaseInsensitive field.
func (o *DatumCondition) SetCaseInsensitive(v bool) {
	o.CaseInsensitive = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *DatumCondition) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumCondition) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *DatumCondition) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *DatumCondition) SetKey(v string) {
	o.Key = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DatumCondition) GetType() DatumConditionType {
	if o == nil || IsNil(o.Type) {
		var ret DatumConditionType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumCondition) GetTypeOk() (*DatumConditionType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DatumCondition) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DatumConditionType and assigns it to the Type field.
func (o *DatumCondition) SetType(v DatumConditionType) {
	o.Type = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *DatumCondition) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatumCondition) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *DatumCondition) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *DatumCondition) SetValue(v string) {
	o.Value = &v
}

func (o DatumCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatumCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaseInsensitive) {
		toSerialize["caseInsensitive"] = o.CaseInsensitive
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableDatumCondition struct {
	value *DatumCondition
	isSet bool
}

func (v NullableDatumCondition) Get() *DatumCondition {
	return v.value
}

func (v *NullableDatumCondition) Set(val *DatumCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableDatumCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableDatumCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatumCondition(val *DatumCondition) *NullableDatumCondition {
	return &NullableDatumCondition{value: val, isSet: true}
}

func (v NullableDatumCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatumCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


