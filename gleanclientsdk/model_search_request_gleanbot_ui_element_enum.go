/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// SearchRequestGleanbotUIElementEnum UI element within Gleanbot from which the search request was sent.
type SearchRequestGleanbotUIElementEnum string

// List of SearchRequestGleanbotUIElementEnum
const (
	DM SearchRequestGleanbotUIElementEnum = "DM"
	MENTION SearchRequestGleanbotUIElementEnum = "MENTION"
	COMMAND SearchRequestGleanbotUIElementEnum = "COMMAND"
	LEADERBOARD SearchRequestGleanbotUIElementEnum = "LEADERBOARD"
	RETRY SearchRequestGleanbotUIElementEnum = "RETRY"
)

// All allowed values of SearchRequestGleanbotUIElementEnum enum
var AllowedSearchRequestGleanbotUIElementEnumEnumValues = []SearchRequestGleanbotUIElementEnum{
	"DM",
	"MENTION",
	"COMMAND",
	"LEADERBOARD",
	"RETRY",
}

func (v *SearchRequestGleanbotUIElementEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SearchRequestGleanbotUIElementEnum(value)
	for _, existing := range AllowedSearchRequestGleanbotUIElementEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SearchRequestGleanbotUIElementEnum", value)
}

// NewSearchRequestGleanbotUIElementEnumFromValue returns a pointer to a valid SearchRequestGleanbotUIElementEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSearchRequestGleanbotUIElementEnumFromValue(v string) (*SearchRequestGleanbotUIElementEnum, error) {
	ev := SearchRequestGleanbotUIElementEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SearchRequestGleanbotUIElementEnum: valid values are %v", v, AllowedSearchRequestGleanbotUIElementEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SearchRequestGleanbotUIElementEnum) IsValid() bool {
	for _, existing := range AllowedSearchRequestGleanbotUIElementEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SearchRequestGleanbotUIElementEnum value
func (v SearchRequestGleanbotUIElementEnum) Ptr() *SearchRequestGleanbotUIElementEnum {
	return &v
}

type NullableSearchRequestGleanbotUIElementEnum struct {
	value *SearchRequestGleanbotUIElementEnum
	isSet bool
}

func (v NullableSearchRequestGleanbotUIElementEnum) Get() *SearchRequestGleanbotUIElementEnum {
	return v.value
}

func (v *NullableSearchRequestGleanbotUIElementEnum) Set(val *SearchRequestGleanbotUIElementEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRequestGleanbotUIElementEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRequestGleanbotUIElementEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRequestGleanbotUIElementEnum(val *SearchRequestGleanbotUIElementEnum) *NullableSearchRequestGleanbotUIElementEnum {
	return &NullableSearchRequestGleanbotUIElementEnum{value: val, isSet: true}
}

func (v NullableSearchRequestGleanbotUIElementEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRequestGleanbotUIElementEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

