/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DocumentInsight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentInsight{}

// DocumentInsight struct for DocumentInsight
type DocumentInsight struct {
	Document Document `json:"document"`
	ViewCount *CountInfo `json:"viewCount,omitempty"`
	VisitorCount *CountInfo `json:"visitorCount,omitempty"`
}

// NewDocumentInsight instantiates a new DocumentInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentInsight(document Document) *DocumentInsight {
	this := DocumentInsight{}
	this.Document = document
	return &this
}

// NewDocumentInsightWithDefaults instantiates a new DocumentInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentInsightWithDefaults() *DocumentInsight {
	this := DocumentInsight{}
	return &this
}

// GetDocument returns the Document field value
func (o *DocumentInsight) GetDocument() Document {
	if o == nil {
		var ret Document
		return ret
	}

	return o.Document
}

// GetDocumentOk returns a tuple with the Document field value
// and a boolean to check if the value has been set.
func (o *DocumentInsight) GetDocumentOk() (*Document, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Document, true
}

// SetDocument sets field value
func (o *DocumentInsight) SetDocument(v Document) {
	o.Document = v
}

// GetViewCount returns the ViewCount field value if set, zero value otherwise.
func (o *DocumentInsight) GetViewCount() CountInfo {
	if o == nil || IsNil(o.ViewCount) {
		var ret CountInfo
		return ret
	}
	return *o.ViewCount
}

// GetViewCountOk returns a tuple with the ViewCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInsight) GetViewCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.ViewCount) {
		return nil, false
	}
	return o.ViewCount, true
}

// HasViewCount returns a boolean if a field has been set.
func (o *DocumentInsight) HasViewCount() bool {
	if o != nil && !IsNil(o.ViewCount) {
		return true
	}

	return false
}

// SetViewCount gets a reference to the given CountInfo and assigns it to the ViewCount field.
func (o *DocumentInsight) SetViewCount(v CountInfo) {
	o.ViewCount = &v
}

// GetVisitorCount returns the VisitorCount field value if set, zero value otherwise.
func (o *DocumentInsight) GetVisitorCount() CountInfo {
	if o == nil || IsNil(o.VisitorCount) {
		var ret CountInfo
		return ret
	}
	return *o.VisitorCount
}

// GetVisitorCountOk returns a tuple with the VisitorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInsight) GetVisitorCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.VisitorCount) {
		return nil, false
	}
	return o.VisitorCount, true
}

// HasVisitorCount returns a boolean if a field has been set.
func (o *DocumentInsight) HasVisitorCount() bool {
	if o != nil && !IsNil(o.VisitorCount) {
		return true
	}

	return false
}

// SetVisitorCount gets a reference to the given CountInfo and assigns it to the VisitorCount field.
func (o *DocumentInsight) SetVisitorCount(v CountInfo) {
	o.VisitorCount = &v
}

func (o DocumentInsight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentInsight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["document"] = o.Document
	if !IsNil(o.ViewCount) {
		toSerialize["viewCount"] = o.ViewCount
	}
	if !IsNil(o.VisitorCount) {
		toSerialize["visitorCount"] = o.VisitorCount
	}
	return toSerialize, nil
}

type NullableDocumentInsight struct {
	value *DocumentInsight
	isSet bool
}

func (v NullableDocumentInsight) Get() *DocumentInsight {
	return v.value
}

func (v *NullableDocumentInsight) Set(val *DocumentInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentInsight(val *DocumentInsight) *NullableDocumentInsight {
	return &NullableDocumentInsight{value: val, isSet: true}
}

func (v NullableDocumentInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


