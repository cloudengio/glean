/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// ClientSideCheck the model 'ClientSideCheck'
type ClientSideCheck string

// List of ClientSideCheck
const (
	BADGE_BETA ClientSideCheck = "BADGE_BETA"
	BADGE_NEW ClientSideCheck = "BADGE_NEW"
	BADGE_VERIFICATION_TASKS ClientSideCheck = "BADGE_VERIFICATION_TASKS"
	CAN_INSTALL_EXTENSION ClientSideCheck = "CAN_INSTALL_EXTENSION"
	INITIALLY_COLLAPSED_MENU ClientSideCheck = "INITIALLY_COLLAPSED_MENU"
	HAS_PRODUCT_UPDATES ClientSideCheck = "HAS_PRODUCT_UPDATES"
	IS_DESKTOP ClientSideCheck = "IS_DESKTOP"
	IS_TOUCH_SCREEN ClientSideCheck = "IS_TOUCH_SCREEN"
	ORG_CHART_PERMISSIONS ClientSideCheck = "ORG_CHART_PERMISSIONS"
	CAN_INSTALL_PWA ClientSideCheck = "CAN_INSTALL_PWA"
	IS_DISABLED ClientSideCheck = "IS_DISABLED"
)

// All allowed values of ClientSideCheck enum
var AllowedClientSideCheckEnumValues = []ClientSideCheck{
	"BADGE_BETA",
	"BADGE_NEW",
	"BADGE_VERIFICATION_TASKS",
	"CAN_INSTALL_EXTENSION",
	"INITIALLY_COLLAPSED_MENU",
	"HAS_PRODUCT_UPDATES",
	"IS_DESKTOP",
	"IS_TOUCH_SCREEN",
	"ORG_CHART_PERMISSIONS",
	"CAN_INSTALL_PWA",
	"IS_DISABLED",
}

func (v *ClientSideCheck) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClientSideCheck(value)
	for _, existing := range AllowedClientSideCheckEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClientSideCheck", value)
}

// NewClientSideCheckFromValue returns a pointer to a valid ClientSideCheck
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClientSideCheckFromValue(v string) (*ClientSideCheck, error) {
	ev := ClientSideCheck(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClientSideCheck: valid values are %v", v, AllowedClientSideCheckEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClientSideCheck) IsValid() bool {
	for _, existing := range AllowedClientSideCheckEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClientSideCheck value
func (v ClientSideCheck) Ptr() *ClientSideCheck {
	return &v
}

type NullableClientSideCheck struct {
	value *ClientSideCheck
	isSet bool
}

func (v NullableClientSideCheck) Get() *ClientSideCheck {
	return v.value
}

func (v *NullableClientSideCheck) Set(val *ClientSideCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableClientSideCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableClientSideCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientSideCheck(val *ClientSideCheck) *NullableClientSideCheck {
	return &NullableClientSideCheck{value: val, isSet: true}
}

func (v NullableClientSideCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientSideCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

