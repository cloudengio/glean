/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SectionsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SectionsConfig{}

// SectionsConfig struct for SectionsConfig
type SectionsConfig struct {
	Conditions []DatumCondition `json:"conditions,omitempty"`
}

// NewSectionsConfig instantiates a new SectionsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSectionsConfig() *SectionsConfig {
	this := SectionsConfig{}
	return &this
}

// NewSectionsConfigWithDefaults instantiates a new SectionsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSectionsConfigWithDefaults() *SectionsConfig {
	this := SectionsConfig{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *SectionsConfig) GetConditions() []DatumCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []DatumCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SectionsConfig) GetConditionsOk() ([]DatumCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *SectionsConfig) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []DatumCondition and assigns it to the Conditions field.
func (o *SectionsConfig) SetConditions(v []DatumCondition) {
	o.Conditions = v
}

func (o SectionsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SectionsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	return toSerialize, nil
}

type NullableSectionsConfig struct {
	value *SectionsConfig
	isSet bool
}

func (v NullableSectionsConfig) Get() *SectionsConfig {
	return v.value
}

func (v *NullableSectionsConfig) Set(val *SectionsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSectionsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSectionsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSectionsConfig(val *SectionsConfig) *NullableSectionsConfig {
	return &NullableSectionsConfig{value: val, isSet: true}
}

func (v NullableSectionsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSectionsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


