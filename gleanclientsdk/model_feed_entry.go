/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the FeedEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedEntry{}

// FeedEntry struct for FeedEntry
type FeedEntry struct {
	// optional ID associated with a single feed entry (displayable_list_id)
	EntryId *string `json:"entryId,omitempty"`
	// Title for the result. Can be document title, event title and so on.
	Title string `json:"title"`
	Thumbnail *Thumbnail `json:"thumbnail,omitempty"`
	CreatedBy *Person `json:"createdBy,omitempty"`
	UiConfig *FeedEntryUiConfig `json:"uiConfig,omitempty"`
	// A textual snippet representing this entry, dependent on type. For example, for USER_MENTION, it may contain the sentence in which the mention occurred.
	Snippet *string `json:"snippet,omitempty"`
	// Type of the justification.
	JustificationType *string `json:"justificationType,omitempty"`
	// Server side generated justification string if server provides one.
	Justification *string `json:"justification,omitempty"`
	// An opaque token that represents this particular feed entry in this particular response. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
	Document *Document `json:"document,omitempty"`
	Event *CalendarEvent `json:"event,omitempty"`
	Announcement *Announcement `json:"announcement,omitempty"`
	Collection *Collection `json:"collection,omitempty"`
	CollectionItem *CollectionItem `json:"collectionItem,omitempty"`
	Person *Person `json:"person,omitempty"`
	App *AppResult `json:"app,omitempty"`
	// List of activity where each activity has user, action, timestamp.
	Activities []UserActivity `json:"activities,omitempty"`
	DocumentVisitorCount *CountInfo `json:"documentVisitorCount,omitempty"`
	// View url for the entry if based on links that are not documents in Glean.
	ViewUrl *string `json:"viewUrl,omitempty"`
	// List of client actions suggested by the backend to be included for entry.
	AdditionalClientActions []ClientAction `json:"additionalClientActions,omitempty"`
	ManualFeedbackSignals *FeedManualFeedback `json:"manualFeedbackSignals,omitempty"`
}

// NewFeedEntry instantiates a new FeedEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedEntry(title string) *FeedEntry {
	this := FeedEntry{}
	this.Title = title
	return &this
}

// NewFeedEntryWithDefaults instantiates a new FeedEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedEntryWithDefaults() *FeedEntry {
	this := FeedEntry{}
	return &this
}

// GetEntryId returns the EntryId field value if set, zero value otherwise.
func (o *FeedEntry) GetEntryId() string {
	if o == nil || IsNil(o.EntryId) {
		var ret string
		return ret
	}
	return *o.EntryId
}

// GetEntryIdOk returns a tuple with the EntryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetEntryIdOk() (*string, bool) {
	if o == nil || IsNil(o.EntryId) {
		return nil, false
	}
	return o.EntryId, true
}

// HasEntryId returns a boolean if a field has been set.
func (o *FeedEntry) HasEntryId() bool {
	if o != nil && !IsNil(o.EntryId) {
		return true
	}

	return false
}

// SetEntryId gets a reference to the given string and assigns it to the EntryId field.
func (o *FeedEntry) SetEntryId(v string) {
	o.EntryId = &v
}

// GetTitle returns the Title field value
func (o *FeedEntry) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *FeedEntry) SetTitle(v string) {
	o.Title = v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *FeedEntry) GetThumbnail() Thumbnail {
	if o == nil || IsNil(o.Thumbnail) {
		var ret Thumbnail
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetThumbnailOk() (*Thumbnail, bool) {
	if o == nil || IsNil(o.Thumbnail) {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *FeedEntry) HasThumbnail() bool {
	if o != nil && !IsNil(o.Thumbnail) {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given Thumbnail and assigns it to the Thumbnail field.
func (o *FeedEntry) SetThumbnail(v Thumbnail) {
	o.Thumbnail = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *FeedEntry) GetCreatedBy() Person {
	if o == nil || IsNil(o.CreatedBy) {
		var ret Person
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetCreatedByOk() (*Person, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *FeedEntry) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given Person and assigns it to the CreatedBy field.
func (o *FeedEntry) SetCreatedBy(v Person) {
	o.CreatedBy = &v
}

// GetUiConfig returns the UiConfig field value if set, zero value otherwise.
func (o *FeedEntry) GetUiConfig() FeedEntryUiConfig {
	if o == nil || IsNil(o.UiConfig) {
		var ret FeedEntryUiConfig
		return ret
	}
	return *o.UiConfig
}

// GetUiConfigOk returns a tuple with the UiConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetUiConfigOk() (*FeedEntryUiConfig, bool) {
	if o == nil || IsNil(o.UiConfig) {
		return nil, false
	}
	return o.UiConfig, true
}

// HasUiConfig returns a boolean if a field has been set.
func (o *FeedEntry) HasUiConfig() bool {
	if o != nil && !IsNil(o.UiConfig) {
		return true
	}

	return false
}

// SetUiConfig gets a reference to the given FeedEntryUiConfig and assigns it to the UiConfig field.
func (o *FeedEntry) SetUiConfig(v FeedEntryUiConfig) {
	o.UiConfig = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *FeedEntry) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *FeedEntry) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *FeedEntry) SetSnippet(v string) {
	o.Snippet = &v
}

// GetJustificationType returns the JustificationType field value if set, zero value otherwise.
func (o *FeedEntry) GetJustificationType() string {
	if o == nil || IsNil(o.JustificationType) {
		var ret string
		return ret
	}
	return *o.JustificationType
}

// GetJustificationTypeOk returns a tuple with the JustificationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetJustificationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.JustificationType) {
		return nil, false
	}
	return o.JustificationType, true
}

// HasJustificationType returns a boolean if a field has been set.
func (o *FeedEntry) HasJustificationType() bool {
	if o != nil && !IsNil(o.JustificationType) {
		return true
	}

	return false
}

// SetJustificationType gets a reference to the given string and assigns it to the JustificationType field.
func (o *FeedEntry) SetJustificationType(v string) {
	o.JustificationType = &v
}

// GetJustification returns the Justification field value if set, zero value otherwise.
func (o *FeedEntry) GetJustification() string {
	if o == nil || IsNil(o.Justification) {
		var ret string
		return ret
	}
	return *o.Justification
}

// GetJustificationOk returns a tuple with the Justification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetJustificationOk() (*string, bool) {
	if o == nil || IsNil(o.Justification) {
		return nil, false
	}
	return o.Justification, true
}

// HasJustification returns a boolean if a field has been set.
func (o *FeedEntry) HasJustification() bool {
	if o != nil && !IsNil(o.Justification) {
		return true
	}

	return false
}

// SetJustification gets a reference to the given string and assigns it to the Justification field.
func (o *FeedEntry) SetJustification(v string) {
	o.Justification = &v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *FeedEntry) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *FeedEntry) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *FeedEntry) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

// GetDocument returns the Document field value if set, zero value otherwise.
func (o *FeedEntry) GetDocument() Document {
	if o == nil || IsNil(o.Document) {
		var ret Document
		return ret
	}
	return *o.Document
}

// GetDocumentOk returns a tuple with the Document field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.Document) {
		return nil, false
	}
	return o.Document, true
}

// HasDocument returns a boolean if a field has been set.
func (o *FeedEntry) HasDocument() bool {
	if o != nil && !IsNil(o.Document) {
		return true
	}

	return false
}

// SetDocument gets a reference to the given Document and assigns it to the Document field.
func (o *FeedEntry) SetDocument(v Document) {
	o.Document = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *FeedEntry) GetEvent() CalendarEvent {
	if o == nil || IsNil(o.Event) {
		var ret CalendarEvent
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetEventOk() (*CalendarEvent, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *FeedEntry) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given CalendarEvent and assigns it to the Event field.
func (o *FeedEntry) SetEvent(v CalendarEvent) {
	o.Event = &v
}

// GetAnnouncement returns the Announcement field value if set, zero value otherwise.
func (o *FeedEntry) GetAnnouncement() Announcement {
	if o == nil || IsNil(o.Announcement) {
		var ret Announcement
		return ret
	}
	return *o.Announcement
}

// GetAnnouncementOk returns a tuple with the Announcement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetAnnouncementOk() (*Announcement, bool) {
	if o == nil || IsNil(o.Announcement) {
		return nil, false
	}
	return o.Announcement, true
}

// HasAnnouncement returns a boolean if a field has been set.
func (o *FeedEntry) HasAnnouncement() bool {
	if o != nil && !IsNil(o.Announcement) {
		return true
	}

	return false
}

// SetAnnouncement gets a reference to the given Announcement and assigns it to the Announcement field.
func (o *FeedEntry) SetAnnouncement(v Announcement) {
	o.Announcement = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *FeedEntry) GetCollection() Collection {
	if o == nil || IsNil(o.Collection) {
		var ret Collection
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetCollectionOk() (*Collection, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *FeedEntry) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given Collection and assigns it to the Collection field.
func (o *FeedEntry) SetCollection(v Collection) {
	o.Collection = &v
}

// GetCollectionItem returns the CollectionItem field value if set, zero value otherwise.
func (o *FeedEntry) GetCollectionItem() CollectionItem {
	if o == nil || IsNil(o.CollectionItem) {
		var ret CollectionItem
		return ret
	}
	return *o.CollectionItem
}

// GetCollectionItemOk returns a tuple with the CollectionItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetCollectionItemOk() (*CollectionItem, bool) {
	if o == nil || IsNil(o.CollectionItem) {
		return nil, false
	}
	return o.CollectionItem, true
}

// HasCollectionItem returns a boolean if a field has been set.
func (o *FeedEntry) HasCollectionItem() bool {
	if o != nil && !IsNil(o.CollectionItem) {
		return true
	}

	return false
}

// SetCollectionItem gets a reference to the given CollectionItem and assigns it to the CollectionItem field.
func (o *FeedEntry) SetCollectionItem(v CollectionItem) {
	o.CollectionItem = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *FeedEntry) GetPerson() Person {
	if o == nil || IsNil(o.Person) {
		var ret Person
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetPersonOk() (*Person, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *FeedEntry) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given Person and assigns it to the Person field.
func (o *FeedEntry) SetPerson(v Person) {
	o.Person = &v
}

// GetApp returns the App field value if set, zero value otherwise.
func (o *FeedEntry) GetApp() AppResult {
	if o == nil || IsNil(o.App) {
		var ret AppResult
		return ret
	}
	return *o.App
}

// GetAppOk returns a tuple with the App field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetAppOk() (*AppResult, bool) {
	if o == nil || IsNil(o.App) {
		return nil, false
	}
	return o.App, true
}

// HasApp returns a boolean if a field has been set.
func (o *FeedEntry) HasApp() bool {
	if o != nil && !IsNil(o.App) {
		return true
	}

	return false
}

// SetApp gets a reference to the given AppResult and assigns it to the App field.
func (o *FeedEntry) SetApp(v AppResult) {
	o.App = &v
}

// GetActivities returns the Activities field value if set, zero value otherwise.
func (o *FeedEntry) GetActivities() []UserActivity {
	if o == nil || IsNil(o.Activities) {
		var ret []UserActivity
		return ret
	}
	return o.Activities
}

// GetActivitiesOk returns a tuple with the Activities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetActivitiesOk() ([]UserActivity, bool) {
	if o == nil || IsNil(o.Activities) {
		return nil, false
	}
	return o.Activities, true
}

// HasActivities returns a boolean if a field has been set.
func (o *FeedEntry) HasActivities() bool {
	if o != nil && !IsNil(o.Activities) {
		return true
	}

	return false
}

// SetActivities gets a reference to the given []UserActivity and assigns it to the Activities field.
func (o *FeedEntry) SetActivities(v []UserActivity) {
	o.Activities = v
}

// GetDocumentVisitorCount returns the DocumentVisitorCount field value if set, zero value otherwise.
func (o *FeedEntry) GetDocumentVisitorCount() CountInfo {
	if o == nil || IsNil(o.DocumentVisitorCount) {
		var ret CountInfo
		return ret
	}
	return *o.DocumentVisitorCount
}

// GetDocumentVisitorCountOk returns a tuple with the DocumentVisitorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetDocumentVisitorCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.DocumentVisitorCount) {
		return nil, false
	}
	return o.DocumentVisitorCount, true
}

// HasDocumentVisitorCount returns a boolean if a field has been set.
func (o *FeedEntry) HasDocumentVisitorCount() bool {
	if o != nil && !IsNil(o.DocumentVisitorCount) {
		return true
	}

	return false
}

// SetDocumentVisitorCount gets a reference to the given CountInfo and assigns it to the DocumentVisitorCount field.
func (o *FeedEntry) SetDocumentVisitorCount(v CountInfo) {
	o.DocumentVisitorCount = &v
}

// GetViewUrl returns the ViewUrl field value if set, zero value otherwise.
func (o *FeedEntry) GetViewUrl() string {
	if o == nil || IsNil(o.ViewUrl) {
		var ret string
		return ret
	}
	return *o.ViewUrl
}

// GetViewUrlOk returns a tuple with the ViewUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetViewUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ViewUrl) {
		return nil, false
	}
	return o.ViewUrl, true
}

// HasViewUrl returns a boolean if a field has been set.
func (o *FeedEntry) HasViewUrl() bool {
	if o != nil && !IsNil(o.ViewUrl) {
		return true
	}

	return false
}

// SetViewUrl gets a reference to the given string and assigns it to the ViewUrl field.
func (o *FeedEntry) SetViewUrl(v string) {
	o.ViewUrl = &v
}

// GetAdditionalClientActions returns the AdditionalClientActions field value if set, zero value otherwise.
func (o *FeedEntry) GetAdditionalClientActions() []ClientAction {
	if o == nil || IsNil(o.AdditionalClientActions) {
		var ret []ClientAction
		return ret
	}
	return o.AdditionalClientActions
}

// GetAdditionalClientActionsOk returns a tuple with the AdditionalClientActions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetAdditionalClientActionsOk() ([]ClientAction, bool) {
	if o == nil || IsNil(o.AdditionalClientActions) {
		return nil, false
	}
	return o.AdditionalClientActions, true
}

// HasAdditionalClientActions returns a boolean if a field has been set.
func (o *FeedEntry) HasAdditionalClientActions() bool {
	if o != nil && !IsNil(o.AdditionalClientActions) {
		return true
	}

	return false
}

// SetAdditionalClientActions gets a reference to the given []ClientAction and assigns it to the AdditionalClientActions field.
func (o *FeedEntry) SetAdditionalClientActions(v []ClientAction) {
	o.AdditionalClientActions = v
}

// GetManualFeedbackSignals returns the ManualFeedbackSignals field value if set, zero value otherwise.
func (o *FeedEntry) GetManualFeedbackSignals() FeedManualFeedback {
	if o == nil || IsNil(o.ManualFeedbackSignals) {
		var ret FeedManualFeedback
		return ret
	}
	return *o.ManualFeedbackSignals
}

// GetManualFeedbackSignalsOk returns a tuple with the ManualFeedbackSignals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedEntry) GetManualFeedbackSignalsOk() (*FeedManualFeedback, bool) {
	if o == nil || IsNil(o.ManualFeedbackSignals) {
		return nil, false
	}
	return o.ManualFeedbackSignals, true
}

// HasManualFeedbackSignals returns a boolean if a field has been set.
func (o *FeedEntry) HasManualFeedbackSignals() bool {
	if o != nil && !IsNil(o.ManualFeedbackSignals) {
		return true
	}

	return false
}

// SetManualFeedbackSignals gets a reference to the given FeedManualFeedback and assigns it to the ManualFeedbackSignals field.
func (o *FeedEntry) SetManualFeedbackSignals(v FeedManualFeedback) {
	o.ManualFeedbackSignals = &v
}

func (o FeedEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntryId) {
		toSerialize["entryId"] = o.EntryId
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.Thumbnail) {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.UiConfig) {
		toSerialize["uiConfig"] = o.UiConfig
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.JustificationType) {
		toSerialize["justificationType"] = o.JustificationType
	}
	if !IsNil(o.Justification) {
		toSerialize["justification"] = o.Justification
	}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	if !IsNil(o.Document) {
		toSerialize["document"] = o.Document
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.Announcement) {
		toSerialize["announcement"] = o.Announcement
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	if !IsNil(o.CollectionItem) {
		toSerialize["collectionItem"] = o.CollectionItem
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if !IsNil(o.App) {
		toSerialize["app"] = o.App
	}
	if !IsNil(o.Activities) {
		toSerialize["activities"] = o.Activities
	}
	if !IsNil(o.DocumentVisitorCount) {
		toSerialize["documentVisitorCount"] = o.DocumentVisitorCount
	}
	if !IsNil(o.ViewUrl) {
		toSerialize["viewUrl"] = o.ViewUrl
	}
	if !IsNil(o.AdditionalClientActions) {
		toSerialize["additionalClientActions"] = o.AdditionalClientActions
	}
	if !IsNil(o.ManualFeedbackSignals) {
		toSerialize["manualFeedbackSignals"] = o.ManualFeedbackSignals
	}
	return toSerialize, nil
}

type NullableFeedEntry struct {
	value *FeedEntry
	isSet bool
}

func (v NullableFeedEntry) Get() *FeedEntry {
	return v.value
}

func (v *NullableFeedEntry) Set(val *FeedEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedEntry(val *FeedEntry) *NullableFeedEntry {
	return &NullableFeedEntry{value: val, isSet: true}
}

func (v NullableFeedEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


