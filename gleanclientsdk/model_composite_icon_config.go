/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CompositeIconConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompositeIconConfig{}

// CompositeIconConfig struct for CompositeIconConfig
type CompositeIconConfig struct {
	Conditions []DatumCondition `json:"conditions,omitempty"`
	OverlayColor *string `json:"overlayColor,omitempty"`
	// The size of the secondary icon overlay, expressed as a fraction of the primary icon size. Value should be less than or equal to 0.75, the default is 0.75.
	OverlaySizeRatio *float32 `json:"overlaySizeRatio,omitempty"`
	// If true, the secondary config will be used in cases where an icon overlay can't be displayed, e.g. for small icons.
	PreferSecondaryForNoOverlay *bool `json:"preferSecondaryForNoOverlay,omitempty"`
	Primary *IconConfig `json:"primary,omitempty"`
	Secondary *IconConfig `json:"secondary,omitempty"`
	// The size of the secondary icon, expressed as a fraction of the primary icon size. For example, if the primary icon is displayed at 40px and secondarySize is 0.5, the secondary icon will be 20px. Should be less than or equal to overlaySize if both are specified. Default is 0.5.
	SecondarySizeRatio *float32 `json:"secondarySizeRatio,omitempty"`
}

// NewCompositeIconConfig instantiates a new CompositeIconConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompositeIconConfig() *CompositeIconConfig {
	this := CompositeIconConfig{}
	return &this
}

// NewCompositeIconConfigWithDefaults instantiates a new CompositeIconConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompositeIconConfigWithDefaults() *CompositeIconConfig {
	this := CompositeIconConfig{}
	return &this
}

// GetConditions returns the Conditions field value if set, zero value otherwise.
func (o *CompositeIconConfig) GetConditions() []DatumCondition {
	if o == nil || IsNil(o.Conditions) {
		var ret []DatumCondition
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeIconConfig) GetConditionsOk() ([]DatumCondition, bool) {
	if o == nil || IsNil(o.Conditions) {
		return nil, false
	}
	return o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *CompositeIconConfig) HasConditions() bool {
	if o != nil && !IsNil(o.Conditions) {
		return true
	}

	return false
}

// SetConditions gets a reference to the given []DatumCondition and assigns it to the Conditions field.
func (o *CompositeIconConfig) SetConditions(v []DatumCondition) {
	o.Conditions = v
}

// GetOverlayColor returns the OverlayColor field value if set, zero value otherwise.
func (o *CompositeIconConfig) GetOverlayColor() string {
	if o == nil || IsNil(o.OverlayColor) {
		var ret string
		return ret
	}
	return *o.OverlayColor
}

// GetOverlayColorOk returns a tuple with the OverlayColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeIconConfig) GetOverlayColorOk() (*string, bool) {
	if o == nil || IsNil(o.OverlayColor) {
		return nil, false
	}
	return o.OverlayColor, true
}

// HasOverlayColor returns a boolean if a field has been set.
func (o *CompositeIconConfig) HasOverlayColor() bool {
	if o != nil && !IsNil(o.OverlayColor) {
		return true
	}

	return false
}

// SetOverlayColor gets a reference to the given string and assigns it to the OverlayColor field.
func (o *CompositeIconConfig) SetOverlayColor(v string) {
	o.OverlayColor = &v
}

// GetOverlaySizeRatio returns the OverlaySizeRatio field value if set, zero value otherwise.
func (o *CompositeIconConfig) GetOverlaySizeRatio() float32 {
	if o == nil || IsNil(o.OverlaySizeRatio) {
		var ret float32
		return ret
	}
	return *o.OverlaySizeRatio
}

// GetOverlaySizeRatioOk returns a tuple with the OverlaySizeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeIconConfig) GetOverlaySizeRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.OverlaySizeRatio) {
		return nil, false
	}
	return o.OverlaySizeRatio, true
}

// HasOverlaySizeRatio returns a boolean if a field has been set.
func (o *CompositeIconConfig) HasOverlaySizeRatio() bool {
	if o != nil && !IsNil(o.OverlaySizeRatio) {
		return true
	}

	return false
}

// SetOverlaySizeRatio gets a reference to the given float32 and assigns it to the OverlaySizeRatio field.
func (o *CompositeIconConfig) SetOverlaySizeRatio(v float32) {
	o.OverlaySizeRatio = &v
}

// GetPreferSecondaryForNoOverlay returns the PreferSecondaryForNoOverlay field value if set, zero value otherwise.
func (o *CompositeIconConfig) GetPreferSecondaryForNoOverlay() bool {
	if o == nil || IsNil(o.PreferSecondaryForNoOverlay) {
		var ret bool
		return ret
	}
	return *o.PreferSecondaryForNoOverlay
}

// GetPreferSecondaryForNoOverlayOk returns a tuple with the PreferSecondaryForNoOverlay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeIconConfig) GetPreferSecondaryForNoOverlayOk() (*bool, bool) {
	if o == nil || IsNil(o.PreferSecondaryForNoOverlay) {
		return nil, false
	}
	return o.PreferSecondaryForNoOverlay, true
}

// HasPreferSecondaryForNoOverlay returns a boolean if a field has been set.
func (o *CompositeIconConfig) HasPreferSecondaryForNoOverlay() bool {
	if o != nil && !IsNil(o.PreferSecondaryForNoOverlay) {
		return true
	}

	return false
}

// SetPreferSecondaryForNoOverlay gets a reference to the given bool and assigns it to the PreferSecondaryForNoOverlay field.
func (o *CompositeIconConfig) SetPreferSecondaryForNoOverlay(v bool) {
	o.PreferSecondaryForNoOverlay = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *CompositeIconConfig) GetPrimary() IconConfig {
	if o == nil || IsNil(o.Primary) {
		var ret IconConfig
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeIconConfig) GetPrimaryOk() (*IconConfig, bool) {
	if o == nil || IsNil(o.Primary) {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *CompositeIconConfig) HasPrimary() bool {
	if o != nil && !IsNil(o.Primary) {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given IconConfig and assigns it to the Primary field.
func (o *CompositeIconConfig) SetPrimary(v IconConfig) {
	o.Primary = &v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *CompositeIconConfig) GetSecondary() IconConfig {
	if o == nil || IsNil(o.Secondary) {
		var ret IconConfig
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeIconConfig) GetSecondaryOk() (*IconConfig, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *CompositeIconConfig) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given IconConfig and assigns it to the Secondary field.
func (o *CompositeIconConfig) SetSecondary(v IconConfig) {
	o.Secondary = &v
}

// GetSecondarySizeRatio returns the SecondarySizeRatio field value if set, zero value otherwise.
func (o *CompositeIconConfig) GetSecondarySizeRatio() float32 {
	if o == nil || IsNil(o.SecondarySizeRatio) {
		var ret float32
		return ret
	}
	return *o.SecondarySizeRatio
}

// GetSecondarySizeRatioOk returns a tuple with the SecondarySizeRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompositeIconConfig) GetSecondarySizeRatioOk() (*float32, bool) {
	if o == nil || IsNil(o.SecondarySizeRatio) {
		return nil, false
	}
	return o.SecondarySizeRatio, true
}

// HasSecondarySizeRatio returns a boolean if a field has been set.
func (o *CompositeIconConfig) HasSecondarySizeRatio() bool {
	if o != nil && !IsNil(o.SecondarySizeRatio) {
		return true
	}

	return false
}

// SetSecondarySizeRatio gets a reference to the given float32 and assigns it to the SecondarySizeRatio field.
func (o *CompositeIconConfig) SetSecondarySizeRatio(v float32) {
	o.SecondarySizeRatio = &v
}

func (o CompositeIconConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompositeIconConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Conditions) {
		toSerialize["conditions"] = o.Conditions
	}
	if !IsNil(o.OverlayColor) {
		toSerialize["overlayColor"] = o.OverlayColor
	}
	if !IsNil(o.OverlaySizeRatio) {
		toSerialize["overlaySizeRatio"] = o.OverlaySizeRatio
	}
	if !IsNil(o.PreferSecondaryForNoOverlay) {
		toSerialize["preferSecondaryForNoOverlay"] = o.PreferSecondaryForNoOverlay
	}
	if !IsNil(o.Primary) {
		toSerialize["primary"] = o.Primary
	}
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}
	if !IsNil(o.SecondarySizeRatio) {
		toSerialize["secondarySizeRatio"] = o.SecondarySizeRatio
	}
	return toSerialize, nil
}

type NullableCompositeIconConfig struct {
	value *CompositeIconConfig
	isSet bool
}

func (v NullableCompositeIconConfig) Get() *CompositeIconConfig {
	return v.value
}

func (v *NullableCompositeIconConfig) Set(val *CompositeIconConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCompositeIconConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCompositeIconConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompositeIconConfig(val *CompositeIconConfig) *NullableCompositeIconConfig {
	return &NullableCompositeIconConfig{value: val, isSet: true}
}

func (v NullableCompositeIconConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompositeIconConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


