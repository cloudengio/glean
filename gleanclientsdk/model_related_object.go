/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the RelatedObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelatedObject{}

// RelatedObject struct for RelatedObject
type RelatedObject struct {
	// The ID of the related object
	Id string `json:"id"`
	Metadata *RelatedObjectMetadata `json:"metadata,omitempty"`
}

// NewRelatedObject instantiates a new RelatedObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedObject(id string) *RelatedObject {
	this := RelatedObject{}
	this.Id = id
	return &this
}

// NewRelatedObjectWithDefaults instantiates a new RelatedObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedObjectWithDefaults() *RelatedObject {
	this := RelatedObject{}
	return &this
}

// GetId returns the Id field value
func (o *RelatedObject) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RelatedObject) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RelatedObject) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *RelatedObject) GetMetadata() RelatedObjectMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret RelatedObjectMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelatedObject) GetMetadataOk() (*RelatedObjectMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *RelatedObject) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given RelatedObjectMetadata and assigns it to the Metadata field.
func (o *RelatedObject) SetMetadata(v RelatedObjectMetadata) {
	o.Metadata = &v
}

func (o RelatedObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelatedObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

type NullableRelatedObject struct {
	value *RelatedObject
	isSet bool
}

func (v NullableRelatedObject) Get() *RelatedObject {
	return v.value
}

func (v *NullableRelatedObject) Set(val *RelatedObject) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedObject) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedObject(val *RelatedObject) *NullableRelatedObject {
	return &NullableRelatedObject{value: val, isSet: true}
}

func (v NullableRelatedObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


