/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AnnouncementAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnouncementAllOf{}

// AnnouncementAllOf struct for AnnouncementAllOf
type AnnouncementAllOf struct {
	// The opaque id of the announcement.
	Id *int32 `json:"id,omitempty"`
	Author *Person `json:"author,omitempty"`
	// Server Unix timestamp of the creation time (in seconds since epoch UTC).
	CreateTimestamp *int32 `json:"createTimestamp,omitempty"`
	// Server Unix timestamp of the last update time (in seconds since epoch UTC).
	LastUpdateTimestamp *int32 `json:"lastUpdateTimestamp,omitempty"`
	UpdatedBy *Person `json:"updatedBy,omitempty"`
	ViewerInfo *AnnouncementAllOfViewerInfo `json:"viewerInfo,omitempty"`
	SourceDocument *Document `json:"sourceDocument,omitempty"`
	// Whether or not the announcement is published.
	IsPublished *bool `json:"isPublished,omitempty"`
}

// NewAnnouncementAllOf instantiates a new AnnouncementAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnouncementAllOf() *AnnouncementAllOf {
	this := AnnouncementAllOf{}
	return &this
}

// NewAnnouncementAllOfWithDefaults instantiates a new AnnouncementAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementAllOfWithDefaults() *AnnouncementAllOf {
	this := AnnouncementAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AnnouncementAllOf) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOf) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AnnouncementAllOf) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AnnouncementAllOf) SetId(v int32) {
	o.Id = &v
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *AnnouncementAllOf) GetAuthor() Person {
	if o == nil || IsNil(o.Author) {
		var ret Person
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOf) GetAuthorOk() (*Person, bool) {
	if o == nil || IsNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *AnnouncementAllOf) HasAuthor() bool {
	if o != nil && !IsNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given Person and assigns it to the Author field.
func (o *AnnouncementAllOf) SetAuthor(v Person) {
	o.Author = &v
}

// GetCreateTimestamp returns the CreateTimestamp field value if set, zero value otherwise.
func (o *AnnouncementAllOf) GetCreateTimestamp() int32 {
	if o == nil || IsNil(o.CreateTimestamp) {
		var ret int32
		return ret
	}
	return *o.CreateTimestamp
}

// GetCreateTimestampOk returns a tuple with the CreateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOf) GetCreateTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.CreateTimestamp) {
		return nil, false
	}
	return o.CreateTimestamp, true
}

// HasCreateTimestamp returns a boolean if a field has been set.
func (o *AnnouncementAllOf) HasCreateTimestamp() bool {
	if o != nil && !IsNil(o.CreateTimestamp) {
		return true
	}

	return false
}

// SetCreateTimestamp gets a reference to the given int32 and assigns it to the CreateTimestamp field.
func (o *AnnouncementAllOf) SetCreateTimestamp(v int32) {
	o.CreateTimestamp = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value if set, zero value otherwise.
func (o *AnnouncementAllOf) GetLastUpdateTimestamp() int32 {
	if o == nil || IsNil(o.LastUpdateTimestamp) {
		var ret int32
		return ret
	}
	return *o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOf) GetLastUpdateTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.LastUpdateTimestamp) {
		return nil, false
	}
	return o.LastUpdateTimestamp, true
}

// HasLastUpdateTimestamp returns a boolean if a field has been set.
func (o *AnnouncementAllOf) HasLastUpdateTimestamp() bool {
	if o != nil && !IsNil(o.LastUpdateTimestamp) {
		return true
	}

	return false
}

// SetLastUpdateTimestamp gets a reference to the given int32 and assigns it to the LastUpdateTimestamp field.
func (o *AnnouncementAllOf) SetLastUpdateTimestamp(v int32) {
	o.LastUpdateTimestamp = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *AnnouncementAllOf) GetUpdatedBy() Person {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret Person
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOf) GetUpdatedByOk() (*Person, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *AnnouncementAllOf) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given Person and assigns it to the UpdatedBy field.
func (o *AnnouncementAllOf) SetUpdatedBy(v Person) {
	o.UpdatedBy = &v
}

// GetViewerInfo returns the ViewerInfo field value if set, zero value otherwise.
func (o *AnnouncementAllOf) GetViewerInfo() AnnouncementAllOfViewerInfo {
	if o == nil || IsNil(o.ViewerInfo) {
		var ret AnnouncementAllOfViewerInfo
		return ret
	}
	return *o.ViewerInfo
}

// GetViewerInfoOk returns a tuple with the ViewerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOf) GetViewerInfoOk() (*AnnouncementAllOfViewerInfo, bool) {
	if o == nil || IsNil(o.ViewerInfo) {
		return nil, false
	}
	return o.ViewerInfo, true
}

// HasViewerInfo returns a boolean if a field has been set.
func (o *AnnouncementAllOf) HasViewerInfo() bool {
	if o != nil && !IsNil(o.ViewerInfo) {
		return true
	}

	return false
}

// SetViewerInfo gets a reference to the given AnnouncementAllOfViewerInfo and assigns it to the ViewerInfo field.
func (o *AnnouncementAllOf) SetViewerInfo(v AnnouncementAllOfViewerInfo) {
	o.ViewerInfo = &v
}

// GetSourceDocument returns the SourceDocument field value if set, zero value otherwise.
func (o *AnnouncementAllOf) GetSourceDocument() Document {
	if o == nil || IsNil(o.SourceDocument) {
		var ret Document
		return ret
	}
	return *o.SourceDocument
}

// GetSourceDocumentOk returns a tuple with the SourceDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOf) GetSourceDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.SourceDocument) {
		return nil, false
	}
	return o.SourceDocument, true
}

// HasSourceDocument returns a boolean if a field has been set.
func (o *AnnouncementAllOf) HasSourceDocument() bool {
	if o != nil && !IsNil(o.SourceDocument) {
		return true
	}

	return false
}

// SetSourceDocument gets a reference to the given Document and assigns it to the SourceDocument field.
func (o *AnnouncementAllOf) SetSourceDocument(v Document) {
	o.SourceDocument = &v
}

// GetIsPublished returns the IsPublished field value if set, zero value otherwise.
func (o *AnnouncementAllOf) GetIsPublished() bool {
	if o == nil || IsNil(o.IsPublished) {
		var ret bool
		return ret
	}
	return *o.IsPublished
}

// GetIsPublishedOk returns a tuple with the IsPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementAllOf) GetIsPublishedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsPublished) {
		return nil, false
	}
	return o.IsPublished, true
}

// HasIsPublished returns a boolean if a field has been set.
func (o *AnnouncementAllOf) HasIsPublished() bool {
	if o != nil && !IsNil(o.IsPublished) {
		return true
	}

	return false
}

// SetIsPublished gets a reference to the given bool and assigns it to the IsPublished field.
func (o *AnnouncementAllOf) SetIsPublished(v bool) {
	o.IsPublished = &v
}

func (o AnnouncementAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnouncementAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !IsNil(o.CreateTimestamp) {
		toSerialize["createTimestamp"] = o.CreateTimestamp
	}
	if !IsNil(o.LastUpdateTimestamp) {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.ViewerInfo) {
		toSerialize["viewerInfo"] = o.ViewerInfo
	}
	if !IsNil(o.SourceDocument) {
		toSerialize["sourceDocument"] = o.SourceDocument
	}
	if !IsNil(o.IsPublished) {
		toSerialize["isPublished"] = o.IsPublished
	}
	return toSerialize, nil
}

type NullableAnnouncementAllOf struct {
	value *AnnouncementAllOf
	isSet bool
}

func (v NullableAnnouncementAllOf) Get() *AnnouncementAllOf {
	return v.value
}

func (v *NullableAnnouncementAllOf) Set(val *AnnouncementAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncementAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncementAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncementAllOf(val *AnnouncementAllOf) *NullableAnnouncementAllOf {
	return &NullableAnnouncementAllOf{value: val, isSet: true}
}

func (v NullableAnnouncementAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncementAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


