/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SummarizeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SummarizeResponse{}

// SummarizeResponse struct for SummarizeResponse
type SummarizeResponse struct {
	Summary *Summary `json:"summary,omitempty"`
	// Debug details for this summary if debug is enabled
	DebugInfo *string `json:"debugInfo,omitempty"`
	// An opaque token that represents this summary in this particular query. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
}

// NewSummarizeResponse instantiates a new SummarizeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummarizeResponse() *SummarizeResponse {
	this := SummarizeResponse{}
	return &this
}

// NewSummarizeResponseWithDefaults instantiates a new SummarizeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummarizeResponseWithDefaults() *SummarizeResponse {
	this := SummarizeResponse{}
	return &this
}

// GetSummary returns the Summary field value if set, zero value otherwise.
func (o *SummarizeResponse) GetSummary() Summary {
	if o == nil || IsNil(o.Summary) {
		var ret Summary
		return ret
	}
	return *o.Summary
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarizeResponse) GetSummaryOk() (*Summary, bool) {
	if o == nil || IsNil(o.Summary) {
		return nil, false
	}
	return o.Summary, true
}

// HasSummary returns a boolean if a field has been set.
func (o *SummarizeResponse) HasSummary() bool {
	if o != nil && !IsNil(o.Summary) {
		return true
	}

	return false
}

// SetSummary gets a reference to the given Summary and assigns it to the Summary field.
func (o *SummarizeResponse) SetSummary(v Summary) {
	o.Summary = &v
}

// GetDebugInfo returns the DebugInfo field value if set, zero value otherwise.
func (o *SummarizeResponse) GetDebugInfo() string {
	if o == nil || IsNil(o.DebugInfo) {
		var ret string
		return ret
	}
	return *o.DebugInfo
}

// GetDebugInfoOk returns a tuple with the DebugInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarizeResponse) GetDebugInfoOk() (*string, bool) {
	if o == nil || IsNil(o.DebugInfo) {
		return nil, false
	}
	return o.DebugInfo, true
}

// HasDebugInfo returns a boolean if a field has been set.
func (o *SummarizeResponse) HasDebugInfo() bool {
	if o != nil && !IsNil(o.DebugInfo) {
		return true
	}

	return false
}

// SetDebugInfo gets a reference to the given string and assigns it to the DebugInfo field.
func (o *SummarizeResponse) SetDebugInfo(v string) {
	o.DebugInfo = &v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *SummarizeResponse) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SummarizeResponse) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *SummarizeResponse) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *SummarizeResponse) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

func (o SummarizeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SummarizeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Summary) {
		toSerialize["summary"] = o.Summary
	}
	if !IsNil(o.DebugInfo) {
		toSerialize["debugInfo"] = o.DebugInfo
	}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	return toSerialize, nil
}

type NullableSummarizeResponse struct {
	value *SummarizeResponse
	isSet bool
}

func (v NullableSummarizeResponse) Get() *SummarizeResponse {
	return v.value
}

func (v *NullableSummarizeResponse) Set(val *SummarizeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSummarizeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSummarizeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummarizeResponse(val *SummarizeResponse) *NullableSummarizeResponse {
	return &NullableSummarizeResponse{value: val, isSet: true}
}

func (v NullableSummarizeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummarizeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


