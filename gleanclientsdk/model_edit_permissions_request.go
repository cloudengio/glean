/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the EditPermissionsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditPermissionsRequest{}

// EditPermissionsRequest struct for EditPermissionsRequest
type EditPermissionsRequest struct {
	// The ids of the users whose permissions will be edited
	UserIds []string `json:"userIds,omitempty"`
	Permissions Permissions `json:"permissions"`
}

// NewEditPermissionsRequest instantiates a new EditPermissionsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditPermissionsRequest(permissions Permissions) *EditPermissionsRequest {
	this := EditPermissionsRequest{}
	this.Permissions = permissions
	return &this
}

// NewEditPermissionsRequestWithDefaults instantiates a new EditPermissionsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditPermissionsRequestWithDefaults() *EditPermissionsRequest {
	this := EditPermissionsRequest{}
	return &this
}

// GetUserIds returns the UserIds field value if set, zero value otherwise.
func (o *EditPermissionsRequest) GetUserIds() []string {
	if o == nil || IsNil(o.UserIds) {
		var ret []string
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditPermissionsRequest) GetUserIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *EditPermissionsRequest) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []string and assigns it to the UserIds field.
func (o *EditPermissionsRequest) SetUserIds(v []string) {
	o.UserIds = v
}

// GetPermissions returns the Permissions field value
func (o *EditPermissionsRequest) GetPermissions() Permissions {
	if o == nil {
		var ret Permissions
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
func (o *EditPermissionsRequest) GetPermissionsOk() (*Permissions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// SetPermissions sets field value
func (o *EditPermissionsRequest) SetPermissions(v Permissions) {
	o.Permissions = v
}

func (o EditPermissionsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditPermissionsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserIds) {
		toSerialize["userIds"] = o.UserIds
	}
	toSerialize["permissions"] = o.Permissions
	return toSerialize, nil
}

type NullableEditPermissionsRequest struct {
	value *EditPermissionsRequest
	isSet bool
}

func (v NullableEditPermissionsRequest) Get() *EditPermissionsRequest {
	return v.value
}

func (v *NullableEditPermissionsRequest) Set(val *EditPermissionsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditPermissionsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditPermissionsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditPermissionsRequest(val *EditPermissionsRequest) *NullableEditPermissionsRequest {
	return &NullableEditPermissionsRequest{value: val, isSet: true}
}

func (v NullableEditPermissionsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditPermissionsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


