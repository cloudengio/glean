/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the CollectionItemAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionItemAllOf{}

// CollectionItemAllOf struct for CollectionItemAllOf
type CollectionItemAllOf struct {
	// The Collection ID of the Collection that this CollectionItem belongs in.
	CollectionId int32 `json:"collectionId"`
	// If this CollectionItem is a Glean-indexed document, the document ID of that document.
	DocumentId *string `json:"documentId,omitempty"`
	// The URL of this CollectionItem.
	Url *string `json:"url,omitempty"`
	// Unique identifier for the item within the collection it belongs to.
	ItemId *string `json:"itemId,omitempty"`
	CreatedBy *Person `json:"createdBy,omitempty"`
	// Unix timestamp for when the item was first added (in seconds since epoch UTC).
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Document *Document `json:"document,omitempty"`
	Shortcut *Shortcut `json:"shortcut,omitempty"`
	Collection *Collection `json:"collection,omitempty"`
	ItemType string `json:"itemType"`
}

// NewCollectionItemAllOf instantiates a new CollectionItemAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionItemAllOf(collectionId int32, itemType string) *CollectionItemAllOf {
	this := CollectionItemAllOf{}
	this.CollectionId = collectionId
	this.ItemType = itemType
	return &this
}

// NewCollectionItemAllOfWithDefaults instantiates a new CollectionItemAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionItemAllOfWithDefaults() *CollectionItemAllOf {
	this := CollectionItemAllOf{}
	return &this
}

// GetCollectionId returns the CollectionId field value
func (o *CollectionItemAllOf) GetCollectionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetCollectionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionId, true
}

// SetCollectionId sets field value
func (o *CollectionItemAllOf) SetCollectionId(v int32) {
	o.CollectionId = v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *CollectionItemAllOf) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *CollectionItemAllOf) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *CollectionItemAllOf) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CollectionItemAllOf) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CollectionItemAllOf) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CollectionItemAllOf) SetUrl(v string) {
	o.Url = &v
}

// GetItemId returns the ItemId field value if set, zero value otherwise.
func (o *CollectionItemAllOf) GetItemId() string {
	if o == nil || IsNil(o.ItemId) {
		var ret string
		return ret
	}
	return *o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.ItemId) {
		return nil, false
	}
	return o.ItemId, true
}

// HasItemId returns a boolean if a field has been set.
func (o *CollectionItemAllOf) HasItemId() bool {
	if o != nil && !IsNil(o.ItemId) {
		return true
	}

	return false
}

// SetItemId gets a reference to the given string and assigns it to the ItemId field.
func (o *CollectionItemAllOf) SetItemId(v string) {
	o.ItemId = &v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *CollectionItemAllOf) GetCreatedBy() Person {
	if o == nil || IsNil(o.CreatedBy) {
		var ret Person
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetCreatedByOk() (*Person, bool) {
	if o == nil || IsNil(o.CreatedBy) {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *CollectionItemAllOf) HasCreatedBy() bool {
	if o != nil && !IsNil(o.CreatedBy) {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given Person and assigns it to the CreatedBy field.
func (o *CollectionItemAllOf) SetCreatedBy(v Person) {
	o.CreatedBy = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CollectionItemAllOf) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CollectionItemAllOf) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CollectionItemAllOf) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDocument returns the Document field value if set, zero value otherwise.
func (o *CollectionItemAllOf) GetDocument() Document {
	if o == nil || IsNil(o.Document) {
		var ret Document
		return ret
	}
	return *o.Document
}

// GetDocumentOk returns a tuple with the Document field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.Document) {
		return nil, false
	}
	return o.Document, true
}

// HasDocument returns a boolean if a field has been set.
func (o *CollectionItemAllOf) HasDocument() bool {
	if o != nil && !IsNil(o.Document) {
		return true
	}

	return false
}

// SetDocument gets a reference to the given Document and assigns it to the Document field.
func (o *CollectionItemAllOf) SetDocument(v Document) {
	o.Document = &v
}

// GetShortcut returns the Shortcut field value if set, zero value otherwise.
func (o *CollectionItemAllOf) GetShortcut() Shortcut {
	if o == nil || IsNil(o.Shortcut) {
		var ret Shortcut
		return ret
	}
	return *o.Shortcut
}

// GetShortcutOk returns a tuple with the Shortcut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetShortcutOk() (*Shortcut, bool) {
	if o == nil || IsNil(o.Shortcut) {
		return nil, false
	}
	return o.Shortcut, true
}

// HasShortcut returns a boolean if a field has been set.
func (o *CollectionItemAllOf) HasShortcut() bool {
	if o != nil && !IsNil(o.Shortcut) {
		return true
	}

	return false
}

// SetShortcut gets a reference to the given Shortcut and assigns it to the Shortcut field.
func (o *CollectionItemAllOf) SetShortcut(v Shortcut) {
	o.Shortcut = &v
}

// GetCollection returns the Collection field value if set, zero value otherwise.
func (o *CollectionItemAllOf) GetCollection() Collection {
	if o == nil || IsNil(o.Collection) {
		var ret Collection
		return ret
	}
	return *o.Collection
}

// GetCollectionOk returns a tuple with the Collection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetCollectionOk() (*Collection, bool) {
	if o == nil || IsNil(o.Collection) {
		return nil, false
	}
	return o.Collection, true
}

// HasCollection returns a boolean if a field has been set.
func (o *CollectionItemAllOf) HasCollection() bool {
	if o != nil && !IsNil(o.Collection) {
		return true
	}

	return false
}

// SetCollection gets a reference to the given Collection and assigns it to the Collection field.
func (o *CollectionItemAllOf) SetCollection(v Collection) {
	o.Collection = &v
}

// GetItemType returns the ItemType field value
func (o *CollectionItemAllOf) GetItemType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value
// and a boolean to check if the value has been set.
func (o *CollectionItemAllOf) GetItemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemType, true
}

// SetItemType sets field value
func (o *CollectionItemAllOf) SetItemType(v string) {
	o.ItemType = v
}

func (o CollectionItemAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionItemAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collectionId"] = o.CollectionId
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.ItemId) {
		toSerialize["itemId"] = o.ItemId
	}
	if !IsNil(o.CreatedBy) {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Document) {
		toSerialize["document"] = o.Document
	}
	if !IsNil(o.Shortcut) {
		toSerialize["shortcut"] = o.Shortcut
	}
	if !IsNil(o.Collection) {
		toSerialize["collection"] = o.Collection
	}
	toSerialize["itemType"] = o.ItemType
	return toSerialize, nil
}

type NullableCollectionItemAllOf struct {
	value *CollectionItemAllOf
	isSet bool
}

func (v NullableCollectionItemAllOf) Get() *CollectionItemAllOf {
	return v.value
}

func (v *NullableCollectionItemAllOf) Set(val *CollectionItemAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionItemAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionItemAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionItemAllOf(val *CollectionItemAllOf) *NullableCollectionItemAllOf {
	return &NullableCollectionItemAllOf{value: val, isSet: true}
}

func (v NullableCollectionItemAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionItemAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


