/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the WritePermission type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WritePermission{}

// WritePermission Describes the write permissions levels that a user has for a specific feature
type WritePermission struct {
	ScopeType *ScopeType `json:"scopeType,omitempty"`
	// True if user has create permission for this feature and scope
	Create *bool `json:"create,omitempty"`
	// True if user has update permission for this feature and scope
	Update *bool `json:"update,omitempty"`
	// True if user has delete permission for this feature and scope
	Delete *bool `json:"delete,omitempty"`
}

// NewWritePermission instantiates a new WritePermission object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWritePermission() *WritePermission {
	this := WritePermission{}
	return &this
}

// NewWritePermissionWithDefaults instantiates a new WritePermission object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWritePermissionWithDefaults() *WritePermission {
	this := WritePermission{}
	return &this
}

// GetScopeType returns the ScopeType field value if set, zero value otherwise.
func (o *WritePermission) GetScopeType() ScopeType {
	if o == nil || IsNil(o.ScopeType) {
		var ret ScopeType
		return ret
	}
	return *o.ScopeType
}

// GetScopeTypeOk returns a tuple with the ScopeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritePermission) GetScopeTypeOk() (*ScopeType, bool) {
	if o == nil || IsNil(o.ScopeType) {
		return nil, false
	}
	return o.ScopeType, true
}

// HasScopeType returns a boolean if a field has been set.
func (o *WritePermission) HasScopeType() bool {
	if o != nil && !IsNil(o.ScopeType) {
		return true
	}

	return false
}

// SetScopeType gets a reference to the given ScopeType and assigns it to the ScopeType field.
func (o *WritePermission) SetScopeType(v ScopeType) {
	o.ScopeType = &v
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *WritePermission) GetCreate() bool {
	if o == nil || IsNil(o.Create) {
		var ret bool
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritePermission) GetCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *WritePermission) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given bool and assigns it to the Create field.
func (o *WritePermission) SetCreate(v bool) {
	o.Create = &v
}

// GetUpdate returns the Update field value if set, zero value otherwise.
func (o *WritePermission) GetUpdate() bool {
	if o == nil || IsNil(o.Update) {
		var ret bool
		return ret
	}
	return *o.Update
}

// GetUpdateOk returns a tuple with the Update field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritePermission) GetUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.Update) {
		return nil, false
	}
	return o.Update, true
}

// HasUpdate returns a boolean if a field has been set.
func (o *WritePermission) HasUpdate() bool {
	if o != nil && !IsNil(o.Update) {
		return true
	}

	return false
}

// SetUpdate gets a reference to the given bool and assigns it to the Update field.
func (o *WritePermission) SetUpdate(v bool) {
	o.Update = &v
}

// GetDelete returns the Delete field value if set, zero value otherwise.
func (o *WritePermission) GetDelete() bool {
	if o == nil || IsNil(o.Delete) {
		var ret bool
		return ret
	}
	return *o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WritePermission) GetDeleteOk() (*bool, bool) {
	if o == nil || IsNil(o.Delete) {
		return nil, false
	}
	return o.Delete, true
}

// HasDelete returns a boolean if a field has been set.
func (o *WritePermission) HasDelete() bool {
	if o != nil && !IsNil(o.Delete) {
		return true
	}

	return false
}

// SetDelete gets a reference to the given bool and assigns it to the Delete field.
func (o *WritePermission) SetDelete(v bool) {
	o.Delete = &v
}

func (o WritePermission) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WritePermission) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScopeType) {
		toSerialize["scopeType"] = o.ScopeType
	}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Update) {
		toSerialize["update"] = o.Update
	}
	if !IsNil(o.Delete) {
		toSerialize["delete"] = o.Delete
	}
	return toSerialize, nil
}

type NullableWritePermission struct {
	value *WritePermission
	isSet bool
}

func (v NullableWritePermission) Get() *WritePermission {
	return v.value
}

func (v *NullableWritePermission) Set(val *WritePermission) {
	v.value = val
	v.isSet = true
}

func (v NullableWritePermission) IsSet() bool {
	return v.isSet
}

func (v *NullableWritePermission) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWritePermission(val *WritePermission) *NullableWritePermission {
	return &NullableWritePermission{value: val, isSet: true}
}

func (v NullableWritePermission) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWritePermission) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


