/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the ActivityEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActivityEvent{}

// ActivityEvent struct for ActivityEvent
type ActivityEvent struct {
	// The type of activity this represents. CRAWL - Represents an explicit request to index the given `url` along with associated attributes in this payload. HISTORICAL_SEARCH - Represents a search performed at the given `url` as indicated by the user's history. HISTORICAL_VIEW - Represents a visit to the given `url` as indicated by the user's history. SEARCH - Represents a search performed at the given `url`. VIEW - Represents a visit to the given `url`. EDIT - Represents an edit of the document represented by the `url`. COMMENT - Represents a comment on the document represented by the `url`.
	Action string `json:"action"`
	Params *ActivityEventParams `json:"params,omitempty"`
	// Identifies the type of client that is reporting the activity.
	Source string `json:"source"`
	// The ISO 8601 timestamp when the activity began.
	Timestamp time.Time `json:"timestamp"`
	// The url of the activity.
	Url string `json:"url"`
}

// NewActivityEvent instantiates a new ActivityEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActivityEvent(action string, source string, timestamp time.Time, url string) *ActivityEvent {
	this := ActivityEvent{}
	this.Action = action
	this.Source = source
	this.Timestamp = timestamp
	this.Url = url
	return &this
}

// NewActivityEventWithDefaults instantiates a new ActivityEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActivityEventWithDefaults() *ActivityEvent {
	this := ActivityEvent{}
	return &this
}

// GetAction returns the Action field value
func (o *ActivityEvent) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ActivityEvent) SetAction(v string) {
	o.Action = v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *ActivityEvent) GetParams() ActivityEventParams {
	if o == nil || IsNil(o.Params) {
		var ret ActivityEventParams
		return ret
	}
	return *o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetParamsOk() (*ActivityEventParams, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *ActivityEvent) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given ActivityEventParams and assigns it to the Params field.
func (o *ActivityEvent) SetParams(v ActivityEventParams) {
	o.Params = &v
}

// GetSource returns the Source field value
func (o *ActivityEvent) GetSource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *ActivityEvent) SetSource(v string) {
	o.Source = v
}

// GetTimestamp returns the Timestamp field value
func (o *ActivityEvent) GetTimestamp() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetTimestampOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *ActivityEvent) SetTimestamp(v time.Time) {
	o.Timestamp = v
}

// GetUrl returns the Url field value
func (o *ActivityEvent) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ActivityEvent) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ActivityEvent) SetUrl(v string) {
	o.Url = v
}

func (o ActivityEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActivityEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	toSerialize["source"] = o.Source
	toSerialize["timestamp"] = o.Timestamp
	toSerialize["url"] = o.Url
	return toSerialize, nil
}

type NullableActivityEvent struct {
	value *ActivityEvent
	isSet bool
}

func (v NullableActivityEvent) Get() *ActivityEvent {
	return v.value
}

func (v *NullableActivityEvent) Set(val *ActivityEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableActivityEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableActivityEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActivityEvent(val *ActivityEvent) *NullableActivityEvent {
	return &NullableActivityEvent{value: val, isSet: true}
}

func (v NullableActivityEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActivityEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


