/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the CollectionAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionAllOf{}

// CollectionAllOf struct for CollectionAllOf
type CollectionAllOf struct {
	// The unique ID of the collection.
	Id int32 `json:"id"`
	CreateTime *time.Time `json:"createTime,omitempty"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	Creator *Person `json:"creator,omitempty"`
	UpdatedBy *Person `json:"updatedBy,omitempty"`
	// The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
	ItemCount *int32 `json:"itemCount,omitempty"`
	// The number of children Collections. Separated from the actual children so we can grab the count without children.
	ChildCount *int32 `json:"childCount,omitempty"`
	// The items in this Collection.
	Items []CollectionItem `json:"items,omitempty"`
	PinMetadata *CollectionPinnedMetadata `json:"pinMetadata,omitempty"`
	// The names of the shortcuts (Go Links) that point to this Collection.
	Shortcuts []string `json:"shortcuts,omitempty"`
	// The children Collections of this Collection.
	Children []Collection `json:"children,omitempty"`
	// A list of user roles for the collection.
	Roles []UserRoleSpecification `json:"roles,omitempty"`
}

// NewCollectionAllOf instantiates a new CollectionAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionAllOf(id int32) *CollectionAllOf {
	this := CollectionAllOf{}
	this.Id = id
	return &this
}

// NewCollectionAllOfWithDefaults instantiates a new CollectionAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionAllOfWithDefaults() *CollectionAllOf {
	this := CollectionAllOf{}
	return &this
}

// GetId returns the Id field value
func (o *CollectionAllOf) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CollectionAllOf) SetId(v int32) {
	o.Id = v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *CollectionAllOf) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *CollectionAllOf) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *CollectionAllOf) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *CollectionAllOf) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *CollectionAllOf) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *CollectionAllOf) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *CollectionAllOf) GetCreator() Person {
	if o == nil || IsNil(o.Creator) {
		var ret Person
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetCreatorOk() (*Person, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *CollectionAllOf) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given Person and assigns it to the Creator field.
func (o *CollectionAllOf) SetCreator(v Person) {
	o.Creator = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *CollectionAllOf) GetUpdatedBy() Person {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret Person
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetUpdatedByOk() (*Person, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *CollectionAllOf) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given Person and assigns it to the UpdatedBy field.
func (o *CollectionAllOf) SetUpdatedBy(v Person) {
	o.UpdatedBy = &v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *CollectionAllOf) GetItemCount() int32 {
	if o == nil || IsNil(o.ItemCount) {
		var ret int32
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetItemCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemCount) {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *CollectionAllOf) HasItemCount() bool {
	if o != nil && !IsNil(o.ItemCount) {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int32 and assigns it to the ItemCount field.
func (o *CollectionAllOf) SetItemCount(v int32) {
	o.ItemCount = &v
}

// GetChildCount returns the ChildCount field value if set, zero value otherwise.
func (o *CollectionAllOf) GetChildCount() int32 {
	if o == nil || IsNil(o.ChildCount) {
		var ret int32
		return ret
	}
	return *o.ChildCount
}

// GetChildCountOk returns a tuple with the ChildCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetChildCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ChildCount) {
		return nil, false
	}
	return o.ChildCount, true
}

// HasChildCount returns a boolean if a field has been set.
func (o *CollectionAllOf) HasChildCount() bool {
	if o != nil && !IsNil(o.ChildCount) {
		return true
	}

	return false
}

// SetChildCount gets a reference to the given int32 and assigns it to the ChildCount field.
func (o *CollectionAllOf) SetChildCount(v int32) {
	o.ChildCount = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *CollectionAllOf) GetItems() []CollectionItem {
	if o == nil || IsNil(o.Items) {
		var ret []CollectionItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetItemsOk() ([]CollectionItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *CollectionAllOf) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []CollectionItem and assigns it to the Items field.
func (o *CollectionAllOf) SetItems(v []CollectionItem) {
	o.Items = v
}

// GetPinMetadata returns the PinMetadata field value if set, zero value otherwise.
func (o *CollectionAllOf) GetPinMetadata() CollectionPinnedMetadata {
	if o == nil || IsNil(o.PinMetadata) {
		var ret CollectionPinnedMetadata
		return ret
	}
	return *o.PinMetadata
}

// GetPinMetadataOk returns a tuple with the PinMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetPinMetadataOk() (*CollectionPinnedMetadata, bool) {
	if o == nil || IsNil(o.PinMetadata) {
		return nil, false
	}
	return o.PinMetadata, true
}

// HasPinMetadata returns a boolean if a field has been set.
func (o *CollectionAllOf) HasPinMetadata() bool {
	if o != nil && !IsNil(o.PinMetadata) {
		return true
	}

	return false
}

// SetPinMetadata gets a reference to the given CollectionPinnedMetadata and assigns it to the PinMetadata field.
func (o *CollectionAllOf) SetPinMetadata(v CollectionPinnedMetadata) {
	o.PinMetadata = &v
}

// GetShortcuts returns the Shortcuts field value if set, zero value otherwise.
func (o *CollectionAllOf) GetShortcuts() []string {
	if o == nil || IsNil(o.Shortcuts) {
		var ret []string
		return ret
	}
	return o.Shortcuts
}

// GetShortcutsOk returns a tuple with the Shortcuts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetShortcutsOk() ([]string, bool) {
	if o == nil || IsNil(o.Shortcuts) {
		return nil, false
	}
	return o.Shortcuts, true
}

// HasShortcuts returns a boolean if a field has been set.
func (o *CollectionAllOf) HasShortcuts() bool {
	if o != nil && !IsNil(o.Shortcuts) {
		return true
	}

	return false
}

// SetShortcuts gets a reference to the given []string and assigns it to the Shortcuts field.
func (o *CollectionAllOf) SetShortcuts(v []string) {
	o.Shortcuts = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *CollectionAllOf) GetChildren() []Collection {
	if o == nil || IsNil(o.Children) {
		var ret []Collection
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetChildrenOk() ([]Collection, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *CollectionAllOf) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Collection and assigns it to the Children field.
func (o *CollectionAllOf) SetChildren(v []Collection) {
	o.Children = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *CollectionAllOf) GetRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.Roles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionAllOf) GetRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CollectionAllOf) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UserRoleSpecification and assigns it to the Roles field.
func (o *CollectionAllOf) SetRoles(v []UserRoleSpecification) {
	o.Roles = v
}

func (o CollectionAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.ItemCount) {
		toSerialize["itemCount"] = o.ItemCount
	}
	if !IsNil(o.ChildCount) {
		toSerialize["childCount"] = o.ChildCount
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.PinMetadata) {
		toSerialize["pinMetadata"] = o.PinMetadata
	}
	if !IsNil(o.Shortcuts) {
		toSerialize["shortcuts"] = o.Shortcuts
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableCollectionAllOf struct {
	value *CollectionAllOf
	isSet bool
}

func (v NullableCollectionAllOf) Get() *CollectionAllOf {
	return v.value
}

func (v *NullableCollectionAllOf) Set(val *CollectionAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionAllOf(val *CollectionAllOf) *NullableCollectionAllOf {
	return &NullableCollectionAllOf{value: val, isSet: true}
}

func (v NullableCollectionAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


