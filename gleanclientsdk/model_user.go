/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	// An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).
	UserID *string `json:"userID,omitempty"`
	// An opaque user ID for the authenticated user (ignores actas).
	OrigID *string `json:"origID,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetUserID returns the UserID field value if set, zero value otherwise.
func (o *User) GetUserID() string {
	if o == nil || IsNil(o.UserID) {
		var ret string
		return ret
	}
	return *o.UserID
}

// GetUserIDOk returns a tuple with the UserID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetUserIDOk() (*string, bool) {
	if o == nil || IsNil(o.UserID) {
		return nil, false
	}
	return o.UserID, true
}

// HasUserID returns a boolean if a field has been set.
func (o *User) HasUserID() bool {
	if o != nil && !IsNil(o.UserID) {
		return true
	}

	return false
}

// SetUserID gets a reference to the given string and assigns it to the UserID field.
func (o *User) SetUserID(v string) {
	o.UserID = &v
}

// GetOrigID returns the OrigID field value if set, zero value otherwise.
func (o *User) GetOrigID() string {
	if o == nil || IsNil(o.OrigID) {
		var ret string
		return ret
	}
	return *o.OrigID
}

// GetOrigIDOk returns a tuple with the OrigID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetOrigIDOk() (*string, bool) {
	if o == nil || IsNil(o.OrigID) {
		return nil, false
	}
	return o.OrigID, true
}

// HasOrigID returns a boolean if a field has been set.
func (o *User) HasOrigID() bool {
	if o != nil && !IsNil(o.OrigID) {
		return true
	}

	return false
}

// SetOrigID gets a reference to the given string and assigns it to the OrigID field.
func (o *User) SetOrigID(v string) {
	o.OrigID = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserID) {
		toSerialize["userID"] = o.UserID
	}
	if !IsNil(o.OrigID) {
		toSerialize["origID"] = o.OrigID
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


