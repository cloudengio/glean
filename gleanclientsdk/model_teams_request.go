/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the TeamsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamsRequest{}

// TeamsRequest struct for TeamsRequest
type TeamsRequest struct {
	// The IDs of the teams to retrieve.
	Ids []string `json:"ids,omitempty"`
	// List of teams fields to return that aren't returned by default
	IncludeFields []string `json:"includeFields,omitempty"`
}

// NewTeamsRequest instantiates a new TeamsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsRequest() *TeamsRequest {
	this := TeamsRequest{}
	return &this
}

// NewTeamsRequestWithDefaults instantiates a new TeamsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsRequestWithDefaults() *TeamsRequest {
	this := TeamsRequest{}
	return &this
}

// GetIds returns the Ids field value if set, zero value otherwise.
func (o *TeamsRequest) GetIds() []string {
	if o == nil || IsNil(o.Ids) {
		var ret []string
		return ret
	}
	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsRequest) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// HasIds returns a boolean if a field has been set.
func (o *TeamsRequest) HasIds() bool {
	if o != nil && !IsNil(o.Ids) {
		return true
	}

	return false
}

// SetIds gets a reference to the given []string and assigns it to the Ids field.
func (o *TeamsRequest) SetIds(v []string) {
	o.Ids = v
}

// GetIncludeFields returns the IncludeFields field value if set, zero value otherwise.
func (o *TeamsRequest) GetIncludeFields() []string {
	if o == nil || IsNil(o.IncludeFields) {
		var ret []string
		return ret
	}
	return o.IncludeFields
}

// GetIncludeFieldsOk returns a tuple with the IncludeFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamsRequest) GetIncludeFieldsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeFields) {
		return nil, false
	}
	return o.IncludeFields, true
}

// HasIncludeFields returns a boolean if a field has been set.
func (o *TeamsRequest) HasIncludeFields() bool {
	if o != nil && !IsNil(o.IncludeFields) {
		return true
	}

	return false
}

// SetIncludeFields gets a reference to the given []string and assigns it to the IncludeFields field.
func (o *TeamsRequest) SetIncludeFields(v []string) {
	o.IncludeFields = v
}

func (o TeamsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ids) {
		toSerialize["ids"] = o.Ids
	}
	if !IsNil(o.IncludeFields) {
		toSerialize["includeFields"] = o.IncludeFields
	}
	return toSerialize, nil
}

type NullableTeamsRequest struct {
	value *TeamsRequest
	isSet bool
}

func (v NullableTeamsRequest) Get() *TeamsRequest {
	return v.value
}

func (v *NullableTeamsRequest) Set(val *TeamsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsRequest(val *TeamsRequest) *NullableTeamsRequest {
	return &NullableTeamsRequest{value: val, isSet: true}
}

func (v NullableTeamsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


