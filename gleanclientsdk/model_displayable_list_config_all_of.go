/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DisplayableListConfigAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisplayableListConfigAllOf{}

// DisplayableListConfigAllOf struct for DisplayableListConfigAllOf
type DisplayableListConfigAllOf struct {
	// Primary title for the list
	Title *string `json:"title,omitempty"`
	// Whether the list should be shown to the user
	Enabled *bool `json:"enabled,omitempty"`
	// Filters which restrict who should should see displayable list
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	ItemUIConfig *DisplayableListItemUIConfig `json:"itemUIConfig,omitempty"`
}

// NewDisplayableListConfigAllOf instantiates a new DisplayableListConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayableListConfigAllOf() *DisplayableListConfigAllOf {
	this := DisplayableListConfigAllOf{}
	return &this
}

// NewDisplayableListConfigAllOfWithDefaults instantiates a new DisplayableListConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayableListConfigAllOfWithDefaults() *DisplayableListConfigAllOf {
	this := DisplayableListConfigAllOf{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *DisplayableListConfigAllOf) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayableListConfigAllOf) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *DisplayableListConfigAllOf) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *DisplayableListConfigAllOf) SetTitle(v string) {
	o.Title = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DisplayableListConfigAllOf) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayableListConfigAllOf) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DisplayableListConfigAllOf) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DisplayableListConfigAllOf) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAudienceFilters returns the AudienceFilters field value if set, zero value otherwise.
func (o *DisplayableListConfigAllOf) GetAudienceFilters() []FacetFilter {
	if o == nil || IsNil(o.AudienceFilters) {
		var ret []FacetFilter
		return ret
	}
	return o.AudienceFilters
}

// GetAudienceFiltersOk returns a tuple with the AudienceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayableListConfigAllOf) GetAudienceFiltersOk() ([]FacetFilter, bool) {
	if o == nil || IsNil(o.AudienceFilters) {
		return nil, false
	}
	return o.AudienceFilters, true
}

// HasAudienceFilters returns a boolean if a field has been set.
func (o *DisplayableListConfigAllOf) HasAudienceFilters() bool {
	if o != nil && !IsNil(o.AudienceFilters) {
		return true
	}

	return false
}

// SetAudienceFilters gets a reference to the given []FacetFilter and assigns it to the AudienceFilters field.
func (o *DisplayableListConfigAllOf) SetAudienceFilters(v []FacetFilter) {
	o.AudienceFilters = v
}

// GetItemUIConfig returns the ItemUIConfig field value if set, zero value otherwise.
func (o *DisplayableListConfigAllOf) GetItemUIConfig() DisplayableListItemUIConfig {
	if o == nil || IsNil(o.ItemUIConfig) {
		var ret DisplayableListItemUIConfig
		return ret
	}
	return *o.ItemUIConfig
}

// GetItemUIConfigOk returns a tuple with the ItemUIConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayableListConfigAllOf) GetItemUIConfigOk() (*DisplayableListItemUIConfig, bool) {
	if o == nil || IsNil(o.ItemUIConfig) {
		return nil, false
	}
	return o.ItemUIConfig, true
}

// HasItemUIConfig returns a boolean if a field has been set.
func (o *DisplayableListConfigAllOf) HasItemUIConfig() bool {
	if o != nil && !IsNil(o.ItemUIConfig) {
		return true
	}

	return false
}

// SetItemUIConfig gets a reference to the given DisplayableListItemUIConfig and assigns it to the ItemUIConfig field.
func (o *DisplayableListConfigAllOf) SetItemUIConfig(v DisplayableListItemUIConfig) {
	o.ItemUIConfig = &v
}

func (o DisplayableListConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisplayableListConfigAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.AudienceFilters) {
		toSerialize["audienceFilters"] = o.AudienceFilters
	}
	if !IsNil(o.ItemUIConfig) {
		toSerialize["itemUIConfig"] = o.ItemUIConfig
	}
	return toSerialize, nil
}

type NullableDisplayableListConfigAllOf struct {
	value *DisplayableListConfigAllOf
	isSet bool
}

func (v NullableDisplayableListConfigAllOf) Get() *DisplayableListConfigAllOf {
	return v.value
}

func (v *NullableDisplayableListConfigAllOf) Set(val *DisplayableListConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayableListConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayableListConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayableListConfigAllOf(val *DisplayableListConfigAllOf) *NullableDisplayableListConfigAllOf {
	return &NullableDisplayableListConfigAllOf{value: val, isSet: true}
}

func (v NullableDisplayableListConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayableListConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


