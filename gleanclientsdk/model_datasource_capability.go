/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// DatasourceCapability Intrinsic capabilities of a datasource. Can motivate UI grouping. Ex: workspace https://photos.app.goo.gl/rt19SbzFeMu5i2pQ6   * PROVIDES_SEARCHABLE_CONTENT: Datasource is eligible to appear in the search page. Ex: Jira, Confluence, web crawl datasources, custom datasources, etc. New datasources will default to PROVIDES_SEARCHABLE_CONTENT   * PROVIDES_SSO: Datasource provides authentication. Ex: Azure, Gsuite, Okta, OneLogin, etc   * PROVIDES_PEOPLE: Datasource provides people data. Ex: gcs when customers give us a csv to populate Glean 
type DatasourceCapability string

// List of DatasourceCapability
const (
	SEARCHABLE_CONTENT DatasourceCapability = "PROVIDES_SEARCHABLE_CONTENT"
	SSO DatasourceCapability = "PROVIDES_SSO"
	PEOPLE DatasourceCapability = "PROVIDES_PEOPLE"
)

// All allowed values of DatasourceCapability enum
var AllowedDatasourceCapabilityEnumValues = []DatasourceCapability{
	"PROVIDES_SEARCHABLE_CONTENT",
	"PROVIDES_SSO",
	"PROVIDES_PEOPLE",
}

func (v *DatasourceCapability) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatasourceCapability(value)
	for _, existing := range AllowedDatasourceCapabilityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatasourceCapability", value)
}

// NewDatasourceCapabilityFromValue returns a pointer to a valid DatasourceCapability
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatasourceCapabilityFromValue(v string) (*DatasourceCapability, error) {
	ev := DatasourceCapability(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatasourceCapability: valid values are %v", v, AllowedDatasourceCapabilityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatasourceCapability) IsValid() bool {
	for _, existing := range AllowedDatasourceCapabilityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatasourceCapability value
func (v DatasourceCapability) Ptr() *DatasourceCapability {
	return &v
}

type NullableDatasourceCapability struct {
	value *DatasourceCapability
	isSet bool
}

func (v NullableDatasourceCapability) Get() *DatasourceCapability {
	return v.value
}

func (v *NullableDatasourceCapability) Set(val *DatasourceCapability) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceCapability) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceCapability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceCapability(val *DatasourceCapability) *NullableDatasourceCapability {
	return &NullableDatasourceCapability{value: val, isSet: true}
}

func (v NullableDatasourceCapability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceCapability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

