/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Badge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Badge{}

// Badge Displays a user's accomplishment or milestone
type Badge struct {
	// An auto generated unique identifier.
	Key *string `json:"key,omitempty"`
	// The badge name displayed to users
	DisplayName *string `json:"displayName,omitempty"`
	IconConfig *IconConfig `json:"iconConfig,omitempty"`
	// The badge should be shown on the PersonAttribution
	Pinned *bool `json:"pinned,omitempty"`
}

// NewBadge instantiates a new Badge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBadge() *Badge {
	this := Badge{}
	return &this
}

// NewBadgeWithDefaults instantiates a new Badge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBadgeWithDefaults() *Badge {
	this := Badge{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *Badge) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Badge) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *Badge) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *Badge) SetKey(v string) {
	o.Key = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Badge) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Badge) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Badge) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Badge) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetIconConfig returns the IconConfig field value if set, zero value otherwise.
func (o *Badge) GetIconConfig() IconConfig {
	if o == nil || IsNil(o.IconConfig) {
		var ret IconConfig
		return ret
	}
	return *o.IconConfig
}

// GetIconConfigOk returns a tuple with the IconConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Badge) GetIconConfigOk() (*IconConfig, bool) {
	if o == nil || IsNil(o.IconConfig) {
		return nil, false
	}
	return o.IconConfig, true
}

// HasIconConfig returns a boolean if a field has been set.
func (o *Badge) HasIconConfig() bool {
	if o != nil && !IsNil(o.IconConfig) {
		return true
	}

	return false
}

// SetIconConfig gets a reference to the given IconConfig and assigns it to the IconConfig field.
func (o *Badge) SetIconConfig(v IconConfig) {
	o.IconConfig = &v
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *Badge) GetPinned() bool {
	if o == nil || IsNil(o.Pinned) {
		var ret bool
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Badge) GetPinnedOk() (*bool, bool) {
	if o == nil || IsNil(o.Pinned) {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *Badge) HasPinned() bool {
	if o != nil && !IsNil(o.Pinned) {
		return true
	}

	return false
}

// SetPinned gets a reference to the given bool and assigns it to the Pinned field.
func (o *Badge) SetPinned(v bool) {
	o.Pinned = &v
}

func (o Badge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Badge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.IconConfig) {
		toSerialize["iconConfig"] = o.IconConfig
	}
	if !IsNil(o.Pinned) {
		toSerialize["pinned"] = o.Pinned
	}
	return toSerialize, nil
}

type NullableBadge struct {
	value *Badge
	isSet bool
}

func (v NullableBadge) Get() *Badge {
	return v.value
}

func (v *NullableBadge) Set(val *Badge) {
	v.value = val
	v.isSet = true
}

func (v NullableBadge) IsSet() bool {
	return v.isSet
}

func (v *NullableBadge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBadge(val *Badge) *NullableBadge {
	return &NullableBadge{value: val, isSet: true}
}

func (v NullableBadge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBadge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


