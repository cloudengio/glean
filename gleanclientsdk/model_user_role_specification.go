/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the UserRoleSpecification type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserRoleSpecification{}

// UserRoleSpecification struct for UserRoleSpecification
type UserRoleSpecification struct {
	SourceDocumentSpec *DocumentSpec `json:"sourceDocumentSpec,omitempty"`
	Person *Person `json:"person,omitempty"`
	Group *Group `json:"group,omitempty"`
	Role UserRole `json:"role"`
}

// NewUserRoleSpecification instantiates a new UserRoleSpecification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserRoleSpecification(role UserRole) *UserRoleSpecification {
	this := UserRoleSpecification{}
	this.Role = role
	return &this
}

// NewUserRoleSpecificationWithDefaults instantiates a new UserRoleSpecification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserRoleSpecificationWithDefaults() *UserRoleSpecification {
	this := UserRoleSpecification{}
	return &this
}

// GetSourceDocumentSpec returns the SourceDocumentSpec field value if set, zero value otherwise.
func (o *UserRoleSpecification) GetSourceDocumentSpec() DocumentSpec {
	if o == nil || IsNil(o.SourceDocumentSpec) {
		var ret DocumentSpec
		return ret
	}
	return *o.SourceDocumentSpec
}

// GetSourceDocumentSpecOk returns a tuple with the SourceDocumentSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleSpecification) GetSourceDocumentSpecOk() (*DocumentSpec, bool) {
	if o == nil || IsNil(o.SourceDocumentSpec) {
		return nil, false
	}
	return o.SourceDocumentSpec, true
}

// HasSourceDocumentSpec returns a boolean if a field has been set.
func (o *UserRoleSpecification) HasSourceDocumentSpec() bool {
	if o != nil && !IsNil(o.SourceDocumentSpec) {
		return true
	}

	return false
}

// SetSourceDocumentSpec gets a reference to the given DocumentSpec and assigns it to the SourceDocumentSpec field.
func (o *UserRoleSpecification) SetSourceDocumentSpec(v DocumentSpec) {
	o.SourceDocumentSpec = &v
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *UserRoleSpecification) GetPerson() Person {
	if o == nil || IsNil(o.Person) {
		var ret Person
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleSpecification) GetPersonOk() (*Person, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *UserRoleSpecification) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given Person and assigns it to the Person field.
func (o *UserRoleSpecification) SetPerson(v Person) {
	o.Person = &v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *UserRoleSpecification) GetGroup() Group {
	if o == nil || IsNil(o.Group) {
		var ret Group
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserRoleSpecification) GetGroupOk() (*Group, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *UserRoleSpecification) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given Group and assigns it to the Group field.
func (o *UserRoleSpecification) SetGroup(v Group) {
	o.Group = &v
}

// GetRole returns the Role field value
func (o *UserRoleSpecification) GetRole() UserRole {
	if o == nil {
		var ret UserRole
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *UserRoleSpecification) GetRoleOk() (*UserRole, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *UserRoleSpecification) SetRole(v UserRole) {
	o.Role = v
}

func (o UserRoleSpecification) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserRoleSpecification) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SourceDocumentSpec) {
		toSerialize["sourceDocumentSpec"] = o.SourceDocumentSpec
	}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	toSerialize["role"] = o.Role
	return toSerialize, nil
}

type NullableUserRoleSpecification struct {
	value *UserRoleSpecification
	isSet bool
}

func (v NullableUserRoleSpecification) Get() *UserRoleSpecification {
	return v.value
}

func (v *NullableUserRoleSpecification) Set(val *UserRoleSpecification) {
	v.value = val
	v.isSet = true
}

func (v NullableUserRoleSpecification) IsSet() bool {
	return v.isSet
}

func (v *NullableUserRoleSpecification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserRoleSpecification(val *UserRoleSpecification) *NullableUserRoleSpecification {
	return &NullableUserRoleSpecification{value: val, isSet: true}
}

func (v NullableUserRoleSpecification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserRoleSpecification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


