/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ClientAnalyticsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientAnalyticsRequest{}

// ClientAnalyticsRequest struct for ClientAnalyticsRequest
type ClientAnalyticsRequest struct {
	CommonParams *ClientAnalyticsCommonParams `json:"commonParams,omitempty"`
	Events []ClientAnalyticsEvent `json:"events,omitempty"`
}

// NewClientAnalyticsRequest instantiates a new ClientAnalyticsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientAnalyticsRequest() *ClientAnalyticsRequest {
	this := ClientAnalyticsRequest{}
	return &this
}

// NewClientAnalyticsRequestWithDefaults instantiates a new ClientAnalyticsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientAnalyticsRequestWithDefaults() *ClientAnalyticsRequest {
	this := ClientAnalyticsRequest{}
	return &this
}

// GetCommonParams returns the CommonParams field value if set, zero value otherwise.
func (o *ClientAnalyticsRequest) GetCommonParams() ClientAnalyticsCommonParams {
	if o == nil || IsNil(o.CommonParams) {
		var ret ClientAnalyticsCommonParams
		return ret
	}
	return *o.CommonParams
}

// GetCommonParamsOk returns a tuple with the CommonParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAnalyticsRequest) GetCommonParamsOk() (*ClientAnalyticsCommonParams, bool) {
	if o == nil || IsNil(o.CommonParams) {
		return nil, false
	}
	return o.CommonParams, true
}

// HasCommonParams returns a boolean if a field has been set.
func (o *ClientAnalyticsRequest) HasCommonParams() bool {
	if o != nil && !IsNil(o.CommonParams) {
		return true
	}

	return false
}

// SetCommonParams gets a reference to the given ClientAnalyticsCommonParams and assigns it to the CommonParams field.
func (o *ClientAnalyticsRequest) SetCommonParams(v ClientAnalyticsCommonParams) {
	o.CommonParams = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ClientAnalyticsRequest) GetEvents() []ClientAnalyticsEvent {
	if o == nil || IsNil(o.Events) {
		var ret []ClientAnalyticsEvent
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAnalyticsRequest) GetEventsOk() ([]ClientAnalyticsEvent, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ClientAnalyticsRequest) HasEvents() bool {
	if o != nil && !IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []ClientAnalyticsEvent and assigns it to the Events field.
func (o *ClientAnalyticsRequest) SetEvents(v []ClientAnalyticsEvent) {
	o.Events = v
}

func (o ClientAnalyticsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientAnalyticsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommonParams) {
		toSerialize["commonParams"] = o.CommonParams
	}
	if !IsNil(o.Events) {
		toSerialize["events"] = o.Events
	}
	return toSerialize, nil
}

type NullableClientAnalyticsRequest struct {
	value *ClientAnalyticsRequest
	isSet bool
}

func (v NullableClientAnalyticsRequest) Get() *ClientAnalyticsRequest {
	return v.value
}

func (v *NullableClientAnalyticsRequest) Set(val *ClientAnalyticsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClientAnalyticsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClientAnalyticsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientAnalyticsRequest(val *ClientAnalyticsRequest) *NullableClientAnalyticsRequest {
	return &NullableClientAnalyticsRequest{value: val, isSet: true}
}

func (v NullableClientAnalyticsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientAnalyticsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


