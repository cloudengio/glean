/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the OperatorScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperatorScope{}

// OperatorScope struct for OperatorScope
type OperatorScope struct {
	Datasource *string `json:"datasource,omitempty"`
	DocType *string `json:"docType,omitempty"`
}

// NewOperatorScope instantiates a new OperatorScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperatorScope() *OperatorScope {
	this := OperatorScope{}
	return &this
}

// NewOperatorScopeWithDefaults instantiates a new OperatorScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperatorScopeWithDefaults() *OperatorScope {
	this := OperatorScope{}
	return &this
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *OperatorScope) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorScope) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *OperatorScope) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *OperatorScope) SetDatasource(v string) {
	o.Datasource = &v
}

// GetDocType returns the DocType field value if set, zero value otherwise.
func (o *OperatorScope) GetDocType() string {
	if o == nil || IsNil(o.DocType) {
		var ret string
		return ret
	}
	return *o.DocType
}

// GetDocTypeOk returns a tuple with the DocType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperatorScope) GetDocTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocType) {
		return nil, false
	}
	return o.DocType, true
}

// HasDocType returns a boolean if a field has been set.
func (o *OperatorScope) HasDocType() bool {
	if o != nil && !IsNil(o.DocType) {
		return true
	}

	return false
}

// SetDocType gets a reference to the given string and assigns it to the DocType field.
func (o *OperatorScope) SetDocType(v string) {
	o.DocType = &v
}

func (o OperatorScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperatorScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	if !IsNil(o.DocType) {
		toSerialize["docType"] = o.DocType
	}
	return toSerialize, nil
}

type NullableOperatorScope struct {
	value *OperatorScope
	isSet bool
}

func (v NullableOperatorScope) Get() *OperatorScope {
	return v.value
}

func (v *NullableOperatorScope) Set(val *OperatorScope) {
	v.value = val
	v.isSet = true
}

func (v NullableOperatorScope) IsSet() bool {
	return v.isSet
}

func (v *NullableOperatorScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperatorScope(val *OperatorScope) *NullableOperatorScope {
	return &NullableOperatorScope{value: val, isSet: true}
}

func (v NullableOperatorScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperatorScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


