/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AnswerBoardResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnswerBoardResult{}

// AnswerBoardResult struct for AnswerBoardResult
type AnswerBoardResult struct {
	Board AnswerBoard `json:"board"`
	// An opaque token that represents this particular Answer Board. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
}

// NewAnswerBoardResult instantiates a new AnswerBoardResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswerBoardResult(board AnswerBoard) *AnswerBoardResult {
	this := AnswerBoardResult{}
	this.Board = board
	return &this
}

// NewAnswerBoardResultWithDefaults instantiates a new AnswerBoardResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerBoardResultWithDefaults() *AnswerBoardResult {
	this := AnswerBoardResult{}
	return &this
}

// GetBoard returns the Board field value
func (o *AnswerBoardResult) GetBoard() AnswerBoard {
	if o == nil {
		var ret AnswerBoard
		return ret
	}

	return o.Board
}

// GetBoardOk returns a tuple with the Board field value
// and a boolean to check if the value has been set.
func (o *AnswerBoardResult) GetBoardOk() (*AnswerBoard, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Board, true
}

// SetBoard sets field value
func (o *AnswerBoardResult) SetBoard(v AnswerBoard) {
	o.Board = v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *AnswerBoardResult) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerBoardResult) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *AnswerBoardResult) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *AnswerBoardResult) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

func (o AnswerBoardResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnswerBoardResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["board"] = o.Board
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	return toSerialize, nil
}

type NullableAnswerBoardResult struct {
	value *AnswerBoardResult
	isSet bool
}

func (v NullableAnswerBoardResult) Get() *AnswerBoardResult {
	return v.value
}

func (v *NullableAnswerBoardResult) Set(val *AnswerBoardResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerBoardResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerBoardResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerBoardResult(val *AnswerBoardResult) *NullableAnswerBoardResult {
	return &NullableAnswerBoardResult{value: val, isSet: true}
}

func (v NullableAnswerBoardResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerBoardResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


