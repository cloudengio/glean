/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// ProfileSettingsKey the model 'ProfileSettingsKey'
type ProfileSettingsKey string

// List of ProfileSettingsKey
const (
	RELATED_PEOPLE_WIDGET ProfileSettingsKey = "ENABLE_RELATED_PEOPLE_WIDGET"
	RECENT_ACTIVITY_WIDGET ProfileSettingsKey = "ENABLE_RECENT_ACTIVITY_WIDGET"
	WORKED_TOGETHER_ON_WIDGET ProfileSettingsKey = "ENABLE_WORKED_TOGETHER_ON_WIDGET"
	CALENDAR_WIDGET ProfileSettingsKey = "ENABLE_CALENDAR_WIDGET"
)

// All allowed values of ProfileSettingsKey enum
var AllowedProfileSettingsKeyEnumValues = []ProfileSettingsKey{
	"ENABLE_RELATED_PEOPLE_WIDGET",
	"ENABLE_RECENT_ACTIVITY_WIDGET",
	"ENABLE_WORKED_TOGETHER_ON_WIDGET",
	"ENABLE_CALENDAR_WIDGET",
}

func (v *ProfileSettingsKey) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProfileSettingsKey(value)
	for _, existing := range AllowedProfileSettingsKeyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProfileSettingsKey", value)
}

// NewProfileSettingsKeyFromValue returns a pointer to a valid ProfileSettingsKey
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileSettingsKeyFromValue(v string) (*ProfileSettingsKey, error) {
	ev := ProfileSettingsKey(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProfileSettingsKey: valid values are %v", v, AllowedProfileSettingsKeyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileSettingsKey) IsValid() bool {
	for _, existing := range AllowedProfileSettingsKeyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProfileSettingsKey value
func (v ProfileSettingsKey) Ptr() *ProfileSettingsKey {
	return &v
}

type NullableProfileSettingsKey struct {
	value *ProfileSettingsKey
	isSet bool
}

func (v NullableProfileSettingsKey) Get() *ProfileSettingsKey {
	return v.value
}

func (v *NullableProfileSettingsKey) Set(val *ProfileSettingsKey) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileSettingsKey) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileSettingsKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileSettingsKey(val *ProfileSettingsKey) *NullableProfileSettingsKey {
	return &NullableProfileSettingsKey{value: val, isSet: true}
}

func (v NullableProfileSettingsKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileSettingsKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

