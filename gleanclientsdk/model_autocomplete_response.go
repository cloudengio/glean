/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AutocompleteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutocompleteResponse{}

// AutocompleteResponse struct for AutocompleteResponse
type AutocompleteResponse struct {
	// List of experiment ids for the corresponding request.
	ExperimentIds []int64 `json:"experimentIds,omitempty"`
	// An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
	SessionInfo *SessionInfo `json:"sessionInfo,omitempty"`
	Results []AutocompleteResult `json:"results,omitempty"`
	// Subsections of the results list from which distinct sections should be created.
	Groups []AutocompleteResultGroup `json:"groups,omitempty"`
	ErrorInfo *ErrorInfo `json:"errorInfo,omitempty"`
	// Time in milliseconds the backend took to respond to the request.
	BackendTimeMillis *int64 `json:"backendTimeMillis,omitempty"`
}

// NewAutocompleteResponse instantiates a new AutocompleteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutocompleteResponse() *AutocompleteResponse {
	this := AutocompleteResponse{}
	return &this
}

// NewAutocompleteResponseWithDefaults instantiates a new AutocompleteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutocompleteResponseWithDefaults() *AutocompleteResponse {
	this := AutocompleteResponse{}
	return &this
}

// GetExperimentIds returns the ExperimentIds field value if set, zero value otherwise.
func (o *AutocompleteResponse) GetExperimentIds() []int64 {
	if o == nil || IsNil(o.ExperimentIds) {
		var ret []int64
		return ret
	}
	return o.ExperimentIds
}

// GetExperimentIdsOk returns a tuple with the ExperimentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResponse) GetExperimentIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ExperimentIds) {
		return nil, false
	}
	return o.ExperimentIds, true
}

// HasExperimentIds returns a boolean if a field has been set.
func (o *AutocompleteResponse) HasExperimentIds() bool {
	if o != nil && !IsNil(o.ExperimentIds) {
		return true
	}

	return false
}

// SetExperimentIds gets a reference to the given []int64 and assigns it to the ExperimentIds field.
func (o *AutocompleteResponse) SetExperimentIds(v []int64) {
	o.ExperimentIds = v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *AutocompleteResponse) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResponse) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *AutocompleteResponse) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *AutocompleteResponse) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

// GetSessionInfo returns the SessionInfo field value if set, zero value otherwise.
func (o *AutocompleteResponse) GetSessionInfo() SessionInfo {
	if o == nil || IsNil(o.SessionInfo) {
		var ret SessionInfo
		return ret
	}
	return *o.SessionInfo
}

// GetSessionInfoOk returns a tuple with the SessionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResponse) GetSessionInfoOk() (*SessionInfo, bool) {
	if o == nil || IsNil(o.SessionInfo) {
		return nil, false
	}
	return o.SessionInfo, true
}

// HasSessionInfo returns a boolean if a field has been set.
func (o *AutocompleteResponse) HasSessionInfo() bool {
	if o != nil && !IsNil(o.SessionInfo) {
		return true
	}

	return false
}

// SetSessionInfo gets a reference to the given SessionInfo and assigns it to the SessionInfo field.
func (o *AutocompleteResponse) SetSessionInfo(v SessionInfo) {
	o.SessionInfo = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *AutocompleteResponse) GetResults() []AutocompleteResult {
	if o == nil || IsNil(o.Results) {
		var ret []AutocompleteResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResponse) GetResultsOk() ([]AutocompleteResult, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *AutocompleteResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []AutocompleteResult and assigns it to the Results field.
func (o *AutocompleteResponse) SetResults(v []AutocompleteResult) {
	o.Results = v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *AutocompleteResponse) GetGroups() []AutocompleteResultGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []AutocompleteResultGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResponse) GetGroupsOk() ([]AutocompleteResultGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *AutocompleteResponse) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []AutocompleteResultGroup and assigns it to the Groups field.
func (o *AutocompleteResponse) SetGroups(v []AutocompleteResultGroup) {
	o.Groups = v
}

// GetErrorInfo returns the ErrorInfo field value if set, zero value otherwise.
func (o *AutocompleteResponse) GetErrorInfo() ErrorInfo {
	if o == nil || IsNil(o.ErrorInfo) {
		var ret ErrorInfo
		return ret
	}
	return *o.ErrorInfo
}

// GetErrorInfoOk returns a tuple with the ErrorInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResponse) GetErrorInfoOk() (*ErrorInfo, bool) {
	if o == nil || IsNil(o.ErrorInfo) {
		return nil, false
	}
	return o.ErrorInfo, true
}

// HasErrorInfo returns a boolean if a field has been set.
func (o *AutocompleteResponse) HasErrorInfo() bool {
	if o != nil && !IsNil(o.ErrorInfo) {
		return true
	}

	return false
}

// SetErrorInfo gets a reference to the given ErrorInfo and assigns it to the ErrorInfo field.
func (o *AutocompleteResponse) SetErrorInfo(v ErrorInfo) {
	o.ErrorInfo = &v
}

// GetBackendTimeMillis returns the BackendTimeMillis field value if set, zero value otherwise.
func (o *AutocompleteResponse) GetBackendTimeMillis() int64 {
	if o == nil || IsNil(o.BackendTimeMillis) {
		var ret int64
		return ret
	}
	return *o.BackendTimeMillis
}

// GetBackendTimeMillisOk returns a tuple with the BackendTimeMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResponse) GetBackendTimeMillisOk() (*int64, bool) {
	if o == nil || IsNil(o.BackendTimeMillis) {
		return nil, false
	}
	return o.BackendTimeMillis, true
}

// HasBackendTimeMillis returns a boolean if a field has been set.
func (o *AutocompleteResponse) HasBackendTimeMillis() bool {
	if o != nil && !IsNil(o.BackendTimeMillis) {
		return true
	}

	return false
}

// SetBackendTimeMillis gets a reference to the given int64 and assigns it to the BackendTimeMillis field.
func (o *AutocompleteResponse) SetBackendTimeMillis(v int64) {
	o.BackendTimeMillis = &v
}

func (o AutocompleteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutocompleteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExperimentIds) {
		toSerialize["experimentIds"] = o.ExperimentIds
	}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	if !IsNil(o.SessionInfo) {
		toSerialize["sessionInfo"] = o.SessionInfo
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.ErrorInfo) {
		toSerialize["errorInfo"] = o.ErrorInfo
	}
	if !IsNil(o.BackendTimeMillis) {
		toSerialize["backendTimeMillis"] = o.BackendTimeMillis
	}
	return toSerialize, nil
}

type NullableAutocompleteResponse struct {
	value *AutocompleteResponse
	isSet bool
}

func (v NullableAutocompleteResponse) Get() *AutocompleteResponse {
	return v.value
}

func (v *NullableAutocompleteResponse) Set(val *AutocompleteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAutocompleteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAutocompleteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutocompleteResponse(val *AutocompleteResponse) *NullableAutocompleteResponse {
	return &NullableAutocompleteResponse{value: val, isSet: true}
}

func (v NullableAutocompleteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutocompleteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


