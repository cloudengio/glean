/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the Collection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Collection{}

// Collection struct for Collection
type Collection struct {
	// The unique name of the Collection.
	Name string `json:"name"`
	// A brief summary of the Collection's contents.
	Description string `json:"description"`
	// A list of added user roles for the collection.
	AddedRoles []UserRoleSpecification `json:"addedRoles,omitempty"`
	// A list of removed user roles for the collection.
	RemovedRoles []UserRoleSpecification `json:"removedRoles,omitempty"`
	// Filters which restrict who should see this collection. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
	// The emoji icon of this Collection.
	Icon *string `json:"icon,omitempty"`
	// Indicates whether edits are allowed for everyone or only admins.
	AdminLocked *bool `json:"adminLocked,omitempty"`
	// The parent of this Collection, or 0 if it's a top-level Collection.
	ParentId *int32 `json:"parentId,omitempty"`
	Thumbnail *Thumbnail `json:"thumbnail,omitempty"`
	// The datasource type this collection can hold.
	AllowedDatasource *string `json:"allowedDatasource,omitempty"`
	Permissions *ObjectPermissions `json:"permissions,omitempty"`
	// The unique ID of the collection.
	Id int32 `json:"id"`
	CreateTime *time.Time `json:"createTime,omitempty"`
	UpdateTime *time.Time `json:"updateTime,omitempty"`
	Creator *Person `json:"creator,omitempty"`
	UpdatedBy *Person `json:"updatedBy,omitempty"`
	// The number of items currently in the Collection. Separated from the actual items so we can grab the count without items.
	ItemCount *int32 `json:"itemCount,omitempty"`
	// The number of children Collections. Separated from the actual children so we can grab the count without children.
	ChildCount *int32 `json:"childCount,omitempty"`
	// The items in this Collection.
	Items []CollectionItem `json:"items,omitempty"`
	PinMetadata *CollectionPinnedMetadata `json:"pinMetadata,omitempty"`
	// The names of the shortcuts (Go Links) that point to this Collection.
	Shortcuts []string `json:"shortcuts,omitempty"`
	// The children Collections of this Collection.
	Children []Collection `json:"children,omitempty"`
	// A list of user roles for the collection.
	Roles []UserRoleSpecification `json:"roles,omitempty"`
}

// NewCollection instantiates a new Collection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollection(name string, description string, id int32) *Collection {
	this := Collection{}
	this.Name = name
	this.Description = description
	this.Id = id
	return &this
}

// NewCollectionWithDefaults instantiates a new Collection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionWithDefaults() *Collection {
	this := Collection{}
	return &this
}

// GetName returns the Name field value
func (o *Collection) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Collection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Collection) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *Collection) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Collection) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Collection) SetDescription(v string) {
	o.Description = v
}

// GetAddedRoles returns the AddedRoles field value if set, zero value otherwise.
func (o *Collection) GetAddedRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.AddedRoles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.AddedRoles
}

// GetAddedRolesOk returns a tuple with the AddedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetAddedRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.AddedRoles) {
		return nil, false
	}
	return o.AddedRoles, true
}

// HasAddedRoles returns a boolean if a field has been set.
func (o *Collection) HasAddedRoles() bool {
	if o != nil && !IsNil(o.AddedRoles) {
		return true
	}

	return false
}

// SetAddedRoles gets a reference to the given []UserRoleSpecification and assigns it to the AddedRoles field.
func (o *Collection) SetAddedRoles(v []UserRoleSpecification) {
	o.AddedRoles = v
}

// GetRemovedRoles returns the RemovedRoles field value if set, zero value otherwise.
func (o *Collection) GetRemovedRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.RemovedRoles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.RemovedRoles
}

// GetRemovedRolesOk returns a tuple with the RemovedRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetRemovedRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.RemovedRoles) {
		return nil, false
	}
	return o.RemovedRoles, true
}

// HasRemovedRoles returns a boolean if a field has been set.
func (o *Collection) HasRemovedRoles() bool {
	if o != nil && !IsNil(o.RemovedRoles) {
		return true
	}

	return false
}

// SetRemovedRoles gets a reference to the given []UserRoleSpecification and assigns it to the RemovedRoles field.
func (o *Collection) SetRemovedRoles(v []UserRoleSpecification) {
	o.RemovedRoles = v
}

// GetAudienceFilters returns the AudienceFilters field value if set, zero value otherwise.
func (o *Collection) GetAudienceFilters() []FacetFilter {
	if o == nil || IsNil(o.AudienceFilters) {
		var ret []FacetFilter
		return ret
	}
	return o.AudienceFilters
}

// GetAudienceFiltersOk returns a tuple with the AudienceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetAudienceFiltersOk() ([]FacetFilter, bool) {
	if o == nil || IsNil(o.AudienceFilters) {
		return nil, false
	}
	return o.AudienceFilters, true
}

// HasAudienceFilters returns a boolean if a field has been set.
func (o *Collection) HasAudienceFilters() bool {
	if o != nil && !IsNil(o.AudienceFilters) {
		return true
	}

	return false
}

// SetAudienceFilters gets a reference to the given []FacetFilter and assigns it to the AudienceFilters field.
func (o *Collection) SetAudienceFilters(v []FacetFilter) {
	o.AudienceFilters = v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *Collection) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *Collection) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *Collection) SetIcon(v string) {
	o.Icon = &v
}

// GetAdminLocked returns the AdminLocked field value if set, zero value otherwise.
func (o *Collection) GetAdminLocked() bool {
	if o == nil || IsNil(o.AdminLocked) {
		var ret bool
		return ret
	}
	return *o.AdminLocked
}

// GetAdminLockedOk returns a tuple with the AdminLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetAdminLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.AdminLocked) {
		return nil, false
	}
	return o.AdminLocked, true
}

// HasAdminLocked returns a boolean if a field has been set.
func (o *Collection) HasAdminLocked() bool {
	if o != nil && !IsNil(o.AdminLocked) {
		return true
	}

	return false
}

// SetAdminLocked gets a reference to the given bool and assigns it to the AdminLocked field.
func (o *Collection) SetAdminLocked(v bool) {
	o.AdminLocked = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *Collection) GetParentId() int32 {
	if o == nil || IsNil(o.ParentId) {
		var ret int32
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetParentIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *Collection) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given int32 and assigns it to the ParentId field.
func (o *Collection) SetParentId(v int32) {
	o.ParentId = &v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *Collection) GetThumbnail() Thumbnail {
	if o == nil || IsNil(o.Thumbnail) {
		var ret Thumbnail
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetThumbnailOk() (*Thumbnail, bool) {
	if o == nil || IsNil(o.Thumbnail) {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *Collection) HasThumbnail() bool {
	if o != nil && !IsNil(o.Thumbnail) {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given Thumbnail and assigns it to the Thumbnail field.
func (o *Collection) SetThumbnail(v Thumbnail) {
	o.Thumbnail = &v
}

// GetAllowedDatasource returns the AllowedDatasource field value if set, zero value otherwise.
func (o *Collection) GetAllowedDatasource() string {
	if o == nil || IsNil(o.AllowedDatasource) {
		var ret string
		return ret
	}
	return *o.AllowedDatasource
}

// GetAllowedDatasourceOk returns a tuple with the AllowedDatasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetAllowedDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedDatasource) {
		return nil, false
	}
	return o.AllowedDatasource, true
}

// HasAllowedDatasource returns a boolean if a field has been set.
func (o *Collection) HasAllowedDatasource() bool {
	if o != nil && !IsNil(o.AllowedDatasource) {
		return true
	}

	return false
}

// SetAllowedDatasource gets a reference to the given string and assigns it to the AllowedDatasource field.
func (o *Collection) SetAllowedDatasource(v string) {
	o.AllowedDatasource = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *Collection) GetPermissions() ObjectPermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret ObjectPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetPermissionsOk() (*ObjectPermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *Collection) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given ObjectPermissions and assigns it to the Permissions field.
func (o *Collection) SetPermissions(v ObjectPermissions) {
	o.Permissions = &v
}

// GetId returns the Id field value
func (o *Collection) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Collection) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Collection) SetId(v int32) {
	o.Id = v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *Collection) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *Collection) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *Collection) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *Collection) GetUpdateTime() time.Time {
	if o == nil || IsNil(o.UpdateTime) {
		var ret time.Time
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *Collection) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given time.Time and assigns it to the UpdateTime field.
func (o *Collection) SetUpdateTime(v time.Time) {
	o.UpdateTime = &v
}

// GetCreator returns the Creator field value if set, zero value otherwise.
func (o *Collection) GetCreator() Person {
	if o == nil || IsNil(o.Creator) {
		var ret Person
		return ret
	}
	return *o.Creator
}

// GetCreatorOk returns a tuple with the Creator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetCreatorOk() (*Person, bool) {
	if o == nil || IsNil(o.Creator) {
		return nil, false
	}
	return o.Creator, true
}

// HasCreator returns a boolean if a field has been set.
func (o *Collection) HasCreator() bool {
	if o != nil && !IsNil(o.Creator) {
		return true
	}

	return false
}

// SetCreator gets a reference to the given Person and assigns it to the Creator field.
func (o *Collection) SetCreator(v Person) {
	o.Creator = &v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Collection) GetUpdatedBy() Person {
	if o == nil || IsNil(o.UpdatedBy) {
		var ret Person
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetUpdatedByOk() (*Person, bool) {
	if o == nil || IsNil(o.UpdatedBy) {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Collection) HasUpdatedBy() bool {
	if o != nil && !IsNil(o.UpdatedBy) {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given Person and assigns it to the UpdatedBy field.
func (o *Collection) SetUpdatedBy(v Person) {
	o.UpdatedBy = &v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *Collection) GetItemCount() int32 {
	if o == nil || IsNil(o.ItemCount) {
		var ret int32
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetItemCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ItemCount) {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *Collection) HasItemCount() bool {
	if o != nil && !IsNil(o.ItemCount) {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int32 and assigns it to the ItemCount field.
func (o *Collection) SetItemCount(v int32) {
	o.ItemCount = &v
}

// GetChildCount returns the ChildCount field value if set, zero value otherwise.
func (o *Collection) GetChildCount() int32 {
	if o == nil || IsNil(o.ChildCount) {
		var ret int32
		return ret
	}
	return *o.ChildCount
}

// GetChildCountOk returns a tuple with the ChildCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetChildCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ChildCount) {
		return nil, false
	}
	return o.ChildCount, true
}

// HasChildCount returns a boolean if a field has been set.
func (o *Collection) HasChildCount() bool {
	if o != nil && !IsNil(o.ChildCount) {
		return true
	}

	return false
}

// SetChildCount gets a reference to the given int32 and assigns it to the ChildCount field.
func (o *Collection) SetChildCount(v int32) {
	o.ChildCount = &v
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *Collection) GetItems() []CollectionItem {
	if o == nil || IsNil(o.Items) {
		var ret []CollectionItem
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetItemsOk() ([]CollectionItem, bool) {
	if o == nil || IsNil(o.Items) {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *Collection) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given []CollectionItem and assigns it to the Items field.
func (o *Collection) SetItems(v []CollectionItem) {
	o.Items = v
}

// GetPinMetadata returns the PinMetadata field value if set, zero value otherwise.
func (o *Collection) GetPinMetadata() CollectionPinnedMetadata {
	if o == nil || IsNil(o.PinMetadata) {
		var ret CollectionPinnedMetadata
		return ret
	}
	return *o.PinMetadata
}

// GetPinMetadataOk returns a tuple with the PinMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetPinMetadataOk() (*CollectionPinnedMetadata, bool) {
	if o == nil || IsNil(o.PinMetadata) {
		return nil, false
	}
	return o.PinMetadata, true
}

// HasPinMetadata returns a boolean if a field has been set.
func (o *Collection) HasPinMetadata() bool {
	if o != nil && !IsNil(o.PinMetadata) {
		return true
	}

	return false
}

// SetPinMetadata gets a reference to the given CollectionPinnedMetadata and assigns it to the PinMetadata field.
func (o *Collection) SetPinMetadata(v CollectionPinnedMetadata) {
	o.PinMetadata = &v
}

// GetShortcuts returns the Shortcuts field value if set, zero value otherwise.
func (o *Collection) GetShortcuts() []string {
	if o == nil || IsNil(o.Shortcuts) {
		var ret []string
		return ret
	}
	return o.Shortcuts
}

// GetShortcutsOk returns a tuple with the Shortcuts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetShortcutsOk() ([]string, bool) {
	if o == nil || IsNil(o.Shortcuts) {
		return nil, false
	}
	return o.Shortcuts, true
}

// HasShortcuts returns a boolean if a field has been set.
func (o *Collection) HasShortcuts() bool {
	if o != nil && !IsNil(o.Shortcuts) {
		return true
	}

	return false
}

// SetShortcuts gets a reference to the given []string and assigns it to the Shortcuts field.
func (o *Collection) SetShortcuts(v []string) {
	o.Shortcuts = v
}

// GetChildren returns the Children field value if set, zero value otherwise.
func (o *Collection) GetChildren() []Collection {
	if o == nil || IsNil(o.Children) {
		var ret []Collection
		return ret
	}
	return o.Children
}

// GetChildrenOk returns a tuple with the Children field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetChildrenOk() ([]Collection, bool) {
	if o == nil || IsNil(o.Children) {
		return nil, false
	}
	return o.Children, true
}

// HasChildren returns a boolean if a field has been set.
func (o *Collection) HasChildren() bool {
	if o != nil && !IsNil(o.Children) {
		return true
	}

	return false
}

// SetChildren gets a reference to the given []Collection and assigns it to the Children field.
func (o *Collection) SetChildren(v []Collection) {
	o.Children = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *Collection) GetRoles() []UserRoleSpecification {
	if o == nil || IsNil(o.Roles) {
		var ret []UserRoleSpecification
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Collection) GetRolesOk() ([]UserRoleSpecification, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *Collection) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []UserRoleSpecification and assigns it to the Roles field.
func (o *Collection) SetRoles(v []UserRoleSpecification) {
	o.Roles = v
}

func (o Collection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Collection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.AddedRoles) {
		toSerialize["addedRoles"] = o.AddedRoles
	}
	if !IsNil(o.RemovedRoles) {
		toSerialize["removedRoles"] = o.RemovedRoles
	}
	if !IsNil(o.AudienceFilters) {
		toSerialize["audienceFilters"] = o.AudienceFilters
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	if !IsNil(o.AdminLocked) {
		toSerialize["adminLocked"] = o.AdminLocked
	}
	if !IsNil(o.ParentId) {
		toSerialize["parentId"] = o.ParentId
	}
	if !IsNil(o.Thumbnail) {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	if !IsNil(o.AllowedDatasource) {
		toSerialize["allowedDatasource"] = o.AllowedDatasource
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["updateTime"] = o.UpdateTime
	}
	if !IsNil(o.Creator) {
		toSerialize["creator"] = o.Creator
	}
	if !IsNil(o.UpdatedBy) {
		toSerialize["updatedBy"] = o.UpdatedBy
	}
	if !IsNil(o.ItemCount) {
		toSerialize["itemCount"] = o.ItemCount
	}
	if !IsNil(o.ChildCount) {
		toSerialize["childCount"] = o.ChildCount
	}
	if !IsNil(o.Items) {
		toSerialize["items"] = o.Items
	}
	if !IsNil(o.PinMetadata) {
		toSerialize["pinMetadata"] = o.PinMetadata
	}
	if !IsNil(o.Shortcuts) {
		toSerialize["shortcuts"] = o.Shortcuts
	}
	if !IsNil(o.Children) {
		toSerialize["children"] = o.Children
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableCollection struct {
	value *Collection
	isSet bool
}

func (v NullableCollection) Get() *Collection {
	return v.value
}

func (v *NullableCollection) Set(val *Collection) {
	v.value = val
	v.isSet = true
}

func (v NullableCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollection(val *Collection) *NullableCollection {
	return &NullableCollection{value: val, isSet: true}
}

func (v NullableCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


