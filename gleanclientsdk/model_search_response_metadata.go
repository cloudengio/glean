/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SearchResponseMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResponseMetadata{}

// SearchResponseMetadata struct for SearchResponseMetadata
type SearchResponseMetadata struct {
	// A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators.
	RewrittenQuery *string `json:"rewrittenQuery,omitempty"`
	// The actual query used to perform search and return results.
	SearchedQuery *string `json:"searchedQuery,omitempty"`
	// The bolded ranges within the searched query.
	SearchedQueryRanges []TextRange `json:"searchedQueryRanges,omitempty"`
	// The query text sent by the client in the request.
	OriginalQuery *string `json:"originalQuery,omitempty"`
	QuerySuggestion *QuerySuggestion `json:"querySuggestion,omitempty"`
	// A list of terms that were negated when processing the query.
	NegatedTerms []string `json:"negatedTerms,omitempty"`
	// DEPRECATED - A list of terms that are ignored in search. Used, for example, by negation.
	// Deprecated
	IgnoredTerms []string `json:"ignoredTerms,omitempty"`
	// A different query was performed than the one requested.
	ModifiedQueryWasUsed *bool `json:"modifiedQueryWasUsed,omitempty"`
	// No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based.
	OriginalQueryHadNoResults *bool `json:"originalQueryHadNoResults,omitempty"`
	SearchWarning *SearchWarning `json:"searchWarning,omitempty"`
	// Whether the query triggered expert detection results in the People tab.
	TriggeredExpertDetection *bool `json:"triggeredExpertDetection,omitempty"`
}

// NewSearchResponseMetadata instantiates a new SearchResponseMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResponseMetadata() *SearchResponseMetadata {
	this := SearchResponseMetadata{}
	return &this
}

// NewSearchResponseMetadataWithDefaults instantiates a new SearchResponseMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResponseMetadataWithDefaults() *SearchResponseMetadata {
	this := SearchResponseMetadata{}
	return &this
}

// GetRewrittenQuery returns the RewrittenQuery field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetRewrittenQuery() string {
	if o == nil || IsNil(o.RewrittenQuery) {
		var ret string
		return ret
	}
	return *o.RewrittenQuery
}

// GetRewrittenQueryOk returns a tuple with the RewrittenQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetRewrittenQueryOk() (*string, bool) {
	if o == nil || IsNil(o.RewrittenQuery) {
		return nil, false
	}
	return o.RewrittenQuery, true
}

// HasRewrittenQuery returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasRewrittenQuery() bool {
	if o != nil && !IsNil(o.RewrittenQuery) {
		return true
	}

	return false
}

// SetRewrittenQuery gets a reference to the given string and assigns it to the RewrittenQuery field.
func (o *SearchResponseMetadata) SetRewrittenQuery(v string) {
	o.RewrittenQuery = &v
}

// GetSearchedQuery returns the SearchedQuery field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetSearchedQuery() string {
	if o == nil || IsNil(o.SearchedQuery) {
		var ret string
		return ret
	}
	return *o.SearchedQuery
}

// GetSearchedQueryOk returns a tuple with the SearchedQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetSearchedQueryOk() (*string, bool) {
	if o == nil || IsNil(o.SearchedQuery) {
		return nil, false
	}
	return o.SearchedQuery, true
}

// HasSearchedQuery returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasSearchedQuery() bool {
	if o != nil && !IsNil(o.SearchedQuery) {
		return true
	}

	return false
}

// SetSearchedQuery gets a reference to the given string and assigns it to the SearchedQuery field.
func (o *SearchResponseMetadata) SetSearchedQuery(v string) {
	o.SearchedQuery = &v
}

// GetSearchedQueryRanges returns the SearchedQueryRanges field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetSearchedQueryRanges() []TextRange {
	if o == nil || IsNil(o.SearchedQueryRanges) {
		var ret []TextRange
		return ret
	}
	return o.SearchedQueryRanges
}

// GetSearchedQueryRangesOk returns a tuple with the SearchedQueryRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetSearchedQueryRangesOk() ([]TextRange, bool) {
	if o == nil || IsNil(o.SearchedQueryRanges) {
		return nil, false
	}
	return o.SearchedQueryRanges, true
}

// HasSearchedQueryRanges returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasSearchedQueryRanges() bool {
	if o != nil && !IsNil(o.SearchedQueryRanges) {
		return true
	}

	return false
}

// SetSearchedQueryRanges gets a reference to the given []TextRange and assigns it to the SearchedQueryRanges field.
func (o *SearchResponseMetadata) SetSearchedQueryRanges(v []TextRange) {
	o.SearchedQueryRanges = v
}

// GetOriginalQuery returns the OriginalQuery field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetOriginalQuery() string {
	if o == nil || IsNil(o.OriginalQuery) {
		var ret string
		return ret
	}
	return *o.OriginalQuery
}

// GetOriginalQueryOk returns a tuple with the OriginalQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetOriginalQueryOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalQuery) {
		return nil, false
	}
	return o.OriginalQuery, true
}

// HasOriginalQuery returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasOriginalQuery() bool {
	if o != nil && !IsNil(o.OriginalQuery) {
		return true
	}

	return false
}

// SetOriginalQuery gets a reference to the given string and assigns it to the OriginalQuery field.
func (o *SearchResponseMetadata) SetOriginalQuery(v string) {
	o.OriginalQuery = &v
}

// GetQuerySuggestion returns the QuerySuggestion field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetQuerySuggestion() QuerySuggestion {
	if o == nil || IsNil(o.QuerySuggestion) {
		var ret QuerySuggestion
		return ret
	}
	return *o.QuerySuggestion
}

// GetQuerySuggestionOk returns a tuple with the QuerySuggestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetQuerySuggestionOk() (*QuerySuggestion, bool) {
	if o == nil || IsNil(o.QuerySuggestion) {
		return nil, false
	}
	return o.QuerySuggestion, true
}

// HasQuerySuggestion returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasQuerySuggestion() bool {
	if o != nil && !IsNil(o.QuerySuggestion) {
		return true
	}

	return false
}

// SetQuerySuggestion gets a reference to the given QuerySuggestion and assigns it to the QuerySuggestion field.
func (o *SearchResponseMetadata) SetQuerySuggestion(v QuerySuggestion) {
	o.QuerySuggestion = &v
}

// GetNegatedTerms returns the NegatedTerms field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetNegatedTerms() []string {
	if o == nil || IsNil(o.NegatedTerms) {
		var ret []string
		return ret
	}
	return o.NegatedTerms
}

// GetNegatedTermsOk returns a tuple with the NegatedTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetNegatedTermsOk() ([]string, bool) {
	if o == nil || IsNil(o.NegatedTerms) {
		return nil, false
	}
	return o.NegatedTerms, true
}

// HasNegatedTerms returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasNegatedTerms() bool {
	if o != nil && !IsNil(o.NegatedTerms) {
		return true
	}

	return false
}

// SetNegatedTerms gets a reference to the given []string and assigns it to the NegatedTerms field.
func (o *SearchResponseMetadata) SetNegatedTerms(v []string) {
	o.NegatedTerms = v
}

// GetIgnoredTerms returns the IgnoredTerms field value if set, zero value otherwise.
// Deprecated
func (o *SearchResponseMetadata) GetIgnoredTerms() []string {
	if o == nil || IsNil(o.IgnoredTerms) {
		var ret []string
		return ret
	}
	return o.IgnoredTerms
}

// GetIgnoredTermsOk returns a tuple with the IgnoredTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *SearchResponseMetadata) GetIgnoredTermsOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnoredTerms) {
		return nil, false
	}
	return o.IgnoredTerms, true
}

// HasIgnoredTerms returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasIgnoredTerms() bool {
	if o != nil && !IsNil(o.IgnoredTerms) {
		return true
	}

	return false
}

// SetIgnoredTerms gets a reference to the given []string and assigns it to the IgnoredTerms field.
// Deprecated
func (o *SearchResponseMetadata) SetIgnoredTerms(v []string) {
	o.IgnoredTerms = v
}

// GetModifiedQueryWasUsed returns the ModifiedQueryWasUsed field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetModifiedQueryWasUsed() bool {
	if o == nil || IsNil(o.ModifiedQueryWasUsed) {
		var ret bool
		return ret
	}
	return *o.ModifiedQueryWasUsed
}

// GetModifiedQueryWasUsedOk returns a tuple with the ModifiedQueryWasUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetModifiedQueryWasUsedOk() (*bool, bool) {
	if o == nil || IsNil(o.ModifiedQueryWasUsed) {
		return nil, false
	}
	return o.ModifiedQueryWasUsed, true
}

// HasModifiedQueryWasUsed returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasModifiedQueryWasUsed() bool {
	if o != nil && !IsNil(o.ModifiedQueryWasUsed) {
		return true
	}

	return false
}

// SetModifiedQueryWasUsed gets a reference to the given bool and assigns it to the ModifiedQueryWasUsed field.
func (o *SearchResponseMetadata) SetModifiedQueryWasUsed(v bool) {
	o.ModifiedQueryWasUsed = &v
}

// GetOriginalQueryHadNoResults returns the OriginalQueryHadNoResults field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetOriginalQueryHadNoResults() bool {
	if o == nil || IsNil(o.OriginalQueryHadNoResults) {
		var ret bool
		return ret
	}
	return *o.OriginalQueryHadNoResults
}

// GetOriginalQueryHadNoResultsOk returns a tuple with the OriginalQueryHadNoResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetOriginalQueryHadNoResultsOk() (*bool, bool) {
	if o == nil || IsNil(o.OriginalQueryHadNoResults) {
		return nil, false
	}
	return o.OriginalQueryHadNoResults, true
}

// HasOriginalQueryHadNoResults returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasOriginalQueryHadNoResults() bool {
	if o != nil && !IsNil(o.OriginalQueryHadNoResults) {
		return true
	}

	return false
}

// SetOriginalQueryHadNoResults gets a reference to the given bool and assigns it to the OriginalQueryHadNoResults field.
func (o *SearchResponseMetadata) SetOriginalQueryHadNoResults(v bool) {
	o.OriginalQueryHadNoResults = &v
}

// GetSearchWarning returns the SearchWarning field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetSearchWarning() SearchWarning {
	if o == nil || IsNil(o.SearchWarning) {
		var ret SearchWarning
		return ret
	}
	return *o.SearchWarning
}

// GetSearchWarningOk returns a tuple with the SearchWarning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetSearchWarningOk() (*SearchWarning, bool) {
	if o == nil || IsNil(o.SearchWarning) {
		return nil, false
	}
	return o.SearchWarning, true
}

// HasSearchWarning returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasSearchWarning() bool {
	if o != nil && !IsNil(o.SearchWarning) {
		return true
	}

	return false
}

// SetSearchWarning gets a reference to the given SearchWarning and assigns it to the SearchWarning field.
func (o *SearchResponseMetadata) SetSearchWarning(v SearchWarning) {
	o.SearchWarning = &v
}

// GetTriggeredExpertDetection returns the TriggeredExpertDetection field value if set, zero value otherwise.
func (o *SearchResponseMetadata) GetTriggeredExpertDetection() bool {
	if o == nil || IsNil(o.TriggeredExpertDetection) {
		var ret bool
		return ret
	}
	return *o.TriggeredExpertDetection
}

// GetTriggeredExpertDetectionOk returns a tuple with the TriggeredExpertDetection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResponseMetadata) GetTriggeredExpertDetectionOk() (*bool, bool) {
	if o == nil || IsNil(o.TriggeredExpertDetection) {
		return nil, false
	}
	return o.TriggeredExpertDetection, true
}

// HasTriggeredExpertDetection returns a boolean if a field has been set.
func (o *SearchResponseMetadata) HasTriggeredExpertDetection() bool {
	if o != nil && !IsNil(o.TriggeredExpertDetection) {
		return true
	}

	return false
}

// SetTriggeredExpertDetection gets a reference to the given bool and assigns it to the TriggeredExpertDetection field.
func (o *SearchResponseMetadata) SetTriggeredExpertDetection(v bool) {
	o.TriggeredExpertDetection = &v
}

func (o SearchResponseMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResponseMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RewrittenQuery) {
		toSerialize["rewrittenQuery"] = o.RewrittenQuery
	}
	if !IsNil(o.SearchedQuery) {
		toSerialize["searchedQuery"] = o.SearchedQuery
	}
	if !IsNil(o.SearchedQueryRanges) {
		toSerialize["searchedQueryRanges"] = o.SearchedQueryRanges
	}
	if !IsNil(o.OriginalQuery) {
		toSerialize["originalQuery"] = o.OriginalQuery
	}
	if !IsNil(o.QuerySuggestion) {
		toSerialize["querySuggestion"] = o.QuerySuggestion
	}
	if !IsNil(o.NegatedTerms) {
		toSerialize["negatedTerms"] = o.NegatedTerms
	}
	if !IsNil(o.IgnoredTerms) {
		toSerialize["ignoredTerms"] = o.IgnoredTerms
	}
	if !IsNil(o.ModifiedQueryWasUsed) {
		toSerialize["modifiedQueryWasUsed"] = o.ModifiedQueryWasUsed
	}
	if !IsNil(o.OriginalQueryHadNoResults) {
		toSerialize["originalQueryHadNoResults"] = o.OriginalQueryHadNoResults
	}
	if !IsNil(o.SearchWarning) {
		toSerialize["searchWarning"] = o.SearchWarning
	}
	if !IsNil(o.TriggeredExpertDetection) {
		toSerialize["triggeredExpertDetection"] = o.TriggeredExpertDetection
	}
	return toSerialize, nil
}

type NullableSearchResponseMetadata struct {
	value *SearchResponseMetadata
	isSet bool
}

func (v NullableSearchResponseMetadata) Get() *SearchResponseMetadata {
	return v.value
}

func (v *NullableSearchResponseMetadata) Set(val *SearchResponseMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResponseMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResponseMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResponseMetadata(val *SearchResponseMetadata) *NullableSearchResponseMetadata {
	return &NullableSearchResponseMetadata{value: val, isSet: true}
}

func (v NullableSearchResponseMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResponseMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


