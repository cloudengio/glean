/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Period type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Period{}

// Period struct for Period
type Period struct {
	// DEPRECATED - The number of days from now in the past to define upper boundary of time period.
	// Deprecated
	MinDaysFromNow *int32 `json:"minDaysFromNow,omitempty"`
	// DEPRECATED - The number of days from now in the past to define lower boundary of time period.
	// Deprecated
	MaxDaysFromNow *int32 `json:"maxDaysFromNow,omitempty"`
	Start *TimePoint `json:"start,omitempty"`
	End *TimePoint `json:"end,omitempty"`
}

// NewPeriod instantiates a new Period object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriod() *Period {
	this := Period{}
	return &this
}

// NewPeriodWithDefaults instantiates a new Period object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeriodWithDefaults() *Period {
	this := Period{}
	return &this
}

// GetMinDaysFromNow returns the MinDaysFromNow field value if set, zero value otherwise.
// Deprecated
func (o *Period) GetMinDaysFromNow() int32 {
	if o == nil || IsNil(o.MinDaysFromNow) {
		var ret int32
		return ret
	}
	return *o.MinDaysFromNow
}

// GetMinDaysFromNowOk returns a tuple with the MinDaysFromNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Period) GetMinDaysFromNowOk() (*int32, bool) {
	if o == nil || IsNil(o.MinDaysFromNow) {
		return nil, false
	}
	return o.MinDaysFromNow, true
}

// HasMinDaysFromNow returns a boolean if a field has been set.
func (o *Period) HasMinDaysFromNow() bool {
	if o != nil && !IsNil(o.MinDaysFromNow) {
		return true
	}

	return false
}

// SetMinDaysFromNow gets a reference to the given int32 and assigns it to the MinDaysFromNow field.
// Deprecated
func (o *Period) SetMinDaysFromNow(v int32) {
	o.MinDaysFromNow = &v
}

// GetMaxDaysFromNow returns the MaxDaysFromNow field value if set, zero value otherwise.
// Deprecated
func (o *Period) GetMaxDaysFromNow() int32 {
	if o == nil || IsNil(o.MaxDaysFromNow) {
		var ret int32
		return ret
	}
	return *o.MaxDaysFromNow
}

// GetMaxDaysFromNowOk returns a tuple with the MaxDaysFromNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Period) GetMaxDaysFromNowOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDaysFromNow) {
		return nil, false
	}
	return o.MaxDaysFromNow, true
}

// HasMaxDaysFromNow returns a boolean if a field has been set.
func (o *Period) HasMaxDaysFromNow() bool {
	if o != nil && !IsNil(o.MaxDaysFromNow) {
		return true
	}

	return false
}

// SetMaxDaysFromNow gets a reference to the given int32 and assigns it to the MaxDaysFromNow field.
// Deprecated
func (o *Period) SetMaxDaysFromNow(v int32) {
	o.MaxDaysFromNow = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Period) GetStart() TimePoint {
	if o == nil || IsNil(o.Start) {
		var ret TimePoint
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Period) GetStartOk() (*TimePoint, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Period) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given TimePoint and assigns it to the Start field.
func (o *Period) SetStart(v TimePoint) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Period) GetEnd() TimePoint {
	if o == nil || IsNil(o.End) {
		var ret TimePoint
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Period) GetEndOk() (*TimePoint, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Period) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given TimePoint and assigns it to the End field.
func (o *Period) SetEnd(v TimePoint) {
	o.End = &v
}

func (o Period) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Period) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MinDaysFromNow) {
		toSerialize["minDaysFromNow"] = o.MinDaysFromNow
	}
	if !IsNil(o.MaxDaysFromNow) {
		toSerialize["maxDaysFromNow"] = o.MaxDaysFromNow
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullablePeriod struct {
	value *Period
	isSet bool
}

func (v NullablePeriod) Get() *Period {
	return v.value
}

func (v *NullablePeriod) Set(val *Period) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriod) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriod(val *Period) *NullablePeriod {
	return &NullablePeriod{value: val, isSet: true}
}

func (v NullablePeriod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


