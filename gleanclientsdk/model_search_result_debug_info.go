/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the SearchResultDebugInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchResultDebugInfo{}

// SearchResultDebugInfo struct for SearchResultDebugInfo
type SearchResultDebugInfo struct {
	FinalScore *float64 `json:"finalScore,omitempty"`
	ScholasticScore *float64 `json:"scholasticScore,omitempty"`
	ScholasticContent *string `json:"scholasticContent,omitempty"`
	ScholasticRetrievalOnly *bool `json:"scholasticRetrievalOnly,omitempty"`
	Explanation *string `json:"explanation,omitempty"`
	SnippetScore *float64 `json:"snippetScore,omitempty"`
	Position *int64 `json:"position,omitempty"`
	// Information about boundaries / endpoints of documents, e.g., messages in a conversation - only used for evals and always scrubbed + without PII.
	EvalDocumentDescriptorEncoded *string `json:"evalDocumentDescriptorEncoded,omitempty"`
	// The document id hash.
	IdHash *string `json:"id_hash,omitempty"`
}

// NewSearchResultDebugInfo instantiates a new SearchResultDebugInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchResultDebugInfo() *SearchResultDebugInfo {
	this := SearchResultDebugInfo{}
	return &this
}

// NewSearchResultDebugInfoWithDefaults instantiates a new SearchResultDebugInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchResultDebugInfoWithDefaults() *SearchResultDebugInfo {
	this := SearchResultDebugInfo{}
	return &this
}

// GetFinalScore returns the FinalScore field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetFinalScore() float64 {
	if o == nil || IsNil(o.FinalScore) {
		var ret float64
		return ret
	}
	return *o.FinalScore
}

// GetFinalScoreOk returns a tuple with the FinalScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetFinalScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.FinalScore) {
		return nil, false
	}
	return o.FinalScore, true
}

// HasFinalScore returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasFinalScore() bool {
	if o != nil && !IsNil(o.FinalScore) {
		return true
	}

	return false
}

// SetFinalScore gets a reference to the given float64 and assigns it to the FinalScore field.
func (o *SearchResultDebugInfo) SetFinalScore(v float64) {
	o.FinalScore = &v
}

// GetScholasticScore returns the ScholasticScore field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetScholasticScore() float64 {
	if o == nil || IsNil(o.ScholasticScore) {
		var ret float64
		return ret
	}
	return *o.ScholasticScore
}

// GetScholasticScoreOk returns a tuple with the ScholasticScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetScholasticScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.ScholasticScore) {
		return nil, false
	}
	return o.ScholasticScore, true
}

// HasScholasticScore returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasScholasticScore() bool {
	if o != nil && !IsNil(o.ScholasticScore) {
		return true
	}

	return false
}

// SetScholasticScore gets a reference to the given float64 and assigns it to the ScholasticScore field.
func (o *SearchResultDebugInfo) SetScholasticScore(v float64) {
	o.ScholasticScore = &v
}

// GetScholasticContent returns the ScholasticContent field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetScholasticContent() string {
	if o == nil || IsNil(o.ScholasticContent) {
		var ret string
		return ret
	}
	return *o.ScholasticContent
}

// GetScholasticContentOk returns a tuple with the ScholasticContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetScholasticContentOk() (*string, bool) {
	if o == nil || IsNil(o.ScholasticContent) {
		return nil, false
	}
	return o.ScholasticContent, true
}

// HasScholasticContent returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasScholasticContent() bool {
	if o != nil && !IsNil(o.ScholasticContent) {
		return true
	}

	return false
}

// SetScholasticContent gets a reference to the given string and assigns it to the ScholasticContent field.
func (o *SearchResultDebugInfo) SetScholasticContent(v string) {
	o.ScholasticContent = &v
}

// GetScholasticRetrievalOnly returns the ScholasticRetrievalOnly field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetScholasticRetrievalOnly() bool {
	if o == nil || IsNil(o.ScholasticRetrievalOnly) {
		var ret bool
		return ret
	}
	return *o.ScholasticRetrievalOnly
}

// GetScholasticRetrievalOnlyOk returns a tuple with the ScholasticRetrievalOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetScholasticRetrievalOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.ScholasticRetrievalOnly) {
		return nil, false
	}
	return o.ScholasticRetrievalOnly, true
}

// HasScholasticRetrievalOnly returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasScholasticRetrievalOnly() bool {
	if o != nil && !IsNil(o.ScholasticRetrievalOnly) {
		return true
	}

	return false
}

// SetScholasticRetrievalOnly gets a reference to the given bool and assigns it to the ScholasticRetrievalOnly field.
func (o *SearchResultDebugInfo) SetScholasticRetrievalOnly(v bool) {
	o.ScholasticRetrievalOnly = &v
}

// GetExplanation returns the Explanation field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetExplanation() string {
	if o == nil || IsNil(o.Explanation) {
		var ret string
		return ret
	}
	return *o.Explanation
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetExplanationOk() (*string, bool) {
	if o == nil || IsNil(o.Explanation) {
		return nil, false
	}
	return o.Explanation, true
}

// HasExplanation returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasExplanation() bool {
	if o != nil && !IsNil(o.Explanation) {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given string and assigns it to the Explanation field.
func (o *SearchResultDebugInfo) SetExplanation(v string) {
	o.Explanation = &v
}

// GetSnippetScore returns the SnippetScore field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetSnippetScore() float64 {
	if o == nil || IsNil(o.SnippetScore) {
		var ret float64
		return ret
	}
	return *o.SnippetScore
}

// GetSnippetScoreOk returns a tuple with the SnippetScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetSnippetScoreOk() (*float64, bool) {
	if o == nil || IsNil(o.SnippetScore) {
		return nil, false
	}
	return o.SnippetScore, true
}

// HasSnippetScore returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasSnippetScore() bool {
	if o != nil && !IsNil(o.SnippetScore) {
		return true
	}

	return false
}

// SetSnippetScore gets a reference to the given float64 and assigns it to the SnippetScore field.
func (o *SearchResultDebugInfo) SetSnippetScore(v float64) {
	o.SnippetScore = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetPosition() int64 {
	if o == nil || IsNil(o.Position) {
		var ret int64
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetPositionOk() (*int64, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int64 and assigns it to the Position field.
func (o *SearchResultDebugInfo) SetPosition(v int64) {
	o.Position = &v
}

// GetEvalDocumentDescriptorEncoded returns the EvalDocumentDescriptorEncoded field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetEvalDocumentDescriptorEncoded() string {
	if o == nil || IsNil(o.EvalDocumentDescriptorEncoded) {
		var ret string
		return ret
	}
	return *o.EvalDocumentDescriptorEncoded
}

// GetEvalDocumentDescriptorEncodedOk returns a tuple with the EvalDocumentDescriptorEncoded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetEvalDocumentDescriptorEncodedOk() (*string, bool) {
	if o == nil || IsNil(o.EvalDocumentDescriptorEncoded) {
		return nil, false
	}
	return o.EvalDocumentDescriptorEncoded, true
}

// HasEvalDocumentDescriptorEncoded returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasEvalDocumentDescriptorEncoded() bool {
	if o != nil && !IsNil(o.EvalDocumentDescriptorEncoded) {
		return true
	}

	return false
}

// SetEvalDocumentDescriptorEncoded gets a reference to the given string and assigns it to the EvalDocumentDescriptorEncoded field.
func (o *SearchResultDebugInfo) SetEvalDocumentDescriptorEncoded(v string) {
	o.EvalDocumentDescriptorEncoded = &v
}

// GetIdHash returns the IdHash field value if set, zero value otherwise.
func (o *SearchResultDebugInfo) GetIdHash() string {
	if o == nil || IsNil(o.IdHash) {
		var ret string
		return ret
	}
	return *o.IdHash
}

// GetIdHashOk returns a tuple with the IdHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchResultDebugInfo) GetIdHashOk() (*string, bool) {
	if o == nil || IsNil(o.IdHash) {
		return nil, false
	}
	return o.IdHash, true
}

// HasIdHash returns a boolean if a field has been set.
func (o *SearchResultDebugInfo) HasIdHash() bool {
	if o != nil && !IsNil(o.IdHash) {
		return true
	}

	return false
}

// SetIdHash gets a reference to the given string and assigns it to the IdHash field.
func (o *SearchResultDebugInfo) SetIdHash(v string) {
	o.IdHash = &v
}

func (o SearchResultDebugInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchResultDebugInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FinalScore) {
		toSerialize["finalScore"] = o.FinalScore
	}
	if !IsNil(o.ScholasticScore) {
		toSerialize["scholasticScore"] = o.ScholasticScore
	}
	if !IsNil(o.ScholasticContent) {
		toSerialize["scholasticContent"] = o.ScholasticContent
	}
	if !IsNil(o.ScholasticRetrievalOnly) {
		toSerialize["scholasticRetrievalOnly"] = o.ScholasticRetrievalOnly
	}
	if !IsNil(o.Explanation) {
		toSerialize["explanation"] = o.Explanation
	}
	if !IsNil(o.SnippetScore) {
		toSerialize["snippetScore"] = o.SnippetScore
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	if !IsNil(o.EvalDocumentDescriptorEncoded) {
		toSerialize["evalDocumentDescriptorEncoded"] = o.EvalDocumentDescriptorEncoded
	}
	if !IsNil(o.IdHash) {
		toSerialize["id_hash"] = o.IdHash
	}
	return toSerialize, nil
}

type NullableSearchResultDebugInfo struct {
	value *SearchResultDebugInfo
	isSet bool
}

func (v NullableSearchResultDebugInfo) Get() *SearchResultDebugInfo {
	return v.value
}

func (v *NullableSearchResultDebugInfo) Set(val *SearchResultDebugInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchResultDebugInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchResultDebugInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchResultDebugInfo(val *SearchResultDebugInfo) *NullableSearchResultDebugInfo {
	return &NullableSearchResultDebugInfo{value: val, isSet: true}
}

func (v NullableSearchResultDebugInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchResultDebugInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


