/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the GeneratedQna type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GeneratedQna{}

// GeneratedQna struct for GeneratedQna
type GeneratedQna struct {
	// Search query rephrased into a question.
	Question *string `json:"question,omitempty"`
	// Answer generated for the given query or the generated question.
	Answer *string `json:"answer,omitempty"`
	// Answer subsections to mark with special formatting (citations, bolding etc)
	Ranges []TextRange `json:"ranges,omitempty"`
	// Status of backend generating the answer
	Status *string `json:"status,omitempty"`
	// An opaque cursor representing the search request
	Cursor *string `json:"cursor,omitempty"`
	// An opaque token that represents this particular result in this particular query. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
	// Debug details for this result if debug is enabled.
	DebugInfo *string `json:"debugInfo,omitempty"`
}

// NewGeneratedQna instantiates a new GeneratedQna object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGeneratedQna() *GeneratedQna {
	this := GeneratedQna{}
	return &this
}

// NewGeneratedQnaWithDefaults instantiates a new GeneratedQna object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGeneratedQnaWithDefaults() *GeneratedQna {
	this := GeneratedQna{}
	return &this
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *GeneratedQna) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedQna) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *GeneratedQna) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *GeneratedQna) SetQuestion(v string) {
	o.Question = &v
}

// GetAnswer returns the Answer field value if set, zero value otherwise.
func (o *GeneratedQna) GetAnswer() string {
	if o == nil || IsNil(o.Answer) {
		var ret string
		return ret
	}
	return *o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedQna) GetAnswerOk() (*string, bool) {
	if o == nil || IsNil(o.Answer) {
		return nil, false
	}
	return o.Answer, true
}

// HasAnswer returns a boolean if a field has been set.
func (o *GeneratedQna) HasAnswer() bool {
	if o != nil && !IsNil(o.Answer) {
		return true
	}

	return false
}

// SetAnswer gets a reference to the given string and assigns it to the Answer field.
func (o *GeneratedQna) SetAnswer(v string) {
	o.Answer = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *GeneratedQna) GetRanges() []TextRange {
	if o == nil || IsNil(o.Ranges) {
		var ret []TextRange
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedQna) GetRangesOk() ([]TextRange, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *GeneratedQna) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []TextRange and assigns it to the Ranges field.
func (o *GeneratedQna) SetRanges(v []TextRange) {
	o.Ranges = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *GeneratedQna) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedQna) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *GeneratedQna) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *GeneratedQna) SetStatus(v string) {
	o.Status = &v
}

// GetCursor returns the Cursor field value if set, zero value otherwise.
func (o *GeneratedQna) GetCursor() string {
	if o == nil || IsNil(o.Cursor) {
		var ret string
		return ret
	}
	return *o.Cursor
}

// GetCursorOk returns a tuple with the Cursor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedQna) GetCursorOk() (*string, bool) {
	if o == nil || IsNil(o.Cursor) {
		return nil, false
	}
	return o.Cursor, true
}

// HasCursor returns a boolean if a field has been set.
func (o *GeneratedQna) HasCursor() bool {
	if o != nil && !IsNil(o.Cursor) {
		return true
	}

	return false
}

// SetCursor gets a reference to the given string and assigns it to the Cursor field.
func (o *GeneratedQna) SetCursor(v string) {
	o.Cursor = &v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *GeneratedQna) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedQna) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *GeneratedQna) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *GeneratedQna) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

// GetDebugInfo returns the DebugInfo field value if set, zero value otherwise.
func (o *GeneratedQna) GetDebugInfo() string {
	if o == nil || IsNil(o.DebugInfo) {
		var ret string
		return ret
	}
	return *o.DebugInfo
}

// GetDebugInfoOk returns a tuple with the DebugInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GeneratedQna) GetDebugInfoOk() (*string, bool) {
	if o == nil || IsNil(o.DebugInfo) {
		return nil, false
	}
	return o.DebugInfo, true
}

// HasDebugInfo returns a boolean if a field has been set.
func (o *GeneratedQna) HasDebugInfo() bool {
	if o != nil && !IsNil(o.DebugInfo) {
		return true
	}

	return false
}

// SetDebugInfo gets a reference to the given string and assigns it to the DebugInfo field.
func (o *GeneratedQna) SetDebugInfo(v string) {
	o.DebugInfo = &v
}

func (o GeneratedQna) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GeneratedQna) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.Answer) {
		toSerialize["answer"] = o.Answer
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Cursor) {
		toSerialize["cursor"] = o.Cursor
	}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	if !IsNil(o.DebugInfo) {
		toSerialize["debugInfo"] = o.DebugInfo
	}
	return toSerialize, nil
}

type NullableGeneratedQna struct {
	value *GeneratedQna
	isSet bool
}

func (v NullableGeneratedQna) Get() *GeneratedQna {
	return v.value
}

func (v *NullableGeneratedQna) Set(val *GeneratedQna) {
	v.value = val
	v.isSet = true
}

func (v NullableGeneratedQna) IsSet() bool {
	return v.isSet
}

func (v *NullableGeneratedQna) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeneratedQna(val *GeneratedQna) *NullableGeneratedQna {
	return &NullableGeneratedQna{value: val, isSet: true}
}

func (v NullableGeneratedQna) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeneratedQna) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


