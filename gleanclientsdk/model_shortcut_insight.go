/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ShortcutInsight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShortcutInsight{}

// ShortcutInsight struct for ShortcutInsight
type ShortcutInsight struct {
	Shortcut Shortcut `json:"shortcut"`
	VisitCount *CountInfo `json:"visitCount,omitempty"`
	VisitorCount *CountInfo `json:"visitorCount,omitempty"`
}

// NewShortcutInsight instantiates a new ShortcutInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShortcutInsight(shortcut Shortcut) *ShortcutInsight {
	this := ShortcutInsight{}
	this.Shortcut = shortcut
	return &this
}

// NewShortcutInsightWithDefaults instantiates a new ShortcutInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShortcutInsightWithDefaults() *ShortcutInsight {
	this := ShortcutInsight{}
	return &this
}

// GetShortcut returns the Shortcut field value
func (o *ShortcutInsight) GetShortcut() Shortcut {
	if o == nil {
		var ret Shortcut
		return ret
	}

	return o.Shortcut
}

// GetShortcutOk returns a tuple with the Shortcut field value
// and a boolean to check if the value has been set.
func (o *ShortcutInsight) GetShortcutOk() (*Shortcut, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Shortcut, true
}

// SetShortcut sets field value
func (o *ShortcutInsight) SetShortcut(v Shortcut) {
	o.Shortcut = v
}

// GetVisitCount returns the VisitCount field value if set, zero value otherwise.
func (o *ShortcutInsight) GetVisitCount() CountInfo {
	if o == nil || IsNil(o.VisitCount) {
		var ret CountInfo
		return ret
	}
	return *o.VisitCount
}

// GetVisitCountOk returns a tuple with the VisitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortcutInsight) GetVisitCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.VisitCount) {
		return nil, false
	}
	return o.VisitCount, true
}

// HasVisitCount returns a boolean if a field has been set.
func (o *ShortcutInsight) HasVisitCount() bool {
	if o != nil && !IsNil(o.VisitCount) {
		return true
	}

	return false
}

// SetVisitCount gets a reference to the given CountInfo and assigns it to the VisitCount field.
func (o *ShortcutInsight) SetVisitCount(v CountInfo) {
	o.VisitCount = &v
}

// GetVisitorCount returns the VisitorCount field value if set, zero value otherwise.
func (o *ShortcutInsight) GetVisitorCount() CountInfo {
	if o == nil || IsNil(o.VisitorCount) {
		var ret CountInfo
		return ret
	}
	return *o.VisitorCount
}

// GetVisitorCountOk returns a tuple with the VisitorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShortcutInsight) GetVisitorCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.VisitorCount) {
		return nil, false
	}
	return o.VisitorCount, true
}

// HasVisitorCount returns a boolean if a field has been set.
func (o *ShortcutInsight) HasVisitorCount() bool {
	if o != nil && !IsNil(o.VisitorCount) {
		return true
	}

	return false
}

// SetVisitorCount gets a reference to the given CountInfo and assigns it to the VisitorCount field.
func (o *ShortcutInsight) SetVisitorCount(v CountInfo) {
	o.VisitorCount = &v
}

func (o ShortcutInsight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShortcutInsight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["shortcut"] = o.Shortcut
	if !IsNil(o.VisitCount) {
		toSerialize["visitCount"] = o.VisitCount
	}
	if !IsNil(o.VisitorCount) {
		toSerialize["visitorCount"] = o.VisitorCount
	}
	return toSerialize, nil
}

type NullableShortcutInsight struct {
	value *ShortcutInsight
	isSet bool
}

func (v NullableShortcutInsight) Get() *ShortcutInsight {
	return v.value
}

func (v *NullableShortcutInsight) Set(val *ShortcutInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableShortcutInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableShortcutInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShortcutInsight(val *ShortcutInsight) *NullableShortcutInsight {
	return &NullableShortcutInsight{value: val, isSet: true}
}

func (v NullableShortcutInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShortcutInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


