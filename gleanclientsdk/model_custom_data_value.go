/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CustomDataValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomDataValue{}

// CustomDataValue struct for CustomDataValue
type CustomDataValue struct {
	DisplayLabel *string `json:"displayLabel,omitempty"`
	StringValue *string `json:"stringValue,omitempty"`
	// list of strings for multi-value properties
	StringListValue []string `json:"stringListValue,omitempty"`
	NumberValue *float32 `json:"numberValue,omitempty"`
}

// NewCustomDataValue instantiates a new CustomDataValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomDataValue() *CustomDataValue {
	this := CustomDataValue{}
	return &this
}

// NewCustomDataValueWithDefaults instantiates a new CustomDataValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomDataValueWithDefaults() *CustomDataValue {
	this := CustomDataValue{}
	return &this
}

// GetDisplayLabel returns the DisplayLabel field value if set, zero value otherwise.
func (o *CustomDataValue) GetDisplayLabel() string {
	if o == nil || IsNil(o.DisplayLabel) {
		var ret string
		return ret
	}
	return *o.DisplayLabel
}

// GetDisplayLabelOk returns a tuple with the DisplayLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDataValue) GetDisplayLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayLabel) {
		return nil, false
	}
	return o.DisplayLabel, true
}

// HasDisplayLabel returns a boolean if a field has been set.
func (o *CustomDataValue) HasDisplayLabel() bool {
	if o != nil && !IsNil(o.DisplayLabel) {
		return true
	}

	return false
}

// SetDisplayLabel gets a reference to the given string and assigns it to the DisplayLabel field.
func (o *CustomDataValue) SetDisplayLabel(v string) {
	o.DisplayLabel = &v
}

// GetStringValue returns the StringValue field value if set, zero value otherwise.
func (o *CustomDataValue) GetStringValue() string {
	if o == nil || IsNil(o.StringValue) {
		var ret string
		return ret
	}
	return *o.StringValue
}

// GetStringValueOk returns a tuple with the StringValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDataValue) GetStringValueOk() (*string, bool) {
	if o == nil || IsNil(o.StringValue) {
		return nil, false
	}
	return o.StringValue, true
}

// HasStringValue returns a boolean if a field has been set.
func (o *CustomDataValue) HasStringValue() bool {
	if o != nil && !IsNil(o.StringValue) {
		return true
	}

	return false
}

// SetStringValue gets a reference to the given string and assigns it to the StringValue field.
func (o *CustomDataValue) SetStringValue(v string) {
	o.StringValue = &v
}

// GetStringListValue returns the StringListValue field value if set, zero value otherwise.
func (o *CustomDataValue) GetStringListValue() []string {
	if o == nil || IsNil(o.StringListValue) {
		var ret []string
		return ret
	}
	return o.StringListValue
}

// GetStringListValueOk returns a tuple with the StringListValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDataValue) GetStringListValueOk() ([]string, bool) {
	if o == nil || IsNil(o.StringListValue) {
		return nil, false
	}
	return o.StringListValue, true
}

// HasStringListValue returns a boolean if a field has been set.
func (o *CustomDataValue) HasStringListValue() bool {
	if o != nil && !IsNil(o.StringListValue) {
		return true
	}

	return false
}

// SetStringListValue gets a reference to the given []string and assigns it to the StringListValue field.
func (o *CustomDataValue) SetStringListValue(v []string) {
	o.StringListValue = v
}

// GetNumberValue returns the NumberValue field value if set, zero value otherwise.
func (o *CustomDataValue) GetNumberValue() float32 {
	if o == nil || IsNil(o.NumberValue) {
		var ret float32
		return ret
	}
	return *o.NumberValue
}

// GetNumberValueOk returns a tuple with the NumberValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDataValue) GetNumberValueOk() (*float32, bool) {
	if o == nil || IsNil(o.NumberValue) {
		return nil, false
	}
	return o.NumberValue, true
}

// HasNumberValue returns a boolean if a field has been set.
func (o *CustomDataValue) HasNumberValue() bool {
	if o != nil && !IsNil(o.NumberValue) {
		return true
	}

	return false
}

// SetNumberValue gets a reference to the given float32 and assigns it to the NumberValue field.
func (o *CustomDataValue) SetNumberValue(v float32) {
	o.NumberValue = &v
}

func (o CustomDataValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomDataValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisplayLabel) {
		toSerialize["displayLabel"] = o.DisplayLabel
	}
	if !IsNil(o.StringValue) {
		toSerialize["stringValue"] = o.StringValue
	}
	if !IsNil(o.StringListValue) {
		toSerialize["stringListValue"] = o.StringListValue
	}
	if !IsNil(o.NumberValue) {
		toSerialize["numberValue"] = o.NumberValue
	}
	return toSerialize, nil
}

type NullableCustomDataValue struct {
	value *CustomDataValue
	isSet bool
}

func (v NullableCustomDataValue) Get() *CustomDataValue {
	return v.value
}

func (v *NullableCustomDataValue) Set(val *CustomDataValue) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomDataValue) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomDataValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomDataValue(val *CustomDataValue) *NullableCustomDataValue {
	return &NullableCustomDataValue{value: val, isSet: true}
}

func (v NullableCustomDataValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomDataValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


