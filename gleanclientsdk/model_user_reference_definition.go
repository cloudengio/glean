/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the UserReferenceDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserReferenceDefinition{}

// UserReferenceDefinition Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.
type UserReferenceDefinition struct {
	Email *string `json:"email,omitempty"`
	// some datasources refer to the user by the datasource user id in the document
	DatasourceUserId *string `json:"datasourceUserId,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewUserReferenceDefinition instantiates a new UserReferenceDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserReferenceDefinition() *UserReferenceDefinition {
	this := UserReferenceDefinition{}
	return &this
}

// NewUserReferenceDefinitionWithDefaults instantiates a new UserReferenceDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserReferenceDefinitionWithDefaults() *UserReferenceDefinition {
	this := UserReferenceDefinition{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UserReferenceDefinition) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserReferenceDefinition) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UserReferenceDefinition) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UserReferenceDefinition) SetEmail(v string) {
	o.Email = &v
}

// GetDatasourceUserId returns the DatasourceUserId field value if set, zero value otherwise.
func (o *UserReferenceDefinition) GetDatasourceUserId() string {
	if o == nil || IsNil(o.DatasourceUserId) {
		var ret string
		return ret
	}
	return *o.DatasourceUserId
}

// GetDatasourceUserIdOk returns a tuple with the DatasourceUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserReferenceDefinition) GetDatasourceUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.DatasourceUserId) {
		return nil, false
	}
	return o.DatasourceUserId, true
}

// HasDatasourceUserId returns a boolean if a field has been set.
func (o *UserReferenceDefinition) HasDatasourceUserId() bool {
	if o != nil && !IsNil(o.DatasourceUserId) {
		return true
	}

	return false
}

// SetDatasourceUserId gets a reference to the given string and assigns it to the DatasourceUserId field.
func (o *UserReferenceDefinition) SetDatasourceUserId(v string) {
	o.DatasourceUserId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserReferenceDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserReferenceDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserReferenceDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserReferenceDefinition) SetName(v string) {
	o.Name = &v
}

func (o UserReferenceDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserReferenceDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.DatasourceUserId) {
		toSerialize["datasourceUserId"] = o.DatasourceUserId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableUserReferenceDefinition struct {
	value *UserReferenceDefinition
	isSet bool
}

func (v NullableUserReferenceDefinition) Get() *UserReferenceDefinition {
	return v.value
}

func (v *NullableUserReferenceDefinition) Set(val *UserReferenceDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableUserReferenceDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableUserReferenceDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserReferenceDefinition(val *UserReferenceDefinition) *NullableUserReferenceDefinition {
	return &NullableUserReferenceDefinition{value: val, isSet: true}
}

func (v NullableUserReferenceDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserReferenceDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


