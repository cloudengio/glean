/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ConfigResponseAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfigResponseAllOf{}

// ConfigResponseAllOf struct for ConfigResponseAllOf
type ConfigResponseAllOf struct {
	// List of datasource \"classes\". Will contain a list of datasource instances, but if you need instances for now, continue to use ConfigResponse.datasources (misnamed instances)
	DatasourceConfigs []DatasourceConfig `json:"datasourceConfigs,omitempty"`
	// List of configurations for datasource instances that may be displayed.
	Datasources []DatasourceSchema `json:"datasources,omitempty"`
	UserSettings *UserSettings `json:"userSettings,omitempty"`
	// Build versions to be rendered in debug mode.
	ServerBuildVersion *string `json:"serverBuildVersion,omitempty"`
	ClientConfig *ClientConfig `json:"clientConfig,omitempty"`
	Permissions *Permissions `json:"permissions,omitempty"`
	SessionInfo *SessionInfo `json:"sessionInfo,omitempty"`
	RenderConfigs *map[string]map[string]RenderConfig `json:"renderConfigs,omitempty"`
	Navigation *Navigation `json:"navigation,omitempty"`
}

// NewConfigResponseAllOf instantiates a new ConfigResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfigResponseAllOf() *ConfigResponseAllOf {
	this := ConfigResponseAllOf{}
	return &this
}

// NewConfigResponseAllOfWithDefaults instantiates a new ConfigResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfigResponseAllOfWithDefaults() *ConfigResponseAllOf {
	this := ConfigResponseAllOf{}
	return &this
}

// GetDatasourceConfigs returns the DatasourceConfigs field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetDatasourceConfigs() []DatasourceConfig {
	if o == nil || IsNil(o.DatasourceConfigs) {
		var ret []DatasourceConfig
		return ret
	}
	return o.DatasourceConfigs
}

// GetDatasourceConfigsOk returns a tuple with the DatasourceConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetDatasourceConfigsOk() ([]DatasourceConfig, bool) {
	if o == nil || IsNil(o.DatasourceConfigs) {
		return nil, false
	}
	return o.DatasourceConfigs, true
}

// HasDatasourceConfigs returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasDatasourceConfigs() bool {
	if o != nil && !IsNil(o.DatasourceConfigs) {
		return true
	}

	return false
}

// SetDatasourceConfigs gets a reference to the given []DatasourceConfig and assigns it to the DatasourceConfigs field.
func (o *ConfigResponseAllOf) SetDatasourceConfigs(v []DatasourceConfig) {
	o.DatasourceConfigs = v
}

// GetDatasources returns the Datasources field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetDatasources() []DatasourceSchema {
	if o == nil || IsNil(o.Datasources) {
		var ret []DatasourceSchema
		return ret
	}
	return o.Datasources
}

// GetDatasourcesOk returns a tuple with the Datasources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetDatasourcesOk() ([]DatasourceSchema, bool) {
	if o == nil || IsNil(o.Datasources) {
		return nil, false
	}
	return o.Datasources, true
}

// HasDatasources returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasDatasources() bool {
	if o != nil && !IsNil(o.Datasources) {
		return true
	}

	return false
}

// SetDatasources gets a reference to the given []DatasourceSchema and assigns it to the Datasources field.
func (o *ConfigResponseAllOf) SetDatasources(v []DatasourceSchema) {
	o.Datasources = v
}

// GetUserSettings returns the UserSettings field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetUserSettings() UserSettings {
	if o == nil || IsNil(o.UserSettings) {
		var ret UserSettings
		return ret
	}
	return *o.UserSettings
}

// GetUserSettingsOk returns a tuple with the UserSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetUserSettingsOk() (*UserSettings, bool) {
	if o == nil || IsNil(o.UserSettings) {
		return nil, false
	}
	return o.UserSettings, true
}

// HasUserSettings returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasUserSettings() bool {
	if o != nil && !IsNil(o.UserSettings) {
		return true
	}

	return false
}

// SetUserSettings gets a reference to the given UserSettings and assigns it to the UserSettings field.
func (o *ConfigResponseAllOf) SetUserSettings(v UserSettings) {
	o.UserSettings = &v
}

// GetServerBuildVersion returns the ServerBuildVersion field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetServerBuildVersion() string {
	if o == nil || IsNil(o.ServerBuildVersion) {
		var ret string
		return ret
	}
	return *o.ServerBuildVersion
}

// GetServerBuildVersionOk returns a tuple with the ServerBuildVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetServerBuildVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerBuildVersion) {
		return nil, false
	}
	return o.ServerBuildVersion, true
}

// HasServerBuildVersion returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasServerBuildVersion() bool {
	if o != nil && !IsNil(o.ServerBuildVersion) {
		return true
	}

	return false
}

// SetServerBuildVersion gets a reference to the given string and assigns it to the ServerBuildVersion field.
func (o *ConfigResponseAllOf) SetServerBuildVersion(v string) {
	o.ServerBuildVersion = &v
}

// GetClientConfig returns the ClientConfig field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetClientConfig() ClientConfig {
	if o == nil || IsNil(o.ClientConfig) {
		var ret ClientConfig
		return ret
	}
	return *o.ClientConfig
}

// GetClientConfigOk returns a tuple with the ClientConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetClientConfigOk() (*ClientConfig, bool) {
	if o == nil || IsNil(o.ClientConfig) {
		return nil, false
	}
	return o.ClientConfig, true
}

// HasClientConfig returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasClientConfig() bool {
	if o != nil && !IsNil(o.ClientConfig) {
		return true
	}

	return false
}

// SetClientConfig gets a reference to the given ClientConfig and assigns it to the ClientConfig field.
func (o *ConfigResponseAllOf) SetClientConfig(v ClientConfig) {
	o.ClientConfig = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetPermissions() Permissions {
	if o == nil || IsNil(o.Permissions) {
		var ret Permissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetPermissionsOk() (*Permissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given Permissions and assigns it to the Permissions field.
func (o *ConfigResponseAllOf) SetPermissions(v Permissions) {
	o.Permissions = &v
}

// GetSessionInfo returns the SessionInfo field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetSessionInfo() SessionInfo {
	if o == nil || IsNil(o.SessionInfo) {
		var ret SessionInfo
		return ret
	}
	return *o.SessionInfo
}

// GetSessionInfoOk returns a tuple with the SessionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetSessionInfoOk() (*SessionInfo, bool) {
	if o == nil || IsNil(o.SessionInfo) {
		return nil, false
	}
	return o.SessionInfo, true
}

// HasSessionInfo returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasSessionInfo() bool {
	if o != nil && !IsNil(o.SessionInfo) {
		return true
	}

	return false
}

// SetSessionInfo gets a reference to the given SessionInfo and assigns it to the SessionInfo field.
func (o *ConfigResponseAllOf) SetSessionInfo(v SessionInfo) {
	o.SessionInfo = &v
}

// GetRenderConfigs returns the RenderConfigs field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetRenderConfigs() map[string]map[string]RenderConfig {
	if o == nil || IsNil(o.RenderConfigs) {
		var ret map[string]map[string]RenderConfig
		return ret
	}
	return *o.RenderConfigs
}

// GetRenderConfigsOk returns a tuple with the RenderConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetRenderConfigsOk() (*map[string]map[string]RenderConfig, bool) {
	if o == nil || IsNil(o.RenderConfigs) {
		return nil, false
	}
	return o.RenderConfigs, true
}

// HasRenderConfigs returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasRenderConfigs() bool {
	if o != nil && !IsNil(o.RenderConfigs) {
		return true
	}

	return false
}

// SetRenderConfigs gets a reference to the given map[string]map[string]RenderConfig and assigns it to the RenderConfigs field.
func (o *ConfigResponseAllOf) SetRenderConfigs(v map[string]map[string]RenderConfig) {
	o.RenderConfigs = &v
}

// GetNavigation returns the Navigation field value if set, zero value otherwise.
func (o *ConfigResponseAllOf) GetNavigation() Navigation {
	if o == nil || IsNil(o.Navigation) {
		var ret Navigation
		return ret
	}
	return *o.Navigation
}

// GetNavigationOk returns a tuple with the Navigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConfigResponseAllOf) GetNavigationOk() (*Navigation, bool) {
	if o == nil || IsNil(o.Navigation) {
		return nil, false
	}
	return o.Navigation, true
}

// HasNavigation returns a boolean if a field has been set.
func (o *ConfigResponseAllOf) HasNavigation() bool {
	if o != nil && !IsNil(o.Navigation) {
		return true
	}

	return false
}

// SetNavigation gets a reference to the given Navigation and assigns it to the Navigation field.
func (o *ConfigResponseAllOf) SetNavigation(v Navigation) {
	o.Navigation = &v
}

func (o ConfigResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfigResponseAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DatasourceConfigs) {
		toSerialize["datasourceConfigs"] = o.DatasourceConfigs
	}
	if !IsNil(o.Datasources) {
		toSerialize["datasources"] = o.Datasources
	}
	if !IsNil(o.UserSettings) {
		toSerialize["userSettings"] = o.UserSettings
	}
	if !IsNil(o.ServerBuildVersion) {
		toSerialize["serverBuildVersion"] = o.ServerBuildVersion
	}
	if !IsNil(o.ClientConfig) {
		toSerialize["clientConfig"] = o.ClientConfig
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.SessionInfo) {
		toSerialize["sessionInfo"] = o.SessionInfo
	}
	if !IsNil(o.RenderConfigs) {
		toSerialize["renderConfigs"] = o.RenderConfigs
	}
	if !IsNil(o.Navigation) {
		toSerialize["navigation"] = o.Navigation
	}
	return toSerialize, nil
}

type NullableConfigResponseAllOf struct {
	value *ConfigResponseAllOf
	isSet bool
}

func (v NullableConfigResponseAllOf) Get() *ConfigResponseAllOf {
	return v.value
}

func (v *NullableConfigResponseAllOf) Set(val *ConfigResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableConfigResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableConfigResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfigResponseAllOf(val *ConfigResponseAllOf) *NullableConfigResponseAllOf {
	return &NullableConfigResponseAllOf{value: val, isSet: true}
}

func (v NullableConfigResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfigResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


