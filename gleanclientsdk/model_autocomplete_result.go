/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AutocompleteResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutocompleteResult{}

// AutocompleteResult struct for AutocompleteResult
type AutocompleteResult struct {
	Result string `json:"result"`
	// A list of all possible keywords for given result.
	Keywords []string `json:"keywords,omitempty"`
	ResultType *string `json:"resultType,omitempty"`
	// Higher indicates a more confident match.
	Score *float32 `json:"score,omitempty"`
	OperatorMetadata *OperatorMetadata `json:"operatorMetadata,omitempty"`
	Quicklink *Quicklink `json:"quicklink,omitempty"`
	Document *Document `json:"document,omitempty"`
	Url *string `json:"url,omitempty"`
	StructuredResult *StructuredResult `json:"structuredResult,omitempty"`
	// A token to be passed in /feedback events associated with this autocomplete result.
	TrackingToken *string `json:"trackingToken,omitempty"`
	// Subsections of the result string to which some special formatting should be applied (eg. bold)
	Ranges []TextRange `json:"ranges,omitempty"`
}

// NewAutocompleteResult instantiates a new AutocompleteResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutocompleteResult(result string) *AutocompleteResult {
	this := AutocompleteResult{}
	this.Result = result
	return &this
}

// NewAutocompleteResultWithDefaults instantiates a new AutocompleteResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutocompleteResultWithDefaults() *AutocompleteResult {
	this := AutocompleteResult{}
	return &this
}

// GetResult returns the Result field value
func (o *AutocompleteResult) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *AutocompleteResult) SetResult(v string) {
	o.Result = v
}

// GetKeywords returns the Keywords field value if set, zero value otherwise.
func (o *AutocompleteResult) GetKeywords() []string {
	if o == nil || IsNil(o.Keywords) {
		var ret []string
		return ret
	}
	return o.Keywords
}

// GetKeywordsOk returns a tuple with the Keywords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetKeywordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Keywords) {
		return nil, false
	}
	return o.Keywords, true
}

// HasKeywords returns a boolean if a field has been set.
func (o *AutocompleteResult) HasKeywords() bool {
	if o != nil && !IsNil(o.Keywords) {
		return true
	}

	return false
}

// SetKeywords gets a reference to the given []string and assigns it to the Keywords field.
func (o *AutocompleteResult) SetKeywords(v []string) {
	o.Keywords = v
}

// GetResultType returns the ResultType field value if set, zero value otherwise.
func (o *AutocompleteResult) GetResultType() string {
	if o == nil || IsNil(o.ResultType) {
		var ret string
		return ret
	}
	return *o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetResultTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ResultType) {
		return nil, false
	}
	return o.ResultType, true
}

// HasResultType returns a boolean if a field has been set.
func (o *AutocompleteResult) HasResultType() bool {
	if o != nil && !IsNil(o.ResultType) {
		return true
	}

	return false
}

// SetResultType gets a reference to the given string and assigns it to the ResultType field.
func (o *AutocompleteResult) SetResultType(v string) {
	o.ResultType = &v
}

// GetScore returns the Score field value if set, zero value otherwise.
func (o *AutocompleteResult) GetScore() float32 {
	if o == nil || IsNil(o.Score) {
		var ret float32
		return ret
	}
	return *o.Score
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetScoreOk() (*float32, bool) {
	if o == nil || IsNil(o.Score) {
		return nil, false
	}
	return o.Score, true
}

// HasScore returns a boolean if a field has been set.
func (o *AutocompleteResult) HasScore() bool {
	if o != nil && !IsNil(o.Score) {
		return true
	}

	return false
}

// SetScore gets a reference to the given float32 and assigns it to the Score field.
func (o *AutocompleteResult) SetScore(v float32) {
	o.Score = &v
}

// GetOperatorMetadata returns the OperatorMetadata field value if set, zero value otherwise.
func (o *AutocompleteResult) GetOperatorMetadata() OperatorMetadata {
	if o == nil || IsNil(o.OperatorMetadata) {
		var ret OperatorMetadata
		return ret
	}
	return *o.OperatorMetadata
}

// GetOperatorMetadataOk returns a tuple with the OperatorMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetOperatorMetadataOk() (*OperatorMetadata, bool) {
	if o == nil || IsNil(o.OperatorMetadata) {
		return nil, false
	}
	return o.OperatorMetadata, true
}

// HasOperatorMetadata returns a boolean if a field has been set.
func (o *AutocompleteResult) HasOperatorMetadata() bool {
	if o != nil && !IsNil(o.OperatorMetadata) {
		return true
	}

	return false
}

// SetOperatorMetadata gets a reference to the given OperatorMetadata and assigns it to the OperatorMetadata field.
func (o *AutocompleteResult) SetOperatorMetadata(v OperatorMetadata) {
	o.OperatorMetadata = &v
}

// GetQuicklink returns the Quicklink field value if set, zero value otherwise.
func (o *AutocompleteResult) GetQuicklink() Quicklink {
	if o == nil || IsNil(o.Quicklink) {
		var ret Quicklink
		return ret
	}
	return *o.Quicklink
}

// GetQuicklinkOk returns a tuple with the Quicklink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetQuicklinkOk() (*Quicklink, bool) {
	if o == nil || IsNil(o.Quicklink) {
		return nil, false
	}
	return o.Quicklink, true
}

// HasQuicklink returns a boolean if a field has been set.
func (o *AutocompleteResult) HasQuicklink() bool {
	if o != nil && !IsNil(o.Quicklink) {
		return true
	}

	return false
}

// SetQuicklink gets a reference to the given Quicklink and assigns it to the Quicklink field.
func (o *AutocompleteResult) SetQuicklink(v Quicklink) {
	o.Quicklink = &v
}

// GetDocument returns the Document field value if set, zero value otherwise.
func (o *AutocompleteResult) GetDocument() Document {
	if o == nil || IsNil(o.Document) {
		var ret Document
		return ret
	}
	return *o.Document
}

// GetDocumentOk returns a tuple with the Document field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.Document) {
		return nil, false
	}
	return o.Document, true
}

// HasDocument returns a boolean if a field has been set.
func (o *AutocompleteResult) HasDocument() bool {
	if o != nil && !IsNil(o.Document) {
		return true
	}

	return false
}

// SetDocument gets a reference to the given Document and assigns it to the Document field.
func (o *AutocompleteResult) SetDocument(v Document) {
	o.Document = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *AutocompleteResult) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *AutocompleteResult) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *AutocompleteResult) SetUrl(v string) {
	o.Url = &v
}

// GetStructuredResult returns the StructuredResult field value if set, zero value otherwise.
func (o *AutocompleteResult) GetStructuredResult() StructuredResult {
	if o == nil || IsNil(o.StructuredResult) {
		var ret StructuredResult
		return ret
	}
	return *o.StructuredResult
}

// GetStructuredResultOk returns a tuple with the StructuredResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetStructuredResultOk() (*StructuredResult, bool) {
	if o == nil || IsNil(o.StructuredResult) {
		return nil, false
	}
	return o.StructuredResult, true
}

// HasStructuredResult returns a boolean if a field has been set.
func (o *AutocompleteResult) HasStructuredResult() bool {
	if o != nil && !IsNil(o.StructuredResult) {
		return true
	}

	return false
}

// SetStructuredResult gets a reference to the given StructuredResult and assigns it to the StructuredResult field.
func (o *AutocompleteResult) SetStructuredResult(v StructuredResult) {
	o.StructuredResult = &v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *AutocompleteResult) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *AutocompleteResult) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *AutocompleteResult) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

// GetRanges returns the Ranges field value if set, zero value otherwise.
func (o *AutocompleteResult) GetRanges() []TextRange {
	if o == nil || IsNil(o.Ranges) {
		var ret []TextRange
		return ret
	}
	return o.Ranges
}

// GetRangesOk returns a tuple with the Ranges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteResult) GetRangesOk() ([]TextRange, bool) {
	if o == nil || IsNil(o.Ranges) {
		return nil, false
	}
	return o.Ranges, true
}

// HasRanges returns a boolean if a field has been set.
func (o *AutocompleteResult) HasRanges() bool {
	if o != nil && !IsNil(o.Ranges) {
		return true
	}

	return false
}

// SetRanges gets a reference to the given []TextRange and assigns it to the Ranges field.
func (o *AutocompleteResult) SetRanges(v []TextRange) {
	o.Ranges = v
}

func (o AutocompleteResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutocompleteResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	if !IsNil(o.Keywords) {
		toSerialize["keywords"] = o.Keywords
	}
	if !IsNil(o.ResultType) {
		toSerialize["resultType"] = o.ResultType
	}
	if !IsNil(o.Score) {
		toSerialize["score"] = o.Score
	}
	if !IsNil(o.OperatorMetadata) {
		toSerialize["operatorMetadata"] = o.OperatorMetadata
	}
	if !IsNil(o.Quicklink) {
		toSerialize["quicklink"] = o.Quicklink
	}
	if !IsNil(o.Document) {
		toSerialize["document"] = o.Document
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.StructuredResult) {
		toSerialize["structuredResult"] = o.StructuredResult
	}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	if !IsNil(o.Ranges) {
		toSerialize["ranges"] = o.Ranges
	}
	return toSerialize, nil
}

type NullableAutocompleteResult struct {
	value *AutocompleteResult
	isSet bool
}

func (v NullableAutocompleteResult) Get() *AutocompleteResult {
	return v.value
}

func (v *NullableAutocompleteResult) Set(val *AutocompleteResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAutocompleteResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAutocompleteResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutocompleteResult(val *AutocompleteResult) *NullableAutocompleteResult {
	return &NullableAutocompleteResult{value: val, isSet: true}
}

func (v NullableAutocompleteResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutocompleteResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


