/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// DatumType the model 'DatumType'
type DatumType string

// List of DatumType
const (
	COMPOUND DatumType = "COMPOUND"
	CONDITIONAL_ANY_MATCHING DatumType = "CONDITIONAL_ANY_MATCHING"
	CONDITIONAL_FIRST_MATCHING DatumType = "CONDITIONAL_FIRST_MATCHING"
	CUSTOM_RENDERING DatumType = "CUSTOM_RENDERING"
	EXTRA_CUSTOM_KEYS DatumType = "EXTRA_CUSTOM_KEYS"
	OBJECT_KEY DatumType = "OBJECT_KEY"
)

// All allowed values of DatumType enum
var AllowedDatumTypeEnumValues = []DatumType{
	"COMPOUND",
	"CONDITIONAL_ANY_MATCHING",
	"CONDITIONAL_FIRST_MATCHING",
	"CUSTOM_RENDERING",
	"EXTRA_CUSTOM_KEYS",
	"OBJECT_KEY",
}

func (v *DatumType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatumType(value)
	for _, existing := range AllowedDatumTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatumType", value)
}

// NewDatumTypeFromValue returns a pointer to a valid DatumType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatumTypeFromValue(v string) (*DatumType, error) {
	ev := DatumType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatumType: valid values are %v", v, AllowedDatumTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatumType) IsValid() bool {
	for _, existing := range AllowedDatumTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatumType value
func (v DatumType) Ptr() *DatumType {
	return &v
}

type NullableDatumType struct {
	value *DatumType
	isSet bool
}

func (v NullableDatumType) Get() *DatumType {
	return v.value
}

func (v *NullableDatumType) Set(val *DatumType) {
	v.value = val
	v.isSet = true
}

func (v NullableDatumType) IsSet() bool {
	return v.isSet
}

func (v *NullableDatumType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatumType(val *DatumType) *NullableDatumType {
	return &NullableDatumType{value: val, isSet: true}
}

func (v NullableDatumType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatumType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

