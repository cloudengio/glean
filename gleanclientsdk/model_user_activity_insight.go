/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the UserActivityInsight type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserActivityInsight{}

// UserActivityInsight struct for UserActivityInsight
type UserActivityInsight struct {
	User Person `json:"user"`
	// Activity e.g. search, home page visit or all.
	Activity string `json:"activity"`
	// Unix timestamp of the last activity (in seconds since epoch UTC).
	LastActivityTimestamp *int32 `json:"lastActivityTimestamp,omitempty"`
	ActivityCount *CountInfo `json:"activityCount,omitempty"`
	ActiveDayCount *CountInfo `json:"activeDayCount,omitempty"`
}

// NewUserActivityInsight instantiates a new UserActivityInsight object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserActivityInsight(user Person, activity string) *UserActivityInsight {
	this := UserActivityInsight{}
	this.User = user
	this.Activity = activity
	return &this
}

// NewUserActivityInsightWithDefaults instantiates a new UserActivityInsight object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserActivityInsightWithDefaults() *UserActivityInsight {
	this := UserActivityInsight{}
	return &this
}

// GetUser returns the User field value
func (o *UserActivityInsight) GetUser() Person {
	if o == nil {
		var ret Person
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *UserActivityInsight) GetUserOk() (*Person, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *UserActivityInsight) SetUser(v Person) {
	o.User = v
}

// GetActivity returns the Activity field value
func (o *UserActivityInsight) GetActivity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Activity
}

// GetActivityOk returns a tuple with the Activity field value
// and a boolean to check if the value has been set.
func (o *UserActivityInsight) GetActivityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Activity, true
}

// SetActivity sets field value
func (o *UserActivityInsight) SetActivity(v string) {
	o.Activity = v
}

// GetLastActivityTimestamp returns the LastActivityTimestamp field value if set, zero value otherwise.
func (o *UserActivityInsight) GetLastActivityTimestamp() int32 {
	if o == nil || IsNil(o.LastActivityTimestamp) {
		var ret int32
		return ret
	}
	return *o.LastActivityTimestamp
}

// GetLastActivityTimestampOk returns a tuple with the LastActivityTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActivityInsight) GetLastActivityTimestampOk() (*int32, bool) {
	if o == nil || IsNil(o.LastActivityTimestamp) {
		return nil, false
	}
	return o.LastActivityTimestamp, true
}

// HasLastActivityTimestamp returns a boolean if a field has been set.
func (o *UserActivityInsight) HasLastActivityTimestamp() bool {
	if o != nil && !IsNil(o.LastActivityTimestamp) {
		return true
	}

	return false
}

// SetLastActivityTimestamp gets a reference to the given int32 and assigns it to the LastActivityTimestamp field.
func (o *UserActivityInsight) SetLastActivityTimestamp(v int32) {
	o.LastActivityTimestamp = &v
}

// GetActivityCount returns the ActivityCount field value if set, zero value otherwise.
func (o *UserActivityInsight) GetActivityCount() CountInfo {
	if o == nil || IsNil(o.ActivityCount) {
		var ret CountInfo
		return ret
	}
	return *o.ActivityCount
}

// GetActivityCountOk returns a tuple with the ActivityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActivityInsight) GetActivityCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.ActivityCount) {
		return nil, false
	}
	return o.ActivityCount, true
}

// HasActivityCount returns a boolean if a field has been set.
func (o *UserActivityInsight) HasActivityCount() bool {
	if o != nil && !IsNil(o.ActivityCount) {
		return true
	}

	return false
}

// SetActivityCount gets a reference to the given CountInfo and assigns it to the ActivityCount field.
func (o *UserActivityInsight) SetActivityCount(v CountInfo) {
	o.ActivityCount = &v
}

// GetActiveDayCount returns the ActiveDayCount field value if set, zero value otherwise.
func (o *UserActivityInsight) GetActiveDayCount() CountInfo {
	if o == nil || IsNil(o.ActiveDayCount) {
		var ret CountInfo
		return ret
	}
	return *o.ActiveDayCount
}

// GetActiveDayCountOk returns a tuple with the ActiveDayCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserActivityInsight) GetActiveDayCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.ActiveDayCount) {
		return nil, false
	}
	return o.ActiveDayCount, true
}

// HasActiveDayCount returns a boolean if a field has been set.
func (o *UserActivityInsight) HasActiveDayCount() bool {
	if o != nil && !IsNil(o.ActiveDayCount) {
		return true
	}

	return false
}

// SetActiveDayCount gets a reference to the given CountInfo and assigns it to the ActiveDayCount field.
func (o *UserActivityInsight) SetActiveDayCount(v CountInfo) {
	o.ActiveDayCount = &v
}

func (o UserActivityInsight) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserActivityInsight) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["user"] = o.User
	toSerialize["activity"] = o.Activity
	if !IsNil(o.LastActivityTimestamp) {
		toSerialize["lastActivityTimestamp"] = o.LastActivityTimestamp
	}
	if !IsNil(o.ActivityCount) {
		toSerialize["activityCount"] = o.ActivityCount
	}
	if !IsNil(o.ActiveDayCount) {
		toSerialize["activeDayCount"] = o.ActiveDayCount
	}
	return toSerialize, nil
}

type NullableUserActivityInsight struct {
	value *UserActivityInsight
	isSet bool
}

func (v NullableUserActivityInsight) Get() *UserActivityInsight {
	return v.value
}

func (v *NullableUserActivityInsight) Set(val *UserActivityInsight) {
	v.value = val
	v.isSet = true
}

func (v NullableUserActivityInsight) IsSet() bool {
	return v.isSet
}

func (v *NullableUserActivityInsight) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserActivityInsight(val *UserActivityInsight) *NullableUserActivityInsight {
	return &NullableUserActivityInsight{value: val, isSet: true}
}

func (v NullableUserActivityInsight) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserActivityInsight) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


