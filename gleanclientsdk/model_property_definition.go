/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the PropertyDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PropertyDefinition{}

// PropertyDefinition struct for PropertyDefinition
type PropertyDefinition struct {
	// The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too.
	Name *string `json:"name,omitempty"`
	// The user friendly label for the property.
	DisplayLabel *string `json:"displayLabel,omitempty"`
	// The user friendly label for the property that will be used if a plural context.
	DisplayLabelPlural *string `json:"displayLabelPlural,omitempty"`
	// The type of custom property - this governs the search and faceting behavior
	PropertyType *string `json:"propertyType,omitempty"`
	UiOptions *string `json:"uiOptions,omitempty"`
	// If true then the property will not show up as a facet in the UI.
	HideUiFacet *bool `json:"hideUiFacet,omitempty"`
	// Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in \"Type\" and \"Tag\" operators.
	UiFacetOrder *int32 `json:"uiFacetOrder,omitempty"`
	ObjectPropertyOptions []ObjectPropertyOptions `json:"objectPropertyOptions,omitempty"`
	// The unique identifier of the `PropertyGroup` to which this property belongs.
	Group *string `json:"group,omitempty"`
}

// NewPropertyDefinition instantiates a new PropertyDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyDefinition() *PropertyDefinition {
	this := PropertyDefinition{}
	return &this
}

// NewPropertyDefinitionWithDefaults instantiates a new PropertyDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyDefinitionWithDefaults() *PropertyDefinition {
	this := PropertyDefinition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PropertyDefinition) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PropertyDefinition) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PropertyDefinition) SetName(v string) {
	o.Name = &v
}

// GetDisplayLabel returns the DisplayLabel field value if set, zero value otherwise.
func (o *PropertyDefinition) GetDisplayLabel() string {
	if o == nil || IsNil(o.DisplayLabel) {
		var ret string
		return ret
	}
	return *o.DisplayLabel
}

// GetDisplayLabelOk returns a tuple with the DisplayLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetDisplayLabelOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayLabel) {
		return nil, false
	}
	return o.DisplayLabel, true
}

// HasDisplayLabel returns a boolean if a field has been set.
func (o *PropertyDefinition) HasDisplayLabel() bool {
	if o != nil && !IsNil(o.DisplayLabel) {
		return true
	}

	return false
}

// SetDisplayLabel gets a reference to the given string and assigns it to the DisplayLabel field.
func (o *PropertyDefinition) SetDisplayLabel(v string) {
	o.DisplayLabel = &v
}

// GetDisplayLabelPlural returns the DisplayLabelPlural field value if set, zero value otherwise.
func (o *PropertyDefinition) GetDisplayLabelPlural() string {
	if o == nil || IsNil(o.DisplayLabelPlural) {
		var ret string
		return ret
	}
	return *o.DisplayLabelPlural
}

// GetDisplayLabelPluralOk returns a tuple with the DisplayLabelPlural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetDisplayLabelPluralOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayLabelPlural) {
		return nil, false
	}
	return o.DisplayLabelPlural, true
}

// HasDisplayLabelPlural returns a boolean if a field has been set.
func (o *PropertyDefinition) HasDisplayLabelPlural() bool {
	if o != nil && !IsNil(o.DisplayLabelPlural) {
		return true
	}

	return false
}

// SetDisplayLabelPlural gets a reference to the given string and assigns it to the DisplayLabelPlural field.
func (o *PropertyDefinition) SetDisplayLabelPlural(v string) {
	o.DisplayLabelPlural = &v
}

// GetPropertyType returns the PropertyType field value if set, zero value otherwise.
func (o *PropertyDefinition) GetPropertyType() string {
	if o == nil || IsNil(o.PropertyType) {
		var ret string
		return ret
	}
	return *o.PropertyType
}

// GetPropertyTypeOk returns a tuple with the PropertyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetPropertyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PropertyType) {
		return nil, false
	}
	return o.PropertyType, true
}

// HasPropertyType returns a boolean if a field has been set.
func (o *PropertyDefinition) HasPropertyType() bool {
	if o != nil && !IsNil(o.PropertyType) {
		return true
	}

	return false
}

// SetPropertyType gets a reference to the given string and assigns it to the PropertyType field.
func (o *PropertyDefinition) SetPropertyType(v string) {
	o.PropertyType = &v
}

// GetUiOptions returns the UiOptions field value if set, zero value otherwise.
func (o *PropertyDefinition) GetUiOptions() string {
	if o == nil || IsNil(o.UiOptions) {
		var ret string
		return ret
	}
	return *o.UiOptions
}

// GetUiOptionsOk returns a tuple with the UiOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetUiOptionsOk() (*string, bool) {
	if o == nil || IsNil(o.UiOptions) {
		return nil, false
	}
	return o.UiOptions, true
}

// HasUiOptions returns a boolean if a field has been set.
func (o *PropertyDefinition) HasUiOptions() bool {
	if o != nil && !IsNil(o.UiOptions) {
		return true
	}

	return false
}

// SetUiOptions gets a reference to the given string and assigns it to the UiOptions field.
func (o *PropertyDefinition) SetUiOptions(v string) {
	o.UiOptions = &v
}

// GetHideUiFacet returns the HideUiFacet field value if set, zero value otherwise.
func (o *PropertyDefinition) GetHideUiFacet() bool {
	if o == nil || IsNil(o.HideUiFacet) {
		var ret bool
		return ret
	}
	return *o.HideUiFacet
}

// GetHideUiFacetOk returns a tuple with the HideUiFacet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetHideUiFacetOk() (*bool, bool) {
	if o == nil || IsNil(o.HideUiFacet) {
		return nil, false
	}
	return o.HideUiFacet, true
}

// HasHideUiFacet returns a boolean if a field has been set.
func (o *PropertyDefinition) HasHideUiFacet() bool {
	if o != nil && !IsNil(o.HideUiFacet) {
		return true
	}

	return false
}

// SetHideUiFacet gets a reference to the given bool and assigns it to the HideUiFacet field.
func (o *PropertyDefinition) SetHideUiFacet(v bool) {
	o.HideUiFacet = &v
}

// GetUiFacetOrder returns the UiFacetOrder field value if set, zero value otherwise.
func (o *PropertyDefinition) GetUiFacetOrder() int32 {
	if o == nil || IsNil(o.UiFacetOrder) {
		var ret int32
		return ret
	}
	return *o.UiFacetOrder
}

// GetUiFacetOrderOk returns a tuple with the UiFacetOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetUiFacetOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.UiFacetOrder) {
		return nil, false
	}
	return o.UiFacetOrder, true
}

// HasUiFacetOrder returns a boolean if a field has been set.
func (o *PropertyDefinition) HasUiFacetOrder() bool {
	if o != nil && !IsNil(o.UiFacetOrder) {
		return true
	}

	return false
}

// SetUiFacetOrder gets a reference to the given int32 and assigns it to the UiFacetOrder field.
func (o *PropertyDefinition) SetUiFacetOrder(v int32) {
	o.UiFacetOrder = &v
}

// GetObjectPropertyOptions returns the ObjectPropertyOptions field value if set, zero value otherwise.
func (o *PropertyDefinition) GetObjectPropertyOptions() []ObjectPropertyOptions {
	if o == nil || IsNil(o.ObjectPropertyOptions) {
		var ret []ObjectPropertyOptions
		return ret
	}
	return o.ObjectPropertyOptions
}

// GetObjectPropertyOptionsOk returns a tuple with the ObjectPropertyOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetObjectPropertyOptionsOk() ([]ObjectPropertyOptions, bool) {
	if o == nil || IsNil(o.ObjectPropertyOptions) {
		return nil, false
	}
	return o.ObjectPropertyOptions, true
}

// HasObjectPropertyOptions returns a boolean if a field has been set.
func (o *PropertyDefinition) HasObjectPropertyOptions() bool {
	if o != nil && !IsNil(o.ObjectPropertyOptions) {
		return true
	}

	return false
}

// SetObjectPropertyOptions gets a reference to the given []ObjectPropertyOptions and assigns it to the ObjectPropertyOptions field.
func (o *PropertyDefinition) SetObjectPropertyOptions(v []ObjectPropertyOptions) {
	o.ObjectPropertyOptions = v
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *PropertyDefinition) GetGroup() string {
	if o == nil || IsNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyDefinition) GetGroupOk() (*string, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *PropertyDefinition) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *PropertyDefinition) SetGroup(v string) {
	o.Group = &v
}

func (o PropertyDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PropertyDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DisplayLabel) {
		toSerialize["displayLabel"] = o.DisplayLabel
	}
	if !IsNil(o.DisplayLabelPlural) {
		toSerialize["displayLabelPlural"] = o.DisplayLabelPlural
	}
	if !IsNil(o.PropertyType) {
		toSerialize["propertyType"] = o.PropertyType
	}
	if !IsNil(o.UiOptions) {
		toSerialize["uiOptions"] = o.UiOptions
	}
	if !IsNil(o.HideUiFacet) {
		toSerialize["hideUiFacet"] = o.HideUiFacet
	}
	if !IsNil(o.UiFacetOrder) {
		toSerialize["uiFacetOrder"] = o.UiFacetOrder
	}
	if !IsNil(o.ObjectPropertyOptions) {
		toSerialize["objectPropertyOptions"] = o.ObjectPropertyOptions
	}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	return toSerialize, nil
}

type NullablePropertyDefinition struct {
	value *PropertyDefinition
	isSet bool
}

func (v NullablePropertyDefinition) Get() *PropertyDefinition {
	return v.value
}

func (v *NullablePropertyDefinition) Set(val *PropertyDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyDefinition(val *PropertyDefinition) *NullablePropertyDefinition {
	return &NullablePropertyDefinition{value: val, isSet: true}
}

func (v NullablePropertyDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


