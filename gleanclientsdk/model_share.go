/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Share type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Share{}

// Share Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip
type Share struct {
	// The number of days that has passed since the share happened
	NumDaysAgo int32 `json:"numDaysAgo"`
	Sharer *Person `json:"sharer,omitempty"`
	SharingDocument *Document `json:"sharingDocument,omitempty"`
}

// NewShare instantiates a new Share object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShare(numDaysAgo int32) *Share {
	this := Share{}
	this.NumDaysAgo = numDaysAgo
	return &this
}

// NewShareWithDefaults instantiates a new Share object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareWithDefaults() *Share {
	this := Share{}
	return &this
}

// GetNumDaysAgo returns the NumDaysAgo field value
func (o *Share) GetNumDaysAgo() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumDaysAgo
}

// GetNumDaysAgoOk returns a tuple with the NumDaysAgo field value
// and a boolean to check if the value has been set.
func (o *Share) GetNumDaysAgoOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumDaysAgo, true
}

// SetNumDaysAgo sets field value
func (o *Share) SetNumDaysAgo(v int32) {
	o.NumDaysAgo = v
}

// GetSharer returns the Sharer field value if set, zero value otherwise.
func (o *Share) GetSharer() Person {
	if o == nil || IsNil(o.Sharer) {
		var ret Person
		return ret
	}
	return *o.Sharer
}

// GetSharerOk returns a tuple with the Sharer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Share) GetSharerOk() (*Person, bool) {
	if o == nil || IsNil(o.Sharer) {
		return nil, false
	}
	return o.Sharer, true
}

// HasSharer returns a boolean if a field has been set.
func (o *Share) HasSharer() bool {
	if o != nil && !IsNil(o.Sharer) {
		return true
	}

	return false
}

// SetSharer gets a reference to the given Person and assigns it to the Sharer field.
func (o *Share) SetSharer(v Person) {
	o.Sharer = &v
}

// GetSharingDocument returns the SharingDocument field value if set, zero value otherwise.
func (o *Share) GetSharingDocument() Document {
	if o == nil || IsNil(o.SharingDocument) {
		var ret Document
		return ret
	}
	return *o.SharingDocument
}

// GetSharingDocumentOk returns a tuple with the SharingDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Share) GetSharingDocumentOk() (*Document, bool) {
	if o == nil || IsNil(o.SharingDocument) {
		return nil, false
	}
	return o.SharingDocument, true
}

// HasSharingDocument returns a boolean if a field has been set.
func (o *Share) HasSharingDocument() bool {
	if o != nil && !IsNil(o.SharingDocument) {
		return true
	}

	return false
}

// SetSharingDocument gets a reference to the given Document and assigns it to the SharingDocument field.
func (o *Share) SetSharingDocument(v Document) {
	o.SharingDocument = &v
}

func (o Share) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Share) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["numDaysAgo"] = o.NumDaysAgo
	if !IsNil(o.Sharer) {
		toSerialize["sharer"] = o.Sharer
	}
	if !IsNil(o.SharingDocument) {
		toSerialize["sharingDocument"] = o.SharingDocument
	}
	return toSerialize, nil
}

type NullableShare struct {
	value *Share
	isSet bool
}

func (v NullableShare) Get() *Share {
	return v.value
}

func (v *NullableShare) Set(val *Share) {
	v.value = val
	v.isSet = true
}

func (v NullableShare) IsSet() bool {
	return v.isSet
}

func (v *NullableShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShare(val *Share) *NullableShare {
	return &NullableShare{value: val, isSet: true}
}

func (v NullableShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


