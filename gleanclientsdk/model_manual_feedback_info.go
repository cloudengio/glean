/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ManualFeedbackInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManualFeedbackInfo{}

// ManualFeedbackInfo struct for ManualFeedbackInfo
type ManualFeedbackInfo struct {
	// The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event.
	Email *string `json:"email,omitempty"`
	// The source associated with the Feedback.event.MANUAL_FEEDBACK event.
	Source *string `json:"source,omitempty"`
	// The issue the user indicated in the feedback.
	Issue *string `json:"issue,omitempty"`
	// The query associated with the Feedback.event.MANUAL_FEEDBACK event.
	Query *string `json:"query,omitempty"`
	// The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only.
	ObscuredQuery *string `json:"obscuredQuery,omitempty"`
	// Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only.
	ActiveTab *string `json:"activeTab,omitempty"`
	// The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events.
	Comments *string `json:"comments,omitempty"`
	// The array of search result docIds, ordered by top to bottom result.
	SearchResults []string `json:"searchResults,omitempty"`
	// How many times this query has been run in the past.
	NumQueriesFromFirstRun *int32 `json:"numQueriesFromFirstRun,omitempty"`
}

// NewManualFeedbackInfo instantiates a new ManualFeedbackInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualFeedbackInfo() *ManualFeedbackInfo {
	this := ManualFeedbackInfo{}
	return &this
}

// NewManualFeedbackInfoWithDefaults instantiates a new ManualFeedbackInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualFeedbackInfoWithDefaults() *ManualFeedbackInfo {
	this := ManualFeedbackInfo{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *ManualFeedbackInfo) SetEmail(v string) {
	o.Email = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ManualFeedbackInfo) SetSource(v string) {
	o.Source = &v
}

// GetIssue returns the Issue field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetIssue() string {
	if o == nil || IsNil(o.Issue) {
		var ret string
		return ret
	}
	return *o.Issue
}

// GetIssueOk returns a tuple with the Issue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetIssueOk() (*string, bool) {
	if o == nil || IsNil(o.Issue) {
		return nil, false
	}
	return o.Issue, true
}

// HasIssue returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasIssue() bool {
	if o != nil && !IsNil(o.Issue) {
		return true
	}

	return false
}

// SetIssue gets a reference to the given string and assigns it to the Issue field.
func (o *ManualFeedbackInfo) SetIssue(v string) {
	o.Issue = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *ManualFeedbackInfo) SetQuery(v string) {
	o.Query = &v
}

// GetObscuredQuery returns the ObscuredQuery field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetObscuredQuery() string {
	if o == nil || IsNil(o.ObscuredQuery) {
		var ret string
		return ret
	}
	return *o.ObscuredQuery
}

// GetObscuredQueryOk returns a tuple with the ObscuredQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetObscuredQueryOk() (*string, bool) {
	if o == nil || IsNil(o.ObscuredQuery) {
		return nil, false
	}
	return o.ObscuredQuery, true
}

// HasObscuredQuery returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasObscuredQuery() bool {
	if o != nil && !IsNil(o.ObscuredQuery) {
		return true
	}

	return false
}

// SetObscuredQuery gets a reference to the given string and assigns it to the ObscuredQuery field.
func (o *ManualFeedbackInfo) SetObscuredQuery(v string) {
	o.ObscuredQuery = &v
}

// GetActiveTab returns the ActiveTab field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetActiveTab() string {
	if o == nil || IsNil(o.ActiveTab) {
		var ret string
		return ret
	}
	return *o.ActiveTab
}

// GetActiveTabOk returns a tuple with the ActiveTab field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetActiveTabOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveTab) {
		return nil, false
	}
	return o.ActiveTab, true
}

// HasActiveTab returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasActiveTab() bool {
	if o != nil && !IsNil(o.ActiveTab) {
		return true
	}

	return false
}

// SetActiveTab gets a reference to the given string and assigns it to the ActiveTab field.
func (o *ManualFeedbackInfo) SetActiveTab(v string) {
	o.ActiveTab = &v
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetComments() string {
	if o == nil || IsNil(o.Comments) {
		var ret string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetCommentsOk() (*string, bool) {
	if o == nil || IsNil(o.Comments) {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasComments() bool {
	if o != nil && !IsNil(o.Comments) {
		return true
	}

	return false
}

// SetComments gets a reference to the given string and assigns it to the Comments field.
func (o *ManualFeedbackInfo) SetComments(v string) {
	o.Comments = &v
}

// GetSearchResults returns the SearchResults field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetSearchResults() []string {
	if o == nil || IsNil(o.SearchResults) {
		var ret []string
		return ret
	}
	return o.SearchResults
}

// GetSearchResultsOk returns a tuple with the SearchResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetSearchResultsOk() ([]string, bool) {
	if o == nil || IsNil(o.SearchResults) {
		return nil, false
	}
	return o.SearchResults, true
}

// HasSearchResults returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasSearchResults() bool {
	if o != nil && !IsNil(o.SearchResults) {
		return true
	}

	return false
}

// SetSearchResults gets a reference to the given []string and assigns it to the SearchResults field.
func (o *ManualFeedbackInfo) SetSearchResults(v []string) {
	o.SearchResults = v
}

// GetNumQueriesFromFirstRun returns the NumQueriesFromFirstRun field value if set, zero value otherwise.
func (o *ManualFeedbackInfo) GetNumQueriesFromFirstRun() int32 {
	if o == nil || IsNil(o.NumQueriesFromFirstRun) {
		var ret int32
		return ret
	}
	return *o.NumQueriesFromFirstRun
}

// GetNumQueriesFromFirstRunOk returns a tuple with the NumQueriesFromFirstRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualFeedbackInfo) GetNumQueriesFromFirstRunOk() (*int32, bool) {
	if o == nil || IsNil(o.NumQueriesFromFirstRun) {
		return nil, false
	}
	return o.NumQueriesFromFirstRun, true
}

// HasNumQueriesFromFirstRun returns a boolean if a field has been set.
func (o *ManualFeedbackInfo) HasNumQueriesFromFirstRun() bool {
	if o != nil && !IsNil(o.NumQueriesFromFirstRun) {
		return true
	}

	return false
}

// SetNumQueriesFromFirstRun gets a reference to the given int32 and assigns it to the NumQueriesFromFirstRun field.
func (o *ManualFeedbackInfo) SetNumQueriesFromFirstRun(v int32) {
	o.NumQueriesFromFirstRun = &v
}

func (o ManualFeedbackInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManualFeedbackInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.Issue) {
		toSerialize["issue"] = o.Issue
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.ObscuredQuery) {
		toSerialize["obscuredQuery"] = o.ObscuredQuery
	}
	if !IsNil(o.ActiveTab) {
		toSerialize["activeTab"] = o.ActiveTab
	}
	if !IsNil(o.Comments) {
		toSerialize["comments"] = o.Comments
	}
	if !IsNil(o.SearchResults) {
		toSerialize["searchResults"] = o.SearchResults
	}
	if !IsNil(o.NumQueriesFromFirstRun) {
		toSerialize["numQueriesFromFirstRun"] = o.NumQueriesFromFirstRun
	}
	return toSerialize, nil
}

type NullableManualFeedbackInfo struct {
	value *ManualFeedbackInfo
	isSet bool
}

func (v NullableManualFeedbackInfo) Get() *ManualFeedbackInfo {
	return v.value
}

func (v *NullableManualFeedbackInfo) Set(val *ManualFeedbackInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableManualFeedbackInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableManualFeedbackInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualFeedbackInfo(val *ManualFeedbackInfo) *NullableManualFeedbackInfo {
	return &NullableManualFeedbackInfo{value: val, isSet: true}
}

func (v NullableManualFeedbackInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualFeedbackInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


