/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CustomFieldValuePerson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CustomFieldValuePerson{}

// CustomFieldValuePerson struct for CustomFieldValuePerson
type CustomFieldValuePerson struct {
	Person *Person `json:"person,omitempty"`
}

// NewCustomFieldValuePerson instantiates a new CustomFieldValuePerson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomFieldValuePerson() *CustomFieldValuePerson {
	this := CustomFieldValuePerson{}
	return &this
}

// NewCustomFieldValuePersonWithDefaults instantiates a new CustomFieldValuePerson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomFieldValuePersonWithDefaults() *CustomFieldValuePerson {
	this := CustomFieldValuePerson{}
	return &this
}

// GetPerson returns the Person field value if set, zero value otherwise.
func (o *CustomFieldValuePerson) GetPerson() Person {
	if o == nil || IsNil(o.Person) {
		var ret Person
		return ret
	}
	return *o.Person
}

// GetPersonOk returns a tuple with the Person field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomFieldValuePerson) GetPersonOk() (*Person, bool) {
	if o == nil || IsNil(o.Person) {
		return nil, false
	}
	return o.Person, true
}

// HasPerson returns a boolean if a field has been set.
func (o *CustomFieldValuePerson) HasPerson() bool {
	if o != nil && !IsNil(o.Person) {
		return true
	}

	return false
}

// SetPerson gets a reference to the given Person and assigns it to the Person field.
func (o *CustomFieldValuePerson) SetPerson(v Person) {
	o.Person = &v
}

func (o CustomFieldValuePerson) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CustomFieldValuePerson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Person) {
		toSerialize["person"] = o.Person
	}
	return toSerialize, nil
}

type NullableCustomFieldValuePerson struct {
	value *CustomFieldValuePerson
	isSet bool
}

func (v NullableCustomFieldValuePerson) Get() *CustomFieldValuePerson {
	return v.value
}

func (v *NullableCustomFieldValuePerson) Set(val *CustomFieldValuePerson) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomFieldValuePerson) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomFieldValuePerson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomFieldValuePerson(val *CustomFieldValuePerson) *NullableCustomFieldValuePerson {
	return &NullableCustomFieldValuePerson{value: val, isSet: true}
}

func (v NullableCustomFieldValuePerson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomFieldValuePerson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


