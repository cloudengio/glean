/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DeleteCollectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteCollectionRequest{}

// DeleteCollectionRequest struct for DeleteCollectionRequest
type DeleteCollectionRequest struct {
	// The IDs of the collections to delete.
	Ids []int32 `json:"ids"`
	// The datasource allowed in the collection to be deleted.
	AllowedDatasource *string `json:"allowedDatasource,omitempty"`
}

// NewDeleteCollectionRequest instantiates a new DeleteCollectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteCollectionRequest(ids []int32) *DeleteCollectionRequest {
	this := DeleteCollectionRequest{}
	this.Ids = ids
	return &this
}

// NewDeleteCollectionRequestWithDefaults instantiates a new DeleteCollectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteCollectionRequestWithDefaults() *DeleteCollectionRequest {
	this := DeleteCollectionRequest{}
	return &this
}

// GetIds returns the Ids field value
func (o *DeleteCollectionRequest) GetIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *DeleteCollectionRequest) GetIdsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *DeleteCollectionRequest) SetIds(v []int32) {
	o.Ids = v
}

// GetAllowedDatasource returns the AllowedDatasource field value if set, zero value otherwise.
func (o *DeleteCollectionRequest) GetAllowedDatasource() string {
	if o == nil || IsNil(o.AllowedDatasource) {
		var ret string
		return ret
	}
	return *o.AllowedDatasource
}

// GetAllowedDatasourceOk returns a tuple with the AllowedDatasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteCollectionRequest) GetAllowedDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.AllowedDatasource) {
		return nil, false
	}
	return o.AllowedDatasource, true
}

// HasAllowedDatasource returns a boolean if a field has been set.
func (o *DeleteCollectionRequest) HasAllowedDatasource() bool {
	if o != nil && !IsNil(o.AllowedDatasource) {
		return true
	}

	return false
}

// SetAllowedDatasource gets a reference to the given string and assigns it to the AllowedDatasource field.
func (o *DeleteCollectionRequest) SetAllowedDatasource(v string) {
	o.AllowedDatasource = &v
}

func (o DeleteCollectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteCollectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ids"] = o.Ids
	if !IsNil(o.AllowedDatasource) {
		toSerialize["allowedDatasource"] = o.AllowedDatasource
	}
	return toSerialize, nil
}

type NullableDeleteCollectionRequest struct {
	value *DeleteCollectionRequest
	isSet bool
}

func (v NullableDeleteCollectionRequest) Get() *DeleteCollectionRequest {
	return v.value
}

func (v *NullableDeleteCollectionRequest) Set(val *DeleteCollectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteCollectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteCollectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteCollectionRequest(val *DeleteCollectionRequest) *NullableDeleteCollectionRequest {
	return &NullableDeleteCollectionRequest{value: val, isSet: true}
}

func (v NullableDeleteCollectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteCollectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


