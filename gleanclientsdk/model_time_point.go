/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the TimePoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimePoint{}

// TimePoint struct for TimePoint
type TimePoint struct {
	// Epoch seconds. Has precedence over daysFromNow.
	EpochSeconds *int32 `json:"epochSeconds,omitempty"`
	// The number of days from now. Specification relative to current time. Can be negative.
	DaysFromNow *int32 `json:"daysFromNow,omitempty"`
}

// NewTimePoint instantiates a new TimePoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimePoint() *TimePoint {
	this := TimePoint{}
	return &this
}

// NewTimePointWithDefaults instantiates a new TimePoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimePointWithDefaults() *TimePoint {
	this := TimePoint{}
	return &this
}

// GetEpochSeconds returns the EpochSeconds field value if set, zero value otherwise.
func (o *TimePoint) GetEpochSeconds() int32 {
	if o == nil || IsNil(o.EpochSeconds) {
		var ret int32
		return ret
	}
	return *o.EpochSeconds
}

// GetEpochSecondsOk returns a tuple with the EpochSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimePoint) GetEpochSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.EpochSeconds) {
		return nil, false
	}
	return o.EpochSeconds, true
}

// HasEpochSeconds returns a boolean if a field has been set.
func (o *TimePoint) HasEpochSeconds() bool {
	if o != nil && !IsNil(o.EpochSeconds) {
		return true
	}

	return false
}

// SetEpochSeconds gets a reference to the given int32 and assigns it to the EpochSeconds field.
func (o *TimePoint) SetEpochSeconds(v int32) {
	o.EpochSeconds = &v
}

// GetDaysFromNow returns the DaysFromNow field value if set, zero value otherwise.
func (o *TimePoint) GetDaysFromNow() int32 {
	if o == nil || IsNil(o.DaysFromNow) {
		var ret int32
		return ret
	}
	return *o.DaysFromNow
}

// GetDaysFromNowOk returns a tuple with the DaysFromNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimePoint) GetDaysFromNowOk() (*int32, bool) {
	if o == nil || IsNil(o.DaysFromNow) {
		return nil, false
	}
	return o.DaysFromNow, true
}

// HasDaysFromNow returns a boolean if a field has been set.
func (o *TimePoint) HasDaysFromNow() bool {
	if o != nil && !IsNil(o.DaysFromNow) {
		return true
	}

	return false
}

// SetDaysFromNow gets a reference to the given int32 and assigns it to the DaysFromNow field.
func (o *TimePoint) SetDaysFromNow(v int32) {
	o.DaysFromNow = &v
}

func (o TimePoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimePoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EpochSeconds) {
		toSerialize["epochSeconds"] = o.EpochSeconds
	}
	if !IsNil(o.DaysFromNow) {
		toSerialize["daysFromNow"] = o.DaysFromNow
	}
	return toSerialize, nil
}

type NullableTimePoint struct {
	value *TimePoint
	isSet bool
}

func (v NullableTimePoint) Get() *TimePoint {
	return v.value
}

func (v *NullableTimePoint) Set(val *TimePoint) {
	v.value = val
	v.isSet = true
}

func (v NullableTimePoint) IsSet() bool {
	return v.isSet
}

func (v *NullableTimePoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimePoint(val *TimePoint) *NullableTimePoint {
	return &NullableTimePoint{value: val, isSet: true}
}

func (v NullableTimePoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimePoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


