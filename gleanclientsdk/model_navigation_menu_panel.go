/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the NavigationMenuPanel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NavigationMenuPanel{}

// NavigationMenuPanel Contains group of top level Navigation Menu items.  Each panel is a separated set of links.
type NavigationMenuPanel struct {
	// Collection of (top-level menu items
	MenuItems []NavigationMenuItem `json:"menuItems"`
	// Indicates this panel itself need not be directly rendered or accessible (workspace/user settings)
	Hidden *bool `json:"hidden,omitempty"`
}

// NewNavigationMenuPanel instantiates a new NavigationMenuPanel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNavigationMenuPanel(menuItems []NavigationMenuItem) *NavigationMenuPanel {
	this := NavigationMenuPanel{}
	this.MenuItems = menuItems
	return &this
}

// NewNavigationMenuPanelWithDefaults instantiates a new NavigationMenuPanel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNavigationMenuPanelWithDefaults() *NavigationMenuPanel {
	this := NavigationMenuPanel{}
	return &this
}

// GetMenuItems returns the MenuItems field value
func (o *NavigationMenuPanel) GetMenuItems() []NavigationMenuItem {
	if o == nil {
		var ret []NavigationMenuItem
		return ret
	}

	return o.MenuItems
}

// GetMenuItemsOk returns a tuple with the MenuItems field value
// and a boolean to check if the value has been set.
func (o *NavigationMenuPanel) GetMenuItemsOk() ([]NavigationMenuItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.MenuItems, true
}

// SetMenuItems sets field value
func (o *NavigationMenuPanel) SetMenuItems(v []NavigationMenuItem) {
	o.MenuItems = v
}

// GetHidden returns the Hidden field value if set, zero value otherwise.
func (o *NavigationMenuPanel) GetHidden() bool {
	if o == nil || IsNil(o.Hidden) {
		var ret bool
		return ret
	}
	return *o.Hidden
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NavigationMenuPanel) GetHiddenOk() (*bool, bool) {
	if o == nil || IsNil(o.Hidden) {
		return nil, false
	}
	return o.Hidden, true
}

// HasHidden returns a boolean if a field has been set.
func (o *NavigationMenuPanel) HasHidden() bool {
	if o != nil && !IsNil(o.Hidden) {
		return true
	}

	return false
}

// SetHidden gets a reference to the given bool and assigns it to the Hidden field.
func (o *NavigationMenuPanel) SetHidden(v bool) {
	o.Hidden = &v
}

func (o NavigationMenuPanel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NavigationMenuPanel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["menuItems"] = o.MenuItems
	if !IsNil(o.Hidden) {
		toSerialize["hidden"] = o.Hidden
	}
	return toSerialize, nil
}

type NullableNavigationMenuPanel struct {
	value *NavigationMenuPanel
	isSet bool
}

func (v NullableNavigationMenuPanel) Get() *NavigationMenuPanel {
	return v.value
}

func (v *NullableNavigationMenuPanel) Set(val *NavigationMenuPanel) {
	v.value = val
	v.isSet = true
}

func (v NullableNavigationMenuPanel) IsSet() bool {
	return v.isSet
}

func (v *NullableNavigationMenuPanel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNavigationMenuPanel(val *NavigationMenuPanel) *NullableNavigationMenuPanel {
	return &NullableNavigationMenuPanel{value: val, isSet: true}
}

func (v NullableNavigationMenuPanel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNavigationMenuPanel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


