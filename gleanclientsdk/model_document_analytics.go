/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the DocumentAnalytics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentAnalytics{}

// DocumentAnalytics struct for DocumentAnalytics
type DocumentAnalytics struct {
	DocumentSpec *DocumentSpec `json:"documentSpec,omitempty"`
	VisitorCount *CountInfo `json:"visitorCount,omitempty"`
	ClickerCount *CountInfo `json:"clickerCount,omitempty"`
	VisitCount *CountInfo `json:"visitCount,omitempty"`
	FacetAnalytics []DocumentFacetAnalytics `json:"facetAnalytics,omitempty"`
}

// NewDocumentAnalytics instantiates a new DocumentAnalytics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentAnalytics() *DocumentAnalytics {
	this := DocumentAnalytics{}
	return &this
}

// NewDocumentAnalyticsWithDefaults instantiates a new DocumentAnalytics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentAnalyticsWithDefaults() *DocumentAnalytics {
	this := DocumentAnalytics{}
	return &this
}

// GetDocumentSpec returns the DocumentSpec field value if set, zero value otherwise.
func (o *DocumentAnalytics) GetDocumentSpec() DocumentSpec {
	if o == nil || IsNil(o.DocumentSpec) {
		var ret DocumentSpec
		return ret
	}
	return *o.DocumentSpec
}

// GetDocumentSpecOk returns a tuple with the DocumentSpec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentAnalytics) GetDocumentSpecOk() (*DocumentSpec, bool) {
	if o == nil || IsNil(o.DocumentSpec) {
		return nil, false
	}
	return o.DocumentSpec, true
}

// HasDocumentSpec returns a boolean if a field has been set.
func (o *DocumentAnalytics) HasDocumentSpec() bool {
	if o != nil && !IsNil(o.DocumentSpec) {
		return true
	}

	return false
}

// SetDocumentSpec gets a reference to the given DocumentSpec and assigns it to the DocumentSpec field.
func (o *DocumentAnalytics) SetDocumentSpec(v DocumentSpec) {
	o.DocumentSpec = &v
}

// GetVisitorCount returns the VisitorCount field value if set, zero value otherwise.
func (o *DocumentAnalytics) GetVisitorCount() CountInfo {
	if o == nil || IsNil(o.VisitorCount) {
		var ret CountInfo
		return ret
	}
	return *o.VisitorCount
}

// GetVisitorCountOk returns a tuple with the VisitorCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentAnalytics) GetVisitorCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.VisitorCount) {
		return nil, false
	}
	return o.VisitorCount, true
}

// HasVisitorCount returns a boolean if a field has been set.
func (o *DocumentAnalytics) HasVisitorCount() bool {
	if o != nil && !IsNil(o.VisitorCount) {
		return true
	}

	return false
}

// SetVisitorCount gets a reference to the given CountInfo and assigns it to the VisitorCount field.
func (o *DocumentAnalytics) SetVisitorCount(v CountInfo) {
	o.VisitorCount = &v
}

// GetClickerCount returns the ClickerCount field value if set, zero value otherwise.
func (o *DocumentAnalytics) GetClickerCount() CountInfo {
	if o == nil || IsNil(o.ClickerCount) {
		var ret CountInfo
		return ret
	}
	return *o.ClickerCount
}

// GetClickerCountOk returns a tuple with the ClickerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentAnalytics) GetClickerCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.ClickerCount) {
		return nil, false
	}
	return o.ClickerCount, true
}

// HasClickerCount returns a boolean if a field has been set.
func (o *DocumentAnalytics) HasClickerCount() bool {
	if o != nil && !IsNil(o.ClickerCount) {
		return true
	}

	return false
}

// SetClickerCount gets a reference to the given CountInfo and assigns it to the ClickerCount field.
func (o *DocumentAnalytics) SetClickerCount(v CountInfo) {
	o.ClickerCount = &v
}

// GetVisitCount returns the VisitCount field value if set, zero value otherwise.
func (o *DocumentAnalytics) GetVisitCount() CountInfo {
	if o == nil || IsNil(o.VisitCount) {
		var ret CountInfo
		return ret
	}
	return *o.VisitCount
}

// GetVisitCountOk returns a tuple with the VisitCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentAnalytics) GetVisitCountOk() (*CountInfo, bool) {
	if o == nil || IsNil(o.VisitCount) {
		return nil, false
	}
	return o.VisitCount, true
}

// HasVisitCount returns a boolean if a field has been set.
func (o *DocumentAnalytics) HasVisitCount() bool {
	if o != nil && !IsNil(o.VisitCount) {
		return true
	}

	return false
}

// SetVisitCount gets a reference to the given CountInfo and assigns it to the VisitCount field.
func (o *DocumentAnalytics) SetVisitCount(v CountInfo) {
	o.VisitCount = &v
}

// GetFacetAnalytics returns the FacetAnalytics field value if set, zero value otherwise.
func (o *DocumentAnalytics) GetFacetAnalytics() []DocumentFacetAnalytics {
	if o == nil || IsNil(o.FacetAnalytics) {
		var ret []DocumentFacetAnalytics
		return ret
	}
	return o.FacetAnalytics
}

// GetFacetAnalyticsOk returns a tuple with the FacetAnalytics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentAnalytics) GetFacetAnalyticsOk() ([]DocumentFacetAnalytics, bool) {
	if o == nil || IsNil(o.FacetAnalytics) {
		return nil, false
	}
	return o.FacetAnalytics, true
}

// HasFacetAnalytics returns a boolean if a field has been set.
func (o *DocumentAnalytics) HasFacetAnalytics() bool {
	if o != nil && !IsNil(o.FacetAnalytics) {
		return true
	}

	return false
}

// SetFacetAnalytics gets a reference to the given []DocumentFacetAnalytics and assigns it to the FacetAnalytics field.
func (o *DocumentAnalytics) SetFacetAnalytics(v []DocumentFacetAnalytics) {
	o.FacetAnalytics = v
}

func (o DocumentAnalytics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentAnalytics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentSpec) {
		toSerialize["documentSpec"] = o.DocumentSpec
	}
	if !IsNil(o.VisitorCount) {
		toSerialize["visitorCount"] = o.VisitorCount
	}
	if !IsNil(o.ClickerCount) {
		toSerialize["clickerCount"] = o.ClickerCount
	}
	if !IsNil(o.VisitCount) {
		toSerialize["visitCount"] = o.VisitCount
	}
	if !IsNil(o.FacetAnalytics) {
		toSerialize["facetAnalytics"] = o.FacetAnalytics
	}
	return toSerialize, nil
}

type NullableDocumentAnalytics struct {
	value *DocumentAnalytics
	isSet bool
}

func (v NullableDocumentAnalytics) Get() *DocumentAnalytics {
	return v.value
}

func (v *NullableDocumentAnalytics) Set(val *DocumentAnalytics) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentAnalytics) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentAnalytics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentAnalytics(val *DocumentAnalytics) *NullableDocumentAnalytics {
	return &NullableDocumentAnalytics{value: val, isSet: true}
}

func (v NullableDocumentAnalytics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentAnalytics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


