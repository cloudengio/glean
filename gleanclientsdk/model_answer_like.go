/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the AnswerLike type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnswerLike{}

// AnswerLike struct for AnswerLike
type AnswerLike struct {
	User *Person `json:"user,omitempty"`
	// The time the user liked the answer in ISO format (ISO 8601).
	CreateTime *time.Time `json:"createTime,omitempty"`
}

// NewAnswerLike instantiates a new AnswerLike object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswerLike() *AnswerLike {
	this := AnswerLike{}
	return &this
}

// NewAnswerLikeWithDefaults instantiates a new AnswerLike object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerLikeWithDefaults() *AnswerLike {
	this := AnswerLike{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *AnswerLike) GetUser() Person {
	if o == nil || IsNil(o.User) {
		var ret Person
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerLike) GetUserOk() (*Person, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *AnswerLike) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given Person and assigns it to the User field.
func (o *AnswerLike) SetUser(v Person) {
	o.User = &v
}

// GetCreateTime returns the CreateTime field value if set, zero value otherwise.
func (o *AnswerLike) GetCreateTime() time.Time {
	if o == nil || IsNil(o.CreateTime) {
		var ret time.Time
		return ret
	}
	return *o.CreateTime
}

// GetCreateTimeOk returns a tuple with the CreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerLike) GetCreateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreateTime) {
		return nil, false
	}
	return o.CreateTime, true
}

// HasCreateTime returns a boolean if a field has been set.
func (o *AnswerLike) HasCreateTime() bool {
	if o != nil && !IsNil(o.CreateTime) {
		return true
	}

	return false
}

// SetCreateTime gets a reference to the given time.Time and assigns it to the CreateTime field.
func (o *AnswerLike) SetCreateTime(v time.Time) {
	o.CreateTime = &v
}

func (o AnswerLike) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnswerLike) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.CreateTime) {
		toSerialize["createTime"] = o.CreateTime
	}
	return toSerialize, nil
}

type NullableAnswerLike struct {
	value *AnswerLike
	isSet bool
}

func (v NullableAnswerLike) Get() *AnswerLike {
	return v.value
}

func (v *NullableAnswerLike) Set(val *AnswerLike) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerLike) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerLike) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerLike(val *AnswerLike) *NullableAnswerLike {
	return &NullableAnswerLike{value: val, isSet: true}
}

func (v NullableAnswerLike) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerLike) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


