/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AnswerResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnswerResult{}

// AnswerResult struct for AnswerResult
type AnswerResult struct {
	Answer Answer `json:"answer"`
	// An opaque token that represents this particular answer. To be used for /feedback reporting.
	TrackingToken *string `json:"trackingToken,omitempty"`
}

// NewAnswerResult instantiates a new AnswerResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswerResult(answer Answer) *AnswerResult {
	this := AnswerResult{}
	this.Answer = answer
	return &this
}

// NewAnswerResultWithDefaults instantiates a new AnswerResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerResultWithDefaults() *AnswerResult {
	this := AnswerResult{}
	return &this
}

// GetAnswer returns the Answer field value
func (o *AnswerResult) GetAnswer() Answer {
	if o == nil {
		var ret Answer
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *AnswerResult) GetAnswerOk() (*Answer, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *AnswerResult) SetAnswer(v Answer) {
	o.Answer = v
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *AnswerResult) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerResult) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *AnswerResult) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *AnswerResult) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

func (o AnswerResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnswerResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["answer"] = o.Answer
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	return toSerialize, nil
}

type NullableAnswerResult struct {
	value *AnswerResult
	isSet bool
}

func (v NullableAnswerResult) Get() *AnswerResult {
	return v.value
}

func (v *NullableAnswerResult) Set(val *AnswerResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerResult(val *AnswerResult) *NullableAnswerResult {
	return &NullableAnswerResult{value: val, isSet: true}
}

func (v NullableAnswerResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


