/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// EntitiesSortOrder Different ways of sorting entities
type EntitiesSortOrder string

// List of EntitiesSortOrder
const (
	ENTITY_NAME EntitiesSortOrder = "ENTITY_NAME"
	FIRST_NAME EntitiesSortOrder = "FIRST_NAME"
	LAST_NAME EntitiesSortOrder = "LAST_NAME"
	ORG_SIZE_COUNT EntitiesSortOrder = "ORG_SIZE_COUNT"
	START_DATE EntitiesSortOrder = "START_DATE"
	TEAM_SIZE EntitiesSortOrder = "TEAM_SIZE"
	RELEVANCE EntitiesSortOrder = "RELEVANCE"
)

// All allowed values of EntitiesSortOrder enum
var AllowedEntitiesSortOrderEnumValues = []EntitiesSortOrder{
	"ENTITY_NAME",
	"FIRST_NAME",
	"LAST_NAME",
	"ORG_SIZE_COUNT",
	"START_DATE",
	"TEAM_SIZE",
	"RELEVANCE",
}

func (v *EntitiesSortOrder) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EntitiesSortOrder(value)
	for _, existing := range AllowedEntitiesSortOrderEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EntitiesSortOrder", value)
}

// NewEntitiesSortOrderFromValue returns a pointer to a valid EntitiesSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEntitiesSortOrderFromValue(v string) (*EntitiesSortOrder, error) {
	ev := EntitiesSortOrder(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EntitiesSortOrder: valid values are %v", v, AllowedEntitiesSortOrderEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EntitiesSortOrder) IsValid() bool {
	for _, existing := range AllowedEntitiesSortOrderEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EntitiesSortOrder value
func (v EntitiesSortOrder) Ptr() *EntitiesSortOrder {
	return &v
}

type NullableEntitiesSortOrder struct {
	value *EntitiesSortOrder
	isSet bool
}

func (v NullableEntitiesSortOrder) Get() *EntitiesSortOrder {
	return v.value
}

func (v *NullableEntitiesSortOrder) Set(val *EntitiesSortOrder) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitiesSortOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitiesSortOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitiesSortOrder(val *EntitiesSortOrder) *NullableEntitiesSortOrder {
	return &NullableEntitiesSortOrder{value: val, isSet: true}
}

func (v NullableEntitiesSortOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitiesSortOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

