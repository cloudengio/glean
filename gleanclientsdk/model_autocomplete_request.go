/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AutocompleteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AutocompleteRequest{}

// AutocompleteRequest struct for AutocompleteRequest
type AutocompleteRequest struct {
	TrackingToken *string `json:"trackingToken,omitempty"`
	SessionInfo *SessionInfo `json:"sessionInfo,omitempty"`
	SourceInfo *SearchRequestSourceInfo `json:"sourceInfo,omitempty"`
	// Partially typed query.
	Query *string `json:"query,omitempty"`
	// Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing.
	DatasourcesFilter []string `json:"datasourcesFilter,omitempty"`
	// Filter to only return results relevant to the given datasource.
	Datasource *string `json:"datasource,omitempty"`
	// Filter to only return results of the given type(s). All types may be returned if omitted.
	ResultTypes []string `json:"resultTypes,omitempty"`
	// Maximum number of results to be returned. If no value is provided, the backend will cap at 200. 
	ResultSize *int32 `json:"resultSize,omitempty"`
	// Auth tokens which may be used for federated results.
	AuthTokens []AuthToken `json:"authTokens,omitempty"`
	// Debug only search params to to change the flow of control in request handling. It will be passed around service boundaries/endpoints. For more details,
	Sc *string `json:"sc,omitempty"`
}

// NewAutocompleteRequest instantiates a new AutocompleteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAutocompleteRequest() *AutocompleteRequest {
	this := AutocompleteRequest{}
	return &this
}

// NewAutocompleteRequestWithDefaults instantiates a new AutocompleteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAutocompleteRequestWithDefaults() *AutocompleteRequest {
	this := AutocompleteRequest{}
	return &this
}

// GetTrackingToken returns the TrackingToken field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetTrackingToken() string {
	if o == nil || IsNil(o.TrackingToken) {
		var ret string
		return ret
	}
	return *o.TrackingToken
}

// GetTrackingTokenOk returns a tuple with the TrackingToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetTrackingTokenOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingToken) {
		return nil, false
	}
	return o.TrackingToken, true
}

// HasTrackingToken returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasTrackingToken() bool {
	if o != nil && !IsNil(o.TrackingToken) {
		return true
	}

	return false
}

// SetTrackingToken gets a reference to the given string and assigns it to the TrackingToken field.
func (o *AutocompleteRequest) SetTrackingToken(v string) {
	o.TrackingToken = &v
}

// GetSessionInfo returns the SessionInfo field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetSessionInfo() SessionInfo {
	if o == nil || IsNil(o.SessionInfo) {
		var ret SessionInfo
		return ret
	}
	return *o.SessionInfo
}

// GetSessionInfoOk returns a tuple with the SessionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetSessionInfoOk() (*SessionInfo, bool) {
	if o == nil || IsNil(o.SessionInfo) {
		return nil, false
	}
	return o.SessionInfo, true
}

// HasSessionInfo returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasSessionInfo() bool {
	if o != nil && !IsNil(o.SessionInfo) {
		return true
	}

	return false
}

// SetSessionInfo gets a reference to the given SessionInfo and assigns it to the SessionInfo field.
func (o *AutocompleteRequest) SetSessionInfo(v SessionInfo) {
	o.SessionInfo = &v
}

// GetSourceInfo returns the SourceInfo field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetSourceInfo() SearchRequestSourceInfo {
	if o == nil || IsNil(o.SourceInfo) {
		var ret SearchRequestSourceInfo
		return ret
	}
	return *o.SourceInfo
}

// GetSourceInfoOk returns a tuple with the SourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetSourceInfoOk() (*SearchRequestSourceInfo, bool) {
	if o == nil || IsNil(o.SourceInfo) {
		return nil, false
	}
	return o.SourceInfo, true
}

// HasSourceInfo returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasSourceInfo() bool {
	if o != nil && !IsNil(o.SourceInfo) {
		return true
	}

	return false
}

// SetSourceInfo gets a reference to the given SearchRequestSourceInfo and assigns it to the SourceInfo field.
func (o *AutocompleteRequest) SetSourceInfo(v SearchRequestSourceInfo) {
	o.SourceInfo = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *AutocompleteRequest) SetQuery(v string) {
	o.Query = &v
}

// GetDatasourcesFilter returns the DatasourcesFilter field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetDatasourcesFilter() []string {
	if o == nil || IsNil(o.DatasourcesFilter) {
		var ret []string
		return ret
	}
	return o.DatasourcesFilter
}

// GetDatasourcesFilterOk returns a tuple with the DatasourcesFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetDatasourcesFilterOk() ([]string, bool) {
	if o == nil || IsNil(o.DatasourcesFilter) {
		return nil, false
	}
	return o.DatasourcesFilter, true
}

// HasDatasourcesFilter returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasDatasourcesFilter() bool {
	if o != nil && !IsNil(o.DatasourcesFilter) {
		return true
	}

	return false
}

// SetDatasourcesFilter gets a reference to the given []string and assigns it to the DatasourcesFilter field.
func (o *AutocompleteRequest) SetDatasourcesFilter(v []string) {
	o.DatasourcesFilter = v
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetDatasource() string {
	if o == nil || IsNil(o.Datasource) {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetDatasourceOk() (*string, bool) {
	if o == nil || IsNil(o.Datasource) {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasDatasource() bool {
	if o != nil && !IsNil(o.Datasource) {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *AutocompleteRequest) SetDatasource(v string) {
	o.Datasource = &v
}

// GetResultTypes returns the ResultTypes field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetResultTypes() []string {
	if o == nil || IsNil(o.ResultTypes) {
		var ret []string
		return ret
	}
	return o.ResultTypes
}

// GetResultTypesOk returns a tuple with the ResultTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetResultTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ResultTypes) {
		return nil, false
	}
	return o.ResultTypes, true
}

// HasResultTypes returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasResultTypes() bool {
	if o != nil && !IsNil(o.ResultTypes) {
		return true
	}

	return false
}

// SetResultTypes gets a reference to the given []string and assigns it to the ResultTypes field.
func (o *AutocompleteRequest) SetResultTypes(v []string) {
	o.ResultTypes = v
}

// GetResultSize returns the ResultSize field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetResultSize() int32 {
	if o == nil || IsNil(o.ResultSize) {
		var ret int32
		return ret
	}
	return *o.ResultSize
}

// GetResultSizeOk returns a tuple with the ResultSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetResultSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.ResultSize) {
		return nil, false
	}
	return o.ResultSize, true
}

// HasResultSize returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasResultSize() bool {
	if o != nil && !IsNil(o.ResultSize) {
		return true
	}

	return false
}

// SetResultSize gets a reference to the given int32 and assigns it to the ResultSize field.
func (o *AutocompleteRequest) SetResultSize(v int32) {
	o.ResultSize = &v
}

// GetAuthTokens returns the AuthTokens field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetAuthTokens() []AuthToken {
	if o == nil || IsNil(o.AuthTokens) {
		var ret []AuthToken
		return ret
	}
	return o.AuthTokens
}

// GetAuthTokensOk returns a tuple with the AuthTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetAuthTokensOk() ([]AuthToken, bool) {
	if o == nil || IsNil(o.AuthTokens) {
		return nil, false
	}
	return o.AuthTokens, true
}

// HasAuthTokens returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasAuthTokens() bool {
	if o != nil && !IsNil(o.AuthTokens) {
		return true
	}

	return false
}

// SetAuthTokens gets a reference to the given []AuthToken and assigns it to the AuthTokens field.
func (o *AutocompleteRequest) SetAuthTokens(v []AuthToken) {
	o.AuthTokens = v
}

// GetSc returns the Sc field value if set, zero value otherwise.
func (o *AutocompleteRequest) GetSc() string {
	if o == nil || IsNil(o.Sc) {
		var ret string
		return ret
	}
	return *o.Sc
}

// GetScOk returns a tuple with the Sc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AutocompleteRequest) GetScOk() (*string, bool) {
	if o == nil || IsNil(o.Sc) {
		return nil, false
	}
	return o.Sc, true
}

// HasSc returns a boolean if a field has been set.
func (o *AutocompleteRequest) HasSc() bool {
	if o != nil && !IsNil(o.Sc) {
		return true
	}

	return false
}

// SetSc gets a reference to the given string and assigns it to the Sc field.
func (o *AutocompleteRequest) SetSc(v string) {
	o.Sc = &v
}

func (o AutocompleteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AutocompleteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackingToken) {
		toSerialize["trackingToken"] = o.TrackingToken
	}
	if !IsNil(o.SessionInfo) {
		toSerialize["sessionInfo"] = o.SessionInfo
	}
	if !IsNil(o.SourceInfo) {
		toSerialize["sourceInfo"] = o.SourceInfo
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.DatasourcesFilter) {
		toSerialize["datasourcesFilter"] = o.DatasourcesFilter
	}
	if !IsNil(o.Datasource) {
		toSerialize["datasource"] = o.Datasource
	}
	if !IsNil(o.ResultTypes) {
		toSerialize["resultTypes"] = o.ResultTypes
	}
	if !IsNil(o.ResultSize) {
		toSerialize["resultSize"] = o.ResultSize
	}
	if !IsNil(o.AuthTokens) {
		toSerialize["authTokens"] = o.AuthTokens
	}
	if !IsNil(o.Sc) {
		toSerialize["sc"] = o.Sc
	}
	return toSerialize, nil
}

type NullableAutocompleteRequest struct {
	value *AutocompleteRequest
	isSet bool
}

func (v NullableAutocompleteRequest) Get() *AutocompleteRequest {
	return v.value
}

func (v *NullableAutocompleteRequest) Set(val *AutocompleteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAutocompleteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAutocompleteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAutocompleteRequest(val *AutocompleteRequest) *NullableAutocompleteRequest {
	return &NullableAutocompleteRequest{value: val, isSet: true}
}

func (v NullableAutocompleteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAutocompleteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


