/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AnswerId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnswerId{}

// AnswerId struct for AnswerId
type AnswerId struct {
	// The opaque id of the answer.
	Id *int32 `json:"id,omitempty"`
}

// NewAnswerId instantiates a new AnswerId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnswerId() *AnswerId {
	this := AnswerId{}
	return &this
}

// NewAnswerIdWithDefaults instantiates a new AnswerId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnswerIdWithDefaults() *AnswerId {
	this := AnswerId{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AnswerId) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnswerId) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AnswerId) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AnswerId) SetId(v int32) {
	o.Id = &v
}

func (o AnswerId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnswerId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

type NullableAnswerId struct {
	value *AnswerId
	isSet bool
}

func (v NullableAnswerId) Get() *AnswerId {
	return v.value
}

func (v *NullableAnswerId) Set(val *AnswerId) {
	v.value = val
	v.isSet = true
}

func (v NullableAnswerId) IsSet() bool {
	return v.isSet
}

func (v *NullableAnswerId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnswerId(val *AnswerId) *NullableAnswerId {
	return &NullableAnswerId{value: val, isSet: true}
}

func (v NullableAnswerId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnswerId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


