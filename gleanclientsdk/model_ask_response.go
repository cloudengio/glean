/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AskResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AskResponse{}

// AskResponse struct for AskResponse
type AskResponse struct {
	// Whether or not the query was a question.
	IsQuestion bool `json:"isQuestion"`
	// The part of the query which was used as a question for search
	Question *string `json:"question,omitempty"`
	SearchResponse *SearchResponse `json:"searchResponse,omitempty"`
}

// NewAskResponse instantiates a new AskResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAskResponse(isQuestion bool) *AskResponse {
	this := AskResponse{}
	this.IsQuestion = isQuestion
	return &this
}

// NewAskResponseWithDefaults instantiates a new AskResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAskResponseWithDefaults() *AskResponse {
	this := AskResponse{}
	return &this
}

// GetIsQuestion returns the IsQuestion field value
func (o *AskResponse) GetIsQuestion() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsQuestion
}

// GetIsQuestionOk returns a tuple with the IsQuestion field value
// and a boolean to check if the value has been set.
func (o *AskResponse) GetIsQuestionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsQuestion, true
}

// SetIsQuestion sets field value
func (o *AskResponse) SetIsQuestion(v bool) {
	o.IsQuestion = v
}

// GetQuestion returns the Question field value if set, zero value otherwise.
func (o *AskResponse) GetQuestion() string {
	if o == nil || IsNil(o.Question) {
		var ret string
		return ret
	}
	return *o.Question
}

// GetQuestionOk returns a tuple with the Question field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskResponse) GetQuestionOk() (*string, bool) {
	if o == nil || IsNil(o.Question) {
		return nil, false
	}
	return o.Question, true
}

// HasQuestion returns a boolean if a field has been set.
func (o *AskResponse) HasQuestion() bool {
	if o != nil && !IsNil(o.Question) {
		return true
	}

	return false
}

// SetQuestion gets a reference to the given string and assigns it to the Question field.
func (o *AskResponse) SetQuestion(v string) {
	o.Question = &v
}

// GetSearchResponse returns the SearchResponse field value if set, zero value otherwise.
func (o *AskResponse) GetSearchResponse() SearchResponse {
	if o == nil || IsNil(o.SearchResponse) {
		var ret SearchResponse
		return ret
	}
	return *o.SearchResponse
}

// GetSearchResponseOk returns a tuple with the SearchResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AskResponse) GetSearchResponseOk() (*SearchResponse, bool) {
	if o == nil || IsNil(o.SearchResponse) {
		return nil, false
	}
	return o.SearchResponse, true
}

// HasSearchResponse returns a boolean if a field has been set.
func (o *AskResponse) HasSearchResponse() bool {
	if o != nil && !IsNil(o.SearchResponse) {
		return true
	}

	return false
}

// SetSearchResponse gets a reference to the given SearchResponse and assigns it to the SearchResponse field.
func (o *AskResponse) SetSearchResponse(v SearchResponse) {
	o.SearchResponse = &v
}

func (o AskResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AskResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isQuestion"] = o.IsQuestion
	if !IsNil(o.Question) {
		toSerialize["question"] = o.Question
	}
	if !IsNil(o.SearchResponse) {
		toSerialize["searchResponse"] = o.SearchResponse
	}
	return toSerialize, nil
}

type NullableAskResponse struct {
	value *AskResponse
	isSet bool
}

func (v NullableAskResponse) Get() *AskResponse {
	return v.value
}

func (v *NullableAskResponse) Set(val *AskResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAskResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAskResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAskResponse(val *AskResponse) *NullableAskResponse {
	return &NullableAskResponse{value: val, isSet: true}
}

func (v NullableAskResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAskResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


