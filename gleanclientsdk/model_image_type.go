/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// ImageType The type of the image
type ImageType string

// List of ImageType
const (
	USER ImageType = "USER"
	BACKGROUND ImageType = "BACKGROUND"
	UGC ImageType = "UGC"
	LOGO ImageType = "LOGO"
	HEADER ImageType = "HEADER"
	ICON ImageType = "ICON"
)

// All allowed values of ImageType enum
var AllowedImageTypeEnumValues = []ImageType{
	"USER",
	"BACKGROUND",
	"UGC",
	"LOGO",
	"HEADER",
	"ICON",
}

func (v *ImageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ImageType(value)
	for _, existing := range AllowedImageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ImageType", value)
}

// NewImageTypeFromValue returns a pointer to a valid ImageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageTypeFromValue(v string) (*ImageType, error) {
	ev := ImageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ImageType: valid values are %v", v, AllowedImageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageType) IsValid() bool {
	for _, existing := range AllowedImageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ImageType value
func (v ImageType) Ptr() *ImageType {
	return &v
}

type NullableImageType struct {
	value *ImageType
	isSet bool
}

func (v NullableImageType) Get() *ImageType {
	return v.value
}

func (v *NullableImageType) Set(val *ImageType) {
	v.value = val
	v.isSet = true
}

func (v NullableImageType) IsSet() bool {
	return v.isSet
}

func (v *NullableImageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImageType(val *ImageType) *NullableImageType {
	return &NullableImageType{value: val, isSet: true}
}

func (v NullableImageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

