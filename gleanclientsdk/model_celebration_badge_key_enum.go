/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// CelebrationBadgeKeyEnum The set of possible keys for Glean people celebration badges
type CelebrationBadgeKeyEnum string

// List of CelebrationBadgeKeyEnum
const (
	NEW_HIRE CelebrationBadgeKeyEnum = "new_hire"
	ANNIVERSARY CelebrationBadgeKeyEnum = "anniversary"
)

// All allowed values of CelebrationBadgeKeyEnum enum
var AllowedCelebrationBadgeKeyEnumEnumValues = []CelebrationBadgeKeyEnum{
	"new_hire",
	"anniversary",
}

func (v *CelebrationBadgeKeyEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CelebrationBadgeKeyEnum(value)
	for _, existing := range AllowedCelebrationBadgeKeyEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CelebrationBadgeKeyEnum", value)
}

// NewCelebrationBadgeKeyEnumFromValue returns a pointer to a valid CelebrationBadgeKeyEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCelebrationBadgeKeyEnumFromValue(v string) (*CelebrationBadgeKeyEnum, error) {
	ev := CelebrationBadgeKeyEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CelebrationBadgeKeyEnum: valid values are %v", v, AllowedCelebrationBadgeKeyEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CelebrationBadgeKeyEnum) IsValid() bool {
	for _, existing := range AllowedCelebrationBadgeKeyEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CelebrationBadgeKeyEnum value
func (v CelebrationBadgeKeyEnum) Ptr() *CelebrationBadgeKeyEnum {
	return &v
}

type NullableCelebrationBadgeKeyEnum struct {
	value *CelebrationBadgeKeyEnum
	isSet bool
}

func (v NullableCelebrationBadgeKeyEnum) Get() *CelebrationBadgeKeyEnum {
	return v.value
}

func (v *NullableCelebrationBadgeKeyEnum) Set(val *CelebrationBadgeKeyEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableCelebrationBadgeKeyEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableCelebrationBadgeKeyEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCelebrationBadgeKeyEnum(val *CelebrationBadgeKeyEnum) *NullableCelebrationBadgeKeyEnum {
	return &NullableCelebrationBadgeKeyEnum{value: val, isSet: true}
}

func (v NullableCelebrationBadgeKeyEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCelebrationBadgeKeyEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

