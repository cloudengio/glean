/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CollectionItemDescriptor type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CollectionItemDescriptor{}

// CollectionItemDescriptor struct for CollectionItemDescriptor
type CollectionItemDescriptor struct {
	// The URL of the item being added.
	Url *string `json:"url,omitempty"`
	// The document ID of the item being added if it's a Glean-indexed document.
	DocumentId *string `json:"documentId,omitempty"`
	// The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection
	NewNextItemId *string `json:"newNextItemId,omitempty"`
	ItemType *string `json:"itemType,omitempty"`
	// The optional name of the collection item.
	Name *string `json:"name,omitempty"`
	// A helpful description of why this CollectionItem is in the Collection that it's in.
	Description *string `json:"description,omitempty"`
	// The emoji icon for this CollectionItem. Only used for Text type items.
	Icon *string `json:"icon,omitempty"`
}

// NewCollectionItemDescriptor instantiates a new CollectionItemDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionItemDescriptor() *CollectionItemDescriptor {
	this := CollectionItemDescriptor{}
	return &this
}

// NewCollectionItemDescriptorWithDefaults instantiates a new CollectionItemDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionItemDescriptorWithDefaults() *CollectionItemDescriptor {
	this := CollectionItemDescriptor{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *CollectionItemDescriptor) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemDescriptor) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *CollectionItemDescriptor) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *CollectionItemDescriptor) SetUrl(v string) {
	o.Url = &v
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *CollectionItemDescriptor) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemDescriptor) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *CollectionItemDescriptor) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *CollectionItemDescriptor) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetNewNextItemId returns the NewNextItemId field value if set, zero value otherwise.
func (o *CollectionItemDescriptor) GetNewNextItemId() string {
	if o == nil || IsNil(o.NewNextItemId) {
		var ret string
		return ret
	}
	return *o.NewNextItemId
}

// GetNewNextItemIdOk returns a tuple with the NewNextItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemDescriptor) GetNewNextItemIdOk() (*string, bool) {
	if o == nil || IsNil(o.NewNextItemId) {
		return nil, false
	}
	return o.NewNextItemId, true
}

// HasNewNextItemId returns a boolean if a field has been set.
func (o *CollectionItemDescriptor) HasNewNextItemId() bool {
	if o != nil && !IsNil(o.NewNextItemId) {
		return true
	}

	return false
}

// SetNewNextItemId gets a reference to the given string and assigns it to the NewNextItemId field.
func (o *CollectionItemDescriptor) SetNewNextItemId(v string) {
	o.NewNextItemId = &v
}

// GetItemType returns the ItemType field value if set, zero value otherwise.
func (o *CollectionItemDescriptor) GetItemType() string {
	if o == nil || IsNil(o.ItemType) {
		var ret string
		return ret
	}
	return *o.ItemType
}

// GetItemTypeOk returns a tuple with the ItemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemDescriptor) GetItemTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ItemType) {
		return nil, false
	}
	return o.ItemType, true
}

// HasItemType returns a boolean if a field has been set.
func (o *CollectionItemDescriptor) HasItemType() bool {
	if o != nil && !IsNil(o.ItemType) {
		return true
	}

	return false
}

// SetItemType gets a reference to the given string and assigns it to the ItemType field.
func (o *CollectionItemDescriptor) SetItemType(v string) {
	o.ItemType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CollectionItemDescriptor) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemDescriptor) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CollectionItemDescriptor) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CollectionItemDescriptor) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CollectionItemDescriptor) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemDescriptor) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CollectionItemDescriptor) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CollectionItemDescriptor) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *CollectionItemDescriptor) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionItemDescriptor) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *CollectionItemDescriptor) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *CollectionItemDescriptor) SetIcon(v string) {
	o.Icon = &v
}

func (o CollectionItemDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CollectionItemDescriptor) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	if !IsNil(o.NewNextItemId) {
		toSerialize["newNextItemId"] = o.NewNextItemId
	}
	if !IsNil(o.ItemType) {
		toSerialize["itemType"] = o.ItemType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	return toSerialize, nil
}

type NullableCollectionItemDescriptor struct {
	value *CollectionItemDescriptor
	isSet bool
}

func (v NullableCollectionItemDescriptor) Get() *CollectionItemDescriptor {
	return v.value
}

func (v *NullableCollectionItemDescriptor) Set(val *CollectionItemDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionItemDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionItemDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionItemDescriptor(val *CollectionItemDescriptor) *NullableCollectionItemDescriptor {
	return &NullableCollectionItemDescriptor{value: val, isSet: true}
}

func (v NullableCollectionItemDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionItemDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


