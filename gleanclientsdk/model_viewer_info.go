/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the ViewerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewerInfo{}

// ViewerInfo struct for ViewerInfo
type ViewerInfo struct {
	// DEPRECATED - use permissions instead. Viewer's role on the specific document.
	// Deprecated
	Role *string `json:"role,omitempty"`
	LastViewedTime *time.Time `json:"lastViewedTime,omitempty"`
}

// NewViewerInfo instantiates a new ViewerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewerInfo() *ViewerInfo {
	this := ViewerInfo{}
	return &this
}

// NewViewerInfoWithDefaults instantiates a new ViewerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewerInfoWithDefaults() *ViewerInfo {
	this := ViewerInfo{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
// Deprecated
func (o *ViewerInfo) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ViewerInfo) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ViewerInfo) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
// Deprecated
func (o *ViewerInfo) SetRole(v string) {
	o.Role = &v
}

// GetLastViewedTime returns the LastViewedTime field value if set, zero value otherwise.
func (o *ViewerInfo) GetLastViewedTime() time.Time {
	if o == nil || IsNil(o.LastViewedTime) {
		var ret time.Time
		return ret
	}
	return *o.LastViewedTime
}

// GetLastViewedTimeOk returns a tuple with the LastViewedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewerInfo) GetLastViewedTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastViewedTime) {
		return nil, false
	}
	return o.LastViewedTime, true
}

// HasLastViewedTime returns a boolean if a field has been set.
func (o *ViewerInfo) HasLastViewedTime() bool {
	if o != nil && !IsNil(o.LastViewedTime) {
		return true
	}

	return false
}

// SetLastViewedTime gets a reference to the given time.Time and assigns it to the LastViewedTime field.
func (o *ViewerInfo) SetLastViewedTime(v time.Time) {
	o.LastViewedTime = &v
}

func (o ViewerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.LastViewedTime) {
		toSerialize["lastViewedTime"] = o.LastViewedTime
	}
	return toSerialize, nil
}

type NullableViewerInfo struct {
	value *ViewerInfo
	isSet bool
}

func (v NullableViewerInfo) Get() *ViewerInfo {
	return v.value
}

func (v *NullableViewerInfo) Set(val *ViewerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableViewerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableViewerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewerInfo(val *ViewerInfo) *NullableViewerInfo {
	return &NullableViewerInfo{value: val, isSet: true}
}

func (v NullableViewerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


