/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"fmt"
)

// DatumLinkSource the model 'DatumLinkSource'
type DatumLinkSource string

// List of DatumLinkSource
const (
	DATUM DatumLinkSource = "DATUM"
	DATUM_RAW DatumLinkSource = "DATUM_RAW"
	PARENT_DOCUMENT DatumLinkSource = "PARENT_DOCUMENT"
	PERSON DatumLinkSource = "PERSON"
)

// All allowed values of DatumLinkSource enum
var AllowedDatumLinkSourceEnumValues = []DatumLinkSource{
	"DATUM",
	"DATUM_RAW",
	"PARENT_DOCUMENT",
	"PERSON",
}

func (v *DatumLinkSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DatumLinkSource(value)
	for _, existing := range AllowedDatumLinkSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DatumLinkSource", value)
}

// NewDatumLinkSourceFromValue returns a pointer to a valid DatumLinkSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDatumLinkSourceFromValue(v string) (*DatumLinkSource, error) {
	ev := DatumLinkSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DatumLinkSource: valid values are %v", v, AllowedDatumLinkSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DatumLinkSource) IsValid() bool {
	for _, existing := range AllowedDatumLinkSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DatumLinkSource value
func (v DatumLinkSource) Ptr() *DatumLinkSource {
	return &v
}

type NullableDatumLinkSource struct {
	value *DatumLinkSource
	isSet bool
}

func (v NullableDatumLinkSource) Get() *DatumLinkSource {
	return v.value
}

func (v *NullableDatumLinkSource) Set(val *DatumLinkSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDatumLinkSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDatumLinkSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatumLinkSource(val *DatumLinkSource) *NullableDatumLinkSource {
	return &NullableDatumLinkSource{value: val, isSet: true}
}

func (v NullableDatumLinkSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatumLinkSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

