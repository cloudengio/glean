/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the CanonicalizingRegexType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CanonicalizingRegexType{}

// CanonicalizingRegexType Regular expression to apply to an arbitrary string to transform it into a canonical string.
type CanonicalizingRegexType struct {
	// Regular expression to match to an arbitrary string.
	MatchRegex *string `json:"matchRegex,omitempty"`
	// Regular expression to transform into a canonical string.
	RewriteRegex *string `json:"rewriteRegex,omitempty"`
}

// NewCanonicalizingRegexType instantiates a new CanonicalizingRegexType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCanonicalizingRegexType() *CanonicalizingRegexType {
	this := CanonicalizingRegexType{}
	return &this
}

// NewCanonicalizingRegexTypeWithDefaults instantiates a new CanonicalizingRegexType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCanonicalizingRegexTypeWithDefaults() *CanonicalizingRegexType {
	this := CanonicalizingRegexType{}
	return &this
}

// GetMatchRegex returns the MatchRegex field value if set, zero value otherwise.
func (o *CanonicalizingRegexType) GetMatchRegex() string {
	if o == nil || IsNil(o.MatchRegex) {
		var ret string
		return ret
	}
	return *o.MatchRegex
}

// GetMatchRegexOk returns a tuple with the MatchRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CanonicalizingRegexType) GetMatchRegexOk() (*string, bool) {
	if o == nil || IsNil(o.MatchRegex) {
		return nil, false
	}
	return o.MatchRegex, true
}

// HasMatchRegex returns a boolean if a field has been set.
func (o *CanonicalizingRegexType) HasMatchRegex() bool {
	if o != nil && !IsNil(o.MatchRegex) {
		return true
	}

	return false
}

// SetMatchRegex gets a reference to the given string and assigns it to the MatchRegex field.
func (o *CanonicalizingRegexType) SetMatchRegex(v string) {
	o.MatchRegex = &v
}

// GetRewriteRegex returns the RewriteRegex field value if set, zero value otherwise.
func (o *CanonicalizingRegexType) GetRewriteRegex() string {
	if o == nil || IsNil(o.RewriteRegex) {
		var ret string
		return ret
	}
	return *o.RewriteRegex
}

// GetRewriteRegexOk returns a tuple with the RewriteRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CanonicalizingRegexType) GetRewriteRegexOk() (*string, bool) {
	if o == nil || IsNil(o.RewriteRegex) {
		return nil, false
	}
	return o.RewriteRegex, true
}

// HasRewriteRegex returns a boolean if a field has been set.
func (o *CanonicalizingRegexType) HasRewriteRegex() bool {
	if o != nil && !IsNil(o.RewriteRegex) {
		return true
	}

	return false
}

// SetRewriteRegex gets a reference to the given string and assigns it to the RewriteRegex field.
func (o *CanonicalizingRegexType) SetRewriteRegex(v string) {
	o.RewriteRegex = &v
}

func (o CanonicalizingRegexType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CanonicalizingRegexType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MatchRegex) {
		toSerialize["matchRegex"] = o.MatchRegex
	}
	if !IsNil(o.RewriteRegex) {
		toSerialize["rewriteRegex"] = o.RewriteRegex
	}
	return toSerialize, nil
}

type NullableCanonicalizingRegexType struct {
	value *CanonicalizingRegexType
	isSet bool
}

func (v NullableCanonicalizingRegexType) Get() *CanonicalizingRegexType {
	return v.value
}

func (v *NullableCanonicalizingRegexType) Set(val *CanonicalizingRegexType) {
	v.value = val
	v.isSet = true
}

func (v NullableCanonicalizingRegexType) IsSet() bool {
	return v.isSet
}

func (v *NullableCanonicalizingRegexType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCanonicalizingRegexType(val *CanonicalizingRegexType) *NullableCanonicalizingRegexType {
	return &NullableCanonicalizingRegexType{value: val, isSet: true}
}

func (v NullableCanonicalizingRegexType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCanonicalizingRegexType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


