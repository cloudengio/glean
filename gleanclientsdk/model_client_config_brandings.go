/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the ClientConfigBrandings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientConfigBrandings{}

// ClientConfigBrandings A set of branding objects made avaiable to the end user for visual aspects of the app such as background images for light and dark mode, light and dark logos, and logo background colors. Anything that is visual but not related to themes should go in here.
type ClientConfigBrandings struct {
	Light *Branding `json:"light,omitempty"`
	Dark *Branding `json:"dark,omitempty"`
}

// NewClientConfigBrandings instantiates a new ClientConfigBrandings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientConfigBrandings() *ClientConfigBrandings {
	this := ClientConfigBrandings{}
	return &this
}

// NewClientConfigBrandingsWithDefaults instantiates a new ClientConfigBrandings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientConfigBrandingsWithDefaults() *ClientConfigBrandings {
	this := ClientConfigBrandings{}
	return &this
}

// GetLight returns the Light field value if set, zero value otherwise.
func (o *ClientConfigBrandings) GetLight() Branding {
	if o == nil || IsNil(o.Light) {
		var ret Branding
		return ret
	}
	return *o.Light
}

// GetLightOk returns a tuple with the Light field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConfigBrandings) GetLightOk() (*Branding, bool) {
	if o == nil || IsNil(o.Light) {
		return nil, false
	}
	return o.Light, true
}

// HasLight returns a boolean if a field has been set.
func (o *ClientConfigBrandings) HasLight() bool {
	if o != nil && !IsNil(o.Light) {
		return true
	}

	return false
}

// SetLight gets a reference to the given Branding and assigns it to the Light field.
func (o *ClientConfigBrandings) SetLight(v Branding) {
	o.Light = &v
}

// GetDark returns the Dark field value if set, zero value otherwise.
func (o *ClientConfigBrandings) GetDark() Branding {
	if o == nil || IsNil(o.Dark) {
		var ret Branding
		return ret
	}
	return *o.Dark
}

// GetDarkOk returns a tuple with the Dark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientConfigBrandings) GetDarkOk() (*Branding, bool) {
	if o == nil || IsNil(o.Dark) {
		return nil, false
	}
	return o.Dark, true
}

// HasDark returns a boolean if a field has been set.
func (o *ClientConfigBrandings) HasDark() bool {
	if o != nil && !IsNil(o.Dark) {
		return true
	}

	return false
}

// SetDark gets a reference to the given Branding and assigns it to the Dark field.
func (o *ClientConfigBrandings) SetDark(v Branding) {
	o.Dark = &v
}

func (o ClientConfigBrandings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientConfigBrandings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Light) {
		toSerialize["light"] = o.Light
	}
	if !IsNil(o.Dark) {
		toSerialize["dark"] = o.Dark
	}
	return toSerialize, nil
}

type NullableClientConfigBrandings struct {
	value *ClientConfigBrandings
	isSet bool
}

func (v NullableClientConfigBrandings) Get() *ClientConfigBrandings {
	return v.value
}

func (v *NullableClientConfigBrandings) Set(val *ClientConfigBrandings) {
	v.value = val
	v.isSet = true
}

func (v NullableClientConfigBrandings) IsSet() bool {
	return v.isSet
}

func (v *NullableClientConfigBrandings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientConfigBrandings(val *ClientConfigBrandings) *NullableClientConfigBrandings {
	return &NullableClientConfigBrandings{value: val, isSet: true}
}

func (v NullableClientConfigBrandings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientConfigBrandings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


