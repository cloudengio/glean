/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the EditCollectionItemRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditCollectionItemRequest{}

// EditCollectionItemRequest struct for EditCollectionItemRequest
type EditCollectionItemRequest struct {
	// The ID of the Collection to edit CollectionItems in.
	CollectionId int32 `json:"collectionId"`
	// The ID of the CollectionItem to edit.
	ItemId string `json:"itemId"`
	// The optional name of the collection item.
	Name *string `json:"name,omitempty"`
	// A helpful description of why this CollectionItem is in the Collection that it's in.
	Description *string `json:"description,omitempty"`
	// The emoji icon for this CollectionItem. Only used for Text type items.
	Icon *string `json:"icon,omitempty"`
}

// NewEditCollectionItemRequest instantiates a new EditCollectionItemRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditCollectionItemRequest(collectionId int32, itemId string) *EditCollectionItemRequest {
	this := EditCollectionItemRequest{}
	return &this
}

// NewEditCollectionItemRequestWithDefaults instantiates a new EditCollectionItemRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditCollectionItemRequestWithDefaults() *EditCollectionItemRequest {
	this := EditCollectionItemRequest{}
	return &this
}

// GetCollectionId returns the CollectionId field value
func (o *EditCollectionItemRequest) GetCollectionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CollectionId
}

// GetCollectionIdOk returns a tuple with the CollectionId field value
// and a boolean to check if the value has been set.
func (o *EditCollectionItemRequest) GetCollectionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CollectionId, true
}

// SetCollectionId sets field value
func (o *EditCollectionItemRequest) SetCollectionId(v int32) {
	o.CollectionId = v
}

// GetItemId returns the ItemId field value
func (o *EditCollectionItemRequest) GetItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ItemId
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
func (o *EditCollectionItemRequest) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ItemId, true
}

// SetItemId sets field value
func (o *EditCollectionItemRequest) SetItemId(v string) {
	o.ItemId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EditCollectionItemRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionItemRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EditCollectionItemRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EditCollectionItemRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EditCollectionItemRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionItemRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EditCollectionItemRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EditCollectionItemRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIcon returns the Icon field value if set, zero value otherwise.
func (o *EditCollectionItemRequest) GetIcon() string {
	if o == nil || IsNil(o.Icon) {
		var ret string
		return ret
	}
	return *o.Icon
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EditCollectionItemRequest) GetIconOk() (*string, bool) {
	if o == nil || IsNil(o.Icon) {
		return nil, false
	}
	return o.Icon, true
}

// HasIcon returns a boolean if a field has been set.
func (o *EditCollectionItemRequest) HasIcon() bool {
	if o != nil && !IsNil(o.Icon) {
		return true
	}

	return false
}

// SetIcon gets a reference to the given string and assigns it to the Icon field.
func (o *EditCollectionItemRequest) SetIcon(v string) {
	o.Icon = &v
}

func (o EditCollectionItemRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditCollectionItemRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["collectionId"] = o.CollectionId
	toSerialize["itemId"] = o.ItemId
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Icon) {
		toSerialize["icon"] = o.Icon
	}
	return toSerialize, nil
}

type NullableEditCollectionItemRequest struct {
	value *EditCollectionItemRequest
	isSet bool
}

func (v NullableEditCollectionItemRequest) Get() *EditCollectionItemRequest {
	return v.value
}

func (v *NullableEditCollectionItemRequest) Set(val *EditCollectionItemRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEditCollectionItemRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEditCollectionItemRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditCollectionItemRequest(val *EditCollectionItemRequest) *NullableEditCollectionItemRequest {
	return &NullableEditCollectionItemRequest{value: val, isSet: true}
}

func (v NullableEditCollectionItemRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditCollectionItemRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


