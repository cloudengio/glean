/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the IconConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IconConfig{}

// IconConfig Defines how to render an icon
type IconConfig struct {
	GeneratedBackgroundColorKey *string `json:"generatedBackgroundColorKey,omitempty"`
	Color *string `json:"color,omitempty"`
	Key *string `json:"key,omitempty"`
	IconType *string `json:"iconType,omitempty"`
	// The name of the icon if applicable, e.g. the glyph name for IconType.GLYPH icons
	Name *string `json:"name,omitempty"`
	// The URL to an image to be displayed if applicable, e.g. the url for iconType.URL icons
	Url *string `json:"url,omitempty"`
}

// NewIconConfig instantiates a new IconConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIconConfig() *IconConfig {
	this := IconConfig{}
	return &this
}

// NewIconConfigWithDefaults instantiates a new IconConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIconConfigWithDefaults() *IconConfig {
	this := IconConfig{}
	return &this
}

// GetGeneratedBackgroundColorKey returns the GeneratedBackgroundColorKey field value if set, zero value otherwise.
func (o *IconConfig) GetGeneratedBackgroundColorKey() string {
	if o == nil || IsNil(o.GeneratedBackgroundColorKey) {
		var ret string
		return ret
	}
	return *o.GeneratedBackgroundColorKey
}

// GetGeneratedBackgroundColorKeyOk returns a tuple with the GeneratedBackgroundColorKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetGeneratedBackgroundColorKeyOk() (*string, bool) {
	if o == nil || IsNil(o.GeneratedBackgroundColorKey) {
		return nil, false
	}
	return o.GeneratedBackgroundColorKey, true
}

// HasGeneratedBackgroundColorKey returns a boolean if a field has been set.
func (o *IconConfig) HasGeneratedBackgroundColorKey() bool {
	if o != nil && !IsNil(o.GeneratedBackgroundColorKey) {
		return true
	}

	return false
}

// SetGeneratedBackgroundColorKey gets a reference to the given string and assigns it to the GeneratedBackgroundColorKey field.
func (o *IconConfig) SetGeneratedBackgroundColorKey(v string) {
	o.GeneratedBackgroundColorKey = &v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *IconConfig) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *IconConfig) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *IconConfig) SetColor(v string) {
	o.Color = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IconConfig) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IconConfig) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IconConfig) SetKey(v string) {
	o.Key = &v
}

// GetIconType returns the IconType field value if set, zero value otherwise.
func (o *IconConfig) GetIconType() string {
	if o == nil || IsNil(o.IconType) {
		var ret string
		return ret
	}
	return *o.IconType
}

// GetIconTypeOk returns a tuple with the IconType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetIconTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IconType) {
		return nil, false
	}
	return o.IconType, true
}

// HasIconType returns a boolean if a field has been set.
func (o *IconConfig) HasIconType() bool {
	if o != nil && !IsNil(o.IconType) {
		return true
	}

	return false
}

// SetIconType gets a reference to the given string and assigns it to the IconType field.
func (o *IconConfig) SetIconType(v string) {
	o.IconType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IconConfig) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IconConfig) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IconConfig) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IconConfig) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IconConfig) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IconConfig) SetUrl(v string) {
	o.Url = &v
}

func (o IconConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IconConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GeneratedBackgroundColorKey) {
		toSerialize["generatedBackgroundColorKey"] = o.GeneratedBackgroundColorKey
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.IconType) {
		toSerialize["iconType"] = o.IconType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableIconConfig struct {
	value *IconConfig
	isSet bool
}

func (v NullableIconConfig) Get() *IconConfig {
	return v.value
}

func (v *NullableIconConfig) Set(val *IconConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIconConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIconConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIconConfig(val *IconConfig) *NullableIconConfig {
	return &NullableIconConfig{value: val, isSet: true}
}

func (v NullableIconConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIconConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


