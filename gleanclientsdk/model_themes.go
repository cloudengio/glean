/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the Themes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Themes{}

// Themes A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.
type Themes struct {
	// A map of {string, string} pairs where the key represents a known theme option and the value is the CSS color to apply. Supported options are documented in https://dev.glean.com/meta/browser_api/interfaces/Theme.html.
	Light *map[string]string `json:"light,omitempty"`
	// A map of {string, string} pairs where the key represents a known theme option and the value is the CSS color to apply. Supported options are documented in https://dev.glean.com/meta/browser_api/interfaces/Theme.html.
	Dark *map[string]string `json:"dark,omitempty"`
}

// NewThemes instantiates a new Themes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewThemes() *Themes {
	this := Themes{}
	return &this
}

// NewThemesWithDefaults instantiates a new Themes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewThemesWithDefaults() *Themes {
	this := Themes{}
	return &this
}

// GetLight returns the Light field value if set, zero value otherwise.
func (o *Themes) GetLight() map[string]string {
	if o == nil || IsNil(o.Light) {
		var ret map[string]string
		return ret
	}
	return *o.Light
}

// GetLightOk returns a tuple with the Light field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Themes) GetLightOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Light) {
		return nil, false
	}
	return o.Light, true
}

// HasLight returns a boolean if a field has been set.
func (o *Themes) HasLight() bool {
	if o != nil && !IsNil(o.Light) {
		return true
	}

	return false
}

// SetLight gets a reference to the given map[string]string and assigns it to the Light field.
func (o *Themes) SetLight(v map[string]string) {
	o.Light = &v
}

// GetDark returns the Dark field value if set, zero value otherwise.
func (o *Themes) GetDark() map[string]string {
	if o == nil || IsNil(o.Dark) {
		var ret map[string]string
		return ret
	}
	return *o.Dark
}

// GetDarkOk returns a tuple with the Dark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Themes) GetDarkOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Dark) {
		return nil, false
	}
	return o.Dark, true
}

// HasDark returns a boolean if a field has been set.
func (o *Themes) HasDark() bool {
	if o != nil && !IsNil(o.Dark) {
		return true
	}

	return false
}

// SetDark gets a reference to the given map[string]string and assigns it to the Dark field.
func (o *Themes) SetDark(v map[string]string) {
	o.Dark = &v
}

func (o Themes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Themes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Light) {
		toSerialize["light"] = o.Light
	}
	if !IsNil(o.Dark) {
		toSerialize["dark"] = o.Dark
	}
	return toSerialize, nil
}

type NullableThemes struct {
	value *Themes
	isSet bool
}

func (v NullableThemes) Get() *Themes {
	return v.value
}

func (v *NullableThemes) Set(val *Themes) {
	v.value = val
	v.isSet = true
}

func (v NullableThemes) IsSet() bool {
	return v.isSet
}

func (v *NullableThemes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableThemes(val *Themes) *NullableThemes {
	return &NullableThemes{value: val, isSet: true}
}

func (v NullableThemes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableThemes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


