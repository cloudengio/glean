/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the PermissionedObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PermissionedObject{}

// PermissionedObject struct for PermissionedObject
type PermissionedObject struct {
	Permissions *ObjectPermissions `json:"permissions,omitempty"`
}

// NewPermissionedObject instantiates a new PermissionedObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionedObject() *PermissionedObject {
	this := PermissionedObject{}
	return &this
}

// NewPermissionedObjectWithDefaults instantiates a new PermissionedObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionedObjectWithDefaults() *PermissionedObject {
	this := PermissionedObject{}
	return &this
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *PermissionedObject) GetPermissions() ObjectPermissions {
	if o == nil || IsNil(o.Permissions) {
		var ret ObjectPermissions
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionedObject) GetPermissionsOk() (*ObjectPermissions, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *PermissionedObject) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given ObjectPermissions and assigns it to the Permissions field.
func (o *PermissionedObject) SetPermissions(v ObjectPermissions) {
	o.Permissions = &v
}

func (o PermissionedObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PermissionedObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullablePermissionedObject struct {
	value *PermissionedObject
	isSet bool
}

func (v NullablePermissionedObject) Get() *PermissionedObject {
	return v.value
}

func (v *NullablePermissionedObject) Set(val *PermissionedObject) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionedObject) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionedObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionedObject(val *PermissionedObject) *NullablePermissionedObject {
	return &NullablePermissionedObject{value: val, isSet: true}
}

func (v NullablePermissionedObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionedObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


