/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the AppResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppResult{}

// AppResult struct for AppResult
type AppResult struct {
	// The app or other repository type this represents
	Datasource string `json:"datasource"`
	// The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request).
	DocType *string `json:"docType,omitempty"`
	// Mimetype is used to differentiate between sub applications from a datasource (e.g. Sheets, Docs from Gdrive)
	MimeType *string `json:"mimeType,omitempty"`
	// If there is available icon url.
	IconUrl *string `json:"iconUrl,omitempty"`
}

// NewAppResult instantiates a new AppResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppResult(datasource string) *AppResult {
	this := AppResult{}
	this.Datasource = datasource
	return &this
}

// NewAppResultWithDefaults instantiates a new AppResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppResultWithDefaults() *AppResult {
	this := AppResult{}
	return &this
}

// GetDatasource returns the Datasource field value
func (o *AppResult) GetDatasource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value
// and a boolean to check if the value has been set.
func (o *AppResult) GetDatasourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datasource, true
}

// SetDatasource sets field value
func (o *AppResult) SetDatasource(v string) {
	o.Datasource = v
}

// GetDocType returns the DocType field value if set, zero value otherwise.
func (o *AppResult) GetDocType() string {
	if o == nil || IsNil(o.DocType) {
		var ret string
		return ret
	}
	return *o.DocType
}

// GetDocTypeOk returns a tuple with the DocType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppResult) GetDocTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DocType) {
		return nil, false
	}
	return o.DocType, true
}

// HasDocType returns a boolean if a field has been set.
func (o *AppResult) HasDocType() bool {
	if o != nil && !IsNil(o.DocType) {
		return true
	}

	return false
}

// SetDocType gets a reference to the given string and assigns it to the DocType field.
func (o *AppResult) SetDocType(v string) {
	o.DocType = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *AppResult) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppResult) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *AppResult) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *AppResult) SetMimeType(v string) {
	o.MimeType = &v
}

// GetIconUrl returns the IconUrl field value if set, zero value otherwise.
func (o *AppResult) GetIconUrl() string {
	if o == nil || IsNil(o.IconUrl) {
		var ret string
		return ret
	}
	return *o.IconUrl
}

// GetIconUrlOk returns a tuple with the IconUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppResult) GetIconUrlOk() (*string, bool) {
	if o == nil || IsNil(o.IconUrl) {
		return nil, false
	}
	return o.IconUrl, true
}

// HasIconUrl returns a boolean if a field has been set.
func (o *AppResult) HasIconUrl() bool {
	if o != nil && !IsNil(o.IconUrl) {
		return true
	}

	return false
}

// SetIconUrl gets a reference to the given string and assigns it to the IconUrl field.
func (o *AppResult) SetIconUrl(v string) {
	o.IconUrl = &v
}

func (o AppResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["datasource"] = o.Datasource
	if !IsNil(o.DocType) {
		toSerialize["docType"] = o.DocType
	}
	if !IsNil(o.MimeType) {
		toSerialize["mimeType"] = o.MimeType
	}
	if !IsNil(o.IconUrl) {
		toSerialize["iconUrl"] = o.IconUrl
	}
	return toSerialize, nil
}

type NullableAppResult struct {
	value *AppResult
	isSet bool
}

func (v NullableAppResult) Get() *AppResult {
	return v.value
}

func (v *NullableAppResult) Set(val *AppResult) {
	v.value = val
	v.isSet = true
}

func (v NullableAppResult) IsSet() bool {
	return v.isSet
}

func (v *NullableAppResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppResult(val *AppResult) *NullableAppResult {
	return &NullableAppResult{value: val, isSet: true}
}

func (v NullableAppResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


