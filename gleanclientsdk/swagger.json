{
  "openapi": "3.0.0",
  "info": {
    "version": "0.9.0",
    "title": "Glean Client API",
    "contact": {
      "email": "support@glean.com"
    },
    "description": "# Introduction\nThese are the public APIs to enable implementing a custom client interface to the Glean system.\n\n# Usage guidelines\nThis API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along\nwith a 6-month sunset period for anything that requires developers to adopt the new versions.\n"
  },
  "servers": [
    {
      "url": "https://{domain}-be.glean.com/rest/api/v1",
      "variables": {
        "domain": {
          "default": "domain",
          "description": "Email domain (without extension) that determines the deployment backend."
        }
      }
    }
  ],
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "scheme": "bearer",
        "type": "http"
      }
    },
    "parameters": {
      "actas": {
        "name": "actas",
        "in": "query",
        "description": "Email of another user to act as for debugging purposes. Requires sufficient permissions.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "clientVersion": {
        "name": "clientVersion",
        "in": "query",
        "description": "The version of the client making the request.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "domain": {
        "name": "domain",
        "in": "query",
        "description": "The domain of the top-level page in which the client is being run. For embedded search and NSR, it will be the domain of the embedding page. For sidebar, it will be the domain of the embedding page if it's a recognized workplace app. For NTP and app.glean.com requests, it will be empty.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "eids": {
        "name": "eids",
        "in": "query",
        "description": "List of experiment ids to force for incoming request.",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      }
    },
    "schemas": {
      "SessionInfo": {
        "properties": {
          "sessionTrackingToken": {
            "type": "string",
            "description": "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab."
          },
          "tabId": {
            "type": "string",
            "description": "A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab."
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the server saw this token."
          },
          "lastQuery": {
            "type": "string",
            "description": "The last query seen by the server."
          }
        }
      },
      "SearchRequestSourceInfo": {
        "required": [
          "modality"
        ],
        "properties": {
          "initiator": {
            "type": "string",
            "description": "The means by which the search request was initiated. EVAL - Internal usage for automated evaluation FACETS - A background request to get bucket counts for facets following a user search request MORE - The infinite scroll requested more results for an existing search ONBOARDING - A demo query was issued as part of the onboarding flow ONBOARDING_CHECKLIST - The user performed a search from the search step of the new user onboarding checklist PAGE_LOAD - A SERP was visited without going through regular product UI, e.g. from a bookmark, page refresh, or hitting the browser back button DISCARDED_PAGE_LOAD - as PAGE_LOAD but the page was previously discarded by the browser PREFETCH - Results for a non-active tab were requested, e.g. gmail USER - The user initiated a search by manually typing a query, clicking a suggestion, etc. RECOMMENDATION - A query intent is detected from the user's activity and a search request is issued proactively AUTOMATION - Initiated from an API used for automation by an external developer or integration.",
            "enum": [
              "EVAL",
              "FACETS",
              "MORE",
              "ONBOARDING",
              "ONBOARDING_CHECKLIST",
              "PAGE_LOAD",
              "DISCARDED_PAGE_LOAD",
              "PREFETCH",
              "USER",
              "RECOMMENDATION",
              "AUTOMATION"
            ]
          },
          "modality": {
            "type": "string",
            "description": "The UI paradigm from which the search request was sent. FULLPAGE - The standard web app (including mobile) OVERLAY - An iframe that's not Embedded Search / NSR (No such frame type as of now) OMNIBOX - The browser omnibox CONTEXT_MENU - The browser right-click context menu (powered by the browser extension) EMBEDDED_SEARCH - The embedded search added as an iframe NSR - Native search replacement provided by extension injected iframe SIDEBAR - The extension sidebar GLEANBOT - Gleanbot in Slack, MS Teams, Discord, etc.",
            "enum": [
              "FULLPAGE",
              "OVERLAY",
              "OMNIBOX",
              "CONTEXT_MENU",
              "EMBEDDED_SEARCH",
              "NSR",
              "SIDEBAR",
              "GLEANBOT"
            ]
          },
          "domain": {
            "type": "string",
            "description": "The domain from/on behalf of which the request is being issued. Currently only being used for tracking / logging purposes."
          },
          "platform": {
            "type": "string",
            "description": "Platform from which the search request was sent. Optional field.",
            "enum": [
              "SLACK",
              "DISCORD",
              "MS_TEAMS"
            ]
          },
          "uiElement": {
            "type": "string",
            "description": "The (optional) UI element within the paradigm from which the search request was sent. Each modality will have a dedicated uiElement enum (e.g., SearchRequestGleanbotUIElementEnum)"
          },
          "isDebug": {
            "type": "boolean",
            "description": "Whether the query is for debugging purposes and, as such, should not be included in usage metrics and quality pipelines."
          },
          "clientVersion": {
            "type": "string",
            "description": "An opaque version identifier for the client. This is meant to be used for logging and debugging purposes only."
          }
        }
      },
      "ConnectorType": {
        "type": "string",
        "description": "The source from which document content was pulled, e.g. an API crawl or browser history",
        "enum": [
          "API_CRAWL",
          "BROWSER_CRAWL",
          "BROWSER_HISTORY",
          "BUILTIN",
          "FEDERATED_SEARCH",
          "PUSH_API",
          "WEB_CRAWL",
          "NATIVE_HISTORY"
        ]
      },
      "DocumentContent": {
        "properties": {
          "fullTextList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The plaintext content of the document."
          }
        }
      },
      "Document": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The document id."
          },
          "datasource": {
            "type": "string",
            "description": "The app or other repository type from which the document was extracted"
          },
          "connectorType": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "docType": {
            "type": "string",
            "description": "The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request)."
          },
          "content": {
            "$ref": "#/components/schemas/DocumentContent"
          },
          "containerDocument": {
            "$ref": "#/components/schemas/Document"
          },
          "parentDocument": {
            "$ref": "#/components/schemas/Document"
          },
          "title": {
            "type": "string",
            "description": "The title of the document."
          },
          "url": {
            "type": "string",
            "description": "A permalink for the document."
          },
          "metadata": {
            "$ref": "#/components/schemas/DocumentMetadata"
          },
          "sections": {
            "type": "array",
            "description": "A list of content sub-sections in the document, e.g. text blocks with different headings in a Drive doc or Confluence page.",
            "items": {
              "$ref": "#/components/schemas/DocumentSection"
            }
          }
        }
      },
      "SearchDebugOptions": {
        "properties": {
          "forceParseQuery": {
            "type": "string",
            "description": "Debug only. When present, uses this parsed query JSON string instead of the query in the request. Requires elevated permission."
          }
        }
      },
      "FacetFilterValue": {
        "properties": {
          "value": {
            "type": "string",
            "example": "Spreadsheet"
          },
          "relationType": {
            "type": "string",
            "enum": [
              "EQUALS",
              "LT",
              "GT"
            ],
            "example": "EQUALS"
          },
          "isNegated": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "FacetFilter": {
        "properties": {
          "fieldName": {
            "type": "string",
            "example": "owner"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilterValue"
            },
            "description": "Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName doc_type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet."
          },
          "groupName": {
            "type": "string",
            "example": "Spreadsheet",
            "description": "Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet."
          }
        },
        "example": {
          "fieldName": "doc_type",
          "values": [
            {
              "value": "Spreadsheet",
              "relationType": "EQUALS",
              "isNegated": false
            },
            {
              "value": "Presentation",
              "relationType": "EQUALS",
              "isNegated": false
            }
          ]
        }
      },
      "FacetBucketFilter": {
        "properties": {
          "facet": {
            "type": "string",
            "description": "The facet whose buckets should be filtered."
          },
          "prefix": {
            "type": "string",
            "description": "The per-term prefix that facet buckets should be filtered on."
          }
        }
      },
      "AuthToken": {
        "required": [
          "accessToken",
          "datasource"
        ],
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "datasource": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          },
          "authUser": {
            "description": "Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.",
            "type": "string"
          },
          "expiration": {
            "description": "Unix timestamp when this token expires (in seconds since epoch UTC).",
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "accessToken": "123abc",
          "datasource": "gmail",
          "scope": "email profile https://www.googleapis.com/auth/gmail.readonly",
          "tokenType": "Bearer",
          "authUser": "1"
        }
      },
      "SearchRequestOptions": {
        "required": [
          "facetBucketSize"
        ],
        "properties": {
          "debugOptions": {
            "$ref": "#/components/schemas/SearchDebugOptions"
          },
          "datasourceFilter": {
            "type": "string",
            "description": "Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing."
          },
          "datasourcesFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing."
          },
          "queryOverridesFacetFilters": {
            "type": "boolean",
            "description": "If true, the operators in the query are taken to override any operators in facetFilters in the case of conflict. This is used to correctly set rewrittenFacetFilters and rewrittenQuery."
          },
          "facetFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            },
            "description": "A list of filters for the query. An AND is assumed between different facetFilters. For example, owner Sumeet and doc_type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets."
          },
          "facetBucketFilter": {
            "$ref": "#/components/schemas/FacetBucketFilter"
          },
          "facetBucketSize": {
            "type": "integer",
            "description": "The maximum number of FacetBuckets to return in each FacetResult."
          },
          "authTokens": {
            "type": "array",
            "description": "Auth tokens which may be used for non-indexed, federated results (e.g. Gmail).",
            "items": {
              "$ref": "#/components/schemas/AuthToken"
            }
          },
          "fetchAllDatasourceCounts": {
            "type": "boolean",
            "description": "Hints that the QE should return result counts (via the datasource facet result) for all supported datasources, rather than just those specified in the datasource[s]Filter"
          },
          "responseHints": {
            "type": "array",
            "description": "Array of hints containing what QE should return back to FE.",
            "items": {
              "type": "string",
              "enum": [
                "RESULTS",
                "QUERY_METADATA"
              ]
            }
          },
          "timezoneOffset": {
            "type": "integer",
            "description": "The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."
          },
          "forceNegation": {
            "type": "boolean",
            "description": "Whether or not to force not ignoring of negation, i.e. force negated terms to be negated."
          },
          "disableSpellcheck": {
            "type": "boolean",
            "description": "Whether or not to disable spellcheck."
          },
          "disableQueryAutocorrect": {
            "type": "boolean",
            "description": "Disables automatic adjustment of the input query for spelling corrections or other reasons."
          },
          "expandedSnippetSize": {
            "type": "integer",
            "description": "The number of characters to include in the expanded snippet."
          }
        },
        "example": {
          "debugOptions": {
            "enableDebugging": true
          },
          "datasourceFilter": "JIRA",
          "datasourcesFilter": [
            "JIRA"
          ],
          "queryOverridesFacetFilters": true,
          "facetFilters": [
            {
              "fieldName": "fieldName",
              "fieldValues": [
                "fieldValues",
                "fieldValues"
              ]
            },
            {
              "fieldName": "fieldName",
              "fieldValues": [
                "fieldValues",
                "fieldValues"
              ]
            }
          ]
        }
      },
      "TextRange": {
        "required": [
          "startIndex"
        ],
        "description": "A subsection of a given string to which some special formatting should be applied.",
        "properties": {
          "startIndex": {
            "type": "integer",
            "description": "The inclusive start index of the range."
          },
          "endIndex": {
            "type": "integer",
            "description": "The exclusive end index of the range."
          },
          "type": {
            "type": "string",
            "enum": [
              "BOLD",
              "CITATION",
              "LINK"
            ]
          },
          "document": {
            "$ref": "#/components/schemas/Document",
            "description": "A document corresponding to the range, if applicable. For example, the cited document for a CITATION range."
          }
        }
      },
      "QuerySuggestion": {
        "required": [
          "query"
        ],
        "properties": {
          "missingTerm": {
            "type": "string",
            "description": "A query term missing from the original query on which this suggestion is based"
          },
          "query": {
            "type": "string",
            "description": "The query being suggested (e.g. enforcing the missing term from the original query)"
          },
          "label": {
            "type": "string",
            "description": "A user-facing description to display for the suggestion"
          },
          "datasource": {
            "type": "string",
            "description": "The datasource associated with the suggestion"
          },
          "requestOptions": {
            "$ref": "#/components/schemas/SearchRequestOptions"
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "The bolded ranges within the query of the QuerySuggestion."
          }
        },
        "example": {
          "query": "app:github type:pull author:mortimer",
          "label": "Mortimer's PRs",
          "datasource": "github"
        }
      },
      "SearchResultSnippet": {
        "required": [
          "snippet"
        ],
        "properties": {
          "snippet": {
            "type": "string",
            "description": "A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007."
          },
          "mimeType": {
            "type": "string",
            "description": "The mime type of the snippets, currently either text/plain or text/html."
          },
          "text": {
            "type": "string",
            "description": "A matching snippet from the document with no highlights."
          },
          "snippetTextOrdering": {
            "type": "integer",
            "description": "Used for sorting based off the snippet's location within all_snippetable_text"
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "The bolded ranges within text."
          }
        },
        "example": {
          "snippet": "snippet",
          "mimeType": "mimeType"
        }
      },
      "RelatedDocuments": {
        "properties": {
          "relation": {
            "type": "string",
            "description": "How this document relates to the including entity.",
            "enum": [
              "CASE",
              "CONTACT",
              "CONVERSATION_MESSAGES",
              "FROM",
              "OPPORTUNITY",
              "RECENT",
              "SOURCE",
              "TICKET",
              "WITH",
              "EXPERT"
            ]
          },
          "associatedEntityId": {
            "type": "string",
            "description": "Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)"
          },
          "querySuggestion": {
            "$ref": "#/components/schemas/QuerySuggestion"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "description": "A truncated list of documents with this relation. TO BE DEPRECATED.",
            "deprecated": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            },
            "description": "A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken."
          }
        }
      },
      "SearchResult": {
        "required": [
          "snippets",
          "url"
        ],
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "nativeAppUrl": {
            "type": "string",
            "description": "A deep link, if available, into the datasource's native application for the user's platform (e.g. slack://...)."
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular result in this particular query. To be used for /feedback reporting."
          },
          "snippets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultSnippet"
            }
          },
          "expandedSnippets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The expanded snippets for this result. This is only populated if the query has the expand_snippets parameter set to true."
          },
          "fullText": {
            "type": "string",
            "description": "The full body text of the result if not already contained in the snippets"
          },
          "fullTextList": {
            "type": "array",
            "description": "The full body text of the result if not already contained in the snippets; each item in the array represents a separate line in the original text",
            "items": {
              "type": "string"
            }
          },
          "relatedResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocuments"
            },
            "description": "A list of results related to this search result. Eg. for conversation results it contains individual messages from the conversation document which will be shown on SERP."
          },
          "clusteredResults": {
            "type": "array",
            "description": "A list of results that should be displayed as associated with this result.",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "allClusteredResults": {
            "type": "array",
            "description": "A list of results that should be displayed as associated with this result.",
            "items": {
              "$ref": "#/components/schemas/ClusterGroup"
            }
          },
          "attachmentCount": {
            "type": "integer",
            "description": "The total number of attachments."
          },
          "attachments": {
            "type": "array",
            "description": "A (potentially partial) list of results representing documents attached to the main result document.",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "backlinkResults": {
            "type": "array",
            "description": "A list of results that should be displayed as backlinks of this result in reverse chronological order.",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "clusterType": {
            "$ref": "#/components/schemas/ClusterTypeEnum"
          },
          "mustIncludeSuggestions": {
            "$ref": "#/components/schemas/QuerySuggestionList"
          },
          "querySuggestion": {
            "$ref": "#/components/schemas/QuerySuggestion"
          },
          "debugInfo": {
            "$ref": "#/components/schemas/SearchResultDebugInfo"
          },
          "structuredResults": {
            "type": "array",
            "description": "When present, this list of `StructuredResult`s will supercede a `Document` in this `SearchResult`.",
            "items": {
              "$ref": "#/components/schemas/StructuredResult"
            }
          },
          "prominence": {
            "$ref": "#/components/schemas/SearchResultProminenceEnum"
          },
          "attachmentContext": {
            "type": "string",
            "description": "Additional context for the relationship between the result and the document it's attached to."
          },
          "pins": {
            "type": "array",
            "description": "A list of pins associated with this search result.",
            "items": {
              "$ref": "#/components/schemas/PinDocument"
            }
          }
        },
        "example": {
          "snippets": [
            {
              "snippet": "snippet",
              "mimeType": "mimeType"
            }
          ],
          "metadata": {
            "container": "container",
            "createTime": "2000-01-23T04:56:07.000Z",
            "datasource": "datasource",
            "author": {
              "name": "name"
            },
            "documentId": "documentId",
            "updateTime": "2000-01-23T04:56:07.000Z",
            "mimeType": "mimeType",
            "objectType": "objectType"
          },
          "debugInfo": {
            "formattedDebugInfo": "formattedDebugInfo"
          },
          "title": "title",
          "url": "https://example.com/foo/bar",
          "nativeAppUrl": "slack://foo/bar",
          "mustIncludeSuggestions": [
            {
              "missingTerm": "container",
              "query": "container"
            }
          ]
        }
      },
      "ClusterTypeEnum": {
        "type": "string",
        "description": "The reason for inclusion of clusteredResults.",
        "enum": [
          "SIMILAR",
          "FRESHNESS",
          "TITLE",
          "CONTENT",
          "NONE",
          "THREAD_REPLY",
          "THREAD_ROOT"
        ]
      },
      "ClusterGroup": {
        "required": [
          "visibleCountHint"
        ],
        "properties": {
          "clusteredResults": {
            "type": "array",
            "description": "A list of results that should be displayed as associated with this result.",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "clusterType": {
            "$ref": "#/components/schemas/ClusterTypeEnum"
          },
          "visibleCountHint": {
            "type": "integer",
            "description": "The default number of results to display before truncating and showing a \"see more\" link"
          }
        }
      },
      "Person": {
        "required": [
          "name",
          "obfuscatedId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name."
          },
          "obfuscatedId": {
            "type": "string",
            "description": "An opaque identifier that can be used to request metadata for a Person."
          },
          "relatedDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocuments"
            },
            "description": "A list of documents related to this person."
          },
          "metadata": {
            "$ref": "#/components/schemas/PersonMetadata"
          }
        },
        "example": {
          "name": "George Clooney",
          "obfuscatedId": "abc123"
        }
      },
      "QuerySuggestionList": {
        "required": [
          "suggestions"
        ],
        "properties": {
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuerySuggestion"
            }
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "SearchResultDebugInfo": {
        "properties": {
          "finalScore": {
            "type": "number",
            "format": "double"
          },
          "scholasticScore": {
            "type": "number",
            "format": "double"
          },
          "scholasticContent": {
            "type": "string"
          },
          "scholasticRetrievalOnly": {
            "type": "boolean"
          },
          "explanation": {
            "type": "string"
          },
          "snippetScore": {
            "type": "number",
            "format": "double"
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "evalDocumentDescriptorEncoded": {
            "type": "string",
            "description": "Information about boundaries / endpoints of documents, e.g., messages in a conversation - only used for evals and always scrubbed + without PII."
          },
          "id_hash": {
            "type": "string",
            "description": "The document id hash."
          }
        }
      },
      "Company": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "User-friendly display name."
          },
          "profileUrl": {
            "type": "string",
            "description": "Link to internal company company profile."
          },
          "websiteUrls": {
            "type": "array",
            "description": "Link to company's associated websites.",
            "items": {
              "type": "string"
            }
          },
          "logoUrl": {
            "type": "string",
            "description": "The URL of the company's logo. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."
          },
          "location": {
            "type": "string",
            "description": "User facing string representing the company's location.",
            "example": "New York City"
          },
          "phone": {
            "type": "string",
            "description": "Phone number as a number string."
          },
          "fax": {
            "type": "string",
            "description": "Fax number as a number string."
          },
          "industry": {
            "type": "string",
            "description": "User facing string representing the company's industry.",
            "example": "Finances"
          },
          "annualRevenue": {
            "type": "number",
            "format": "double",
            "description": "Average company's annual revenue for reference."
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int64",
            "description": "Average company's number of employees for reference."
          },
          "stockSymbol": {
            "type": "string",
            "description": "Company's stock symbol if company is public."
          },
          "foundedDate": {
            "type": "string",
            "format": "date",
            "description": "The date when the company was founded."
          },
          "about": {
            "type": "string",
            "description": "User facing description of company.",
            "example": "Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"
          }
        }
      },
      "DocumentCounts": {
        "type": "object",
        "description": "A map of {string, int} pairs representing counts of each document type associated with this customer.",
        "additionalProperties": {
          "type": "integer"
        }
      },
      "CustomerMetadata": {
        "properties": {
          "datasourceId": {
            "type": "string",
            "description": "The user visible id of the salesforce customer account."
          }
        }
      },
      "Customer": {
        "required": [
          "id",
          "company"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier."
          },
          "domains": {
            "type": "array",
            "description": "Link to company's associated website domains.",
            "items": {
              "type": "string"
            }
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "documentCounts": {
            "$ref": "#/components/schemas/DocumentCounts"
          },
          "poc": {
            "type": "array",
            "description": "A list of POC for company.",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/CustomerMetadata"
          },
          "mergedCustomers": {
            "type": "array",
            "description": "A list of Customers.",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "The date when the interaction with customer started."
          },
          "contractAnnualRevenue": {
            "type": "number",
            "format": "double",
            "description": "Average contract annual revenue with that customer."
          },
          "notes": {
            "type": "string",
            "description": "User facing (potentially generated) notes about company.",
            "example": "CIO is interested in trying out the product."
          }
        }
      },
      "RelatedObject": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the related object"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata to help FE show a loading state, while not having the actual object",
            "properties": {
              "name": {
                "type": "string",
                "description": "placeholder name of the object, not the relationship"
              }
            }
          }
        }
      },
      "RelatedObjectEdge": {
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedObject"
            }
          }
        }
      },
      "RelatedObjects": {
        "properties": {
          "relatedObjects": {
            "type": "object",
            "description": "A list of objects related to a source object.",
            "additionalProperties": {
              "$ref": "#/components/schemas/RelatedObjectEdge"
            }
          }
        }
      },
      "PersonToTeamRelationship": {
        "required": [
          "person"
        ],
        "type": "object",
        "description": "Metadata about the relationship of a person to a team.",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "relationship": {
            "type": "string",
            "description": "The team member's relationship to the team. This defaults to MEMBER if not set.",
            "default": "MEMBER",
            "enum": [
              "MEMBER",
              "MANAGER",
              "LEAD",
              "POINT_OF_CONTACT",
              "OTHER"
            ]
          },
          "customRelationshipStr": {
            "type": "string",
            "description": "Displayed name for the relationship if relationship is set to `OTHER`."
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "description": "The team member's start date"
          }
        }
      },
      "TeamEmail": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email address"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRIMARY",
              "SECONDARY",
              "ONCALL",
              "OTHER"
            ],
            "default": "OTHER"
          },
          "isUserGenerated": {
            "type": "boolean",
            "description": "true iff the email was manually added by a user from within Glean (aka not from the original data source)"
          }
        }
      },
      "DatasourceProfile": {
        "required": [
          "datasource",
          "handle"
        ],
        "properties": {
          "datasource": {
            "type": "string",
            "example": "github",
            "description": "The datasource the profile is of."
          },
          "handle": {
            "type": "string",
            "description": "The display name of the person in the given datasource."
          },
          "url": {
            "type": "string",
            "description": "URL to view the user's profile."
          },
          "nativeAppUrl": {
            "type": "string",
            "description": "A deep link, if available, into the datasource's native application for the user's platform (i.e. slack://...)."
          },
          "isUserGenerated": {
            "type": "boolean",
            "description": "For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)"
          }
        }
      },
      "Team": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RelatedObjects"
          },
          {
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier"
              },
              "name": {
                "type": "string",
                "description": "Team name"
              },
              "description": {
                "type": "string",
                "description": "A description of the team"
              },
              "businessUnit": {
                "type": "string",
                "description": "Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."
              },
              "department": {
                "type": "string",
                "description": "An organizational unit where everyone has a similar task, e.g. `Engineering`."
              },
              "photoUrl": {
                "type": "string",
                "description": "A link to the team's photo"
              },
              "bannerUrl": {
                "type": "string",
                "description": "A link to the team's banner photo"
              },
              "externalLink": {
                "type": "string",
                "format": "uri",
                "description": "Link to a team page on the internet or your company's intranet"
              },
              "members": {
                "type": "array",
                "description": "The members on this team",
                "items": {
                  "$ref": "#/components/schemas/PersonToTeamRelationship"
                }
              },
              "memberCount": {
                "type": "integer",
                "description": "Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)"
              },
              "emails": {
                "type": "array",
                "description": "The emails for this team",
                "items": {
                  "$ref": "#/components/schemas/TeamEmail"
                }
              },
              "datasourceProfiles": {
                "type": "array",
                "description": "The datasource profiles of the team",
                "items": {
                  "$ref": "#/components/schemas/DatasourceProfile"
                }
              },
              "datasource": {
                "type": "string",
                "description": "the data source of the team, e.g. GDRIVE"
              },
              "createdFrom": {
                "type": "string",
                "description": "For teams created from docs, the doc title. Otherwise empty."
              },
              "lastUpdatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "when this team was last updated."
              },
              "status": {
                "type": "string",
                "description": "whether this team is fully processed or there are still unprocessed operations that'll affect it",
                "default": "PROCESSED",
                "enum": [
                  "PROCESSED",
                  "QUEUED_FOR_CREATION",
                  "QUEUED_FOR_DELETION"
                ]
              },
              "canBeDeleted": {
                "type": "boolean",
                "description": "can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot",
                "default": true
              },
              "loggingId": {
                "type": "string",
                "description": "The logging id of the team used in scrubbed logs, client analytics, and metrics."
              }
            }
          }
        ]
      },
      "ScopeType": {
        "type": "string",
        "description": "Describes the scope for a ReadPermission, WritePermission, or GrantPermission object",
        "enum": [
          "GLOBAL",
          "OWN"
        ]
      },
      "WritePermission": {
        "description": "Describes the write permissions levels that a user has for a specific feature",
        "properties": {
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          },
          "create": {
            "type": "boolean",
            "description": "True if user has create permission for this feature and scope"
          },
          "update": {
            "type": "boolean",
            "description": "True if user has update permission for this feature and scope"
          },
          "delete": {
            "type": "boolean",
            "description": "True if user has delete permission for this feature and scope"
          }
        }
      },
      "ObjectPermissions": {
        "properties": {
          "write": {
            "$ref": "#/components/schemas/WritePermission"
          }
        }
      },
      "PermissionedObject": {
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/ObjectPermissions",
            "description": "The permissions the current viewer has with respect to a particular object."
          }
        }
      },
      "CustomDataValue": {
        "properties": {
          "displayLabel": {
            "type": "string"
          },
          "stringValue": {
            "type": "string"
          },
          "stringListValue": {
            "type": "array",
            "description": "list of strings for multi-value properties",
            "items": {
              "type": "string"
            }
          },
          "numberValue": {
            "type": "number"
          }
        }
      },
      "CustomData": {
        "type": "object",
        "description": "Custom fields specific to individual datasources",
        "additionalProperties": {
          "$ref": "#/components/schemas/CustomDataValue"
        }
      },
      "CustomEntityMetadata": {
        "properties": {
          "customData": {
            "$ref": "#/components/schemas/CustomData"
          }
        }
      },
      "DocumentSpec": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "The url for document."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The id for document."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ugcType",
              "contentId"
            ],
            "properties": {
              "ugcType": {
                "type": "string",
                "enum": [
                  "ANNOUNCEMENTS",
                  "ANSWERS",
                  "COLLECTIONS",
                  "SHORTCUTS"
                ],
                "description": "The type of the user generated content (UGC datasource)."
              },
              "contentId": {
                "type": "integer",
                "description": "The id for user generated content."
              },
              "docType": {
                "type": "string",
                "description": "The specific type of the user generated content type."
              }
            }
          }
        ]
      },
      "GroupType": {
        "type": "string",
        "description": "The type of user group",
        "enum": [
          "DEPARTMENT",
          "ALL",
          "TEAM",
          "JOB_TITLE",
          "ROLE_TYPE",
          "LOCATION",
          "REGION",
          "EXTERNAL_GROUP"
        ]
      },
      "Group": {
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GroupType"
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for the group. May be the same as name."
          },
          "name": {
            "type": "string",
            "description": "Name of the group."
          }
        }
      },
      "UserRole": {
        "type": "string",
        "description": "A user's role with respect to a specific document.",
        "enum": [
          "OWNER",
          "VIEWER",
          "ANSWER_MODERATOR",
          "EDITOR",
          "VERIFIER"
        ]
      },
      "UserRoleSpecification": {
        "required": [
          "role"
        ],
        "properties": {
          "sourceDocumentSpec": {
            "$ref": "#/components/schemas/DocumentSpec",
            "description": "The document spec of the object this role originates from. The object this role is included with will usually have the same information as this document spec, but if the role is inherited, then the document spec refers to the parent document that the role came from."
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          }
        }
      },
      "CustomEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier."
              },
              "title": {
                "type": "string",
                "description": "Title or name of the custom entity."
              },
              "datasource": {
                "type": "string",
                "description": "The datasource the custom entity is from."
              },
              "objectType": {
                "type": "string",
                "description": "The type of the entity. Interpretation is specific to each datasource"
              },
              "metadata": {
                "$ref": "#/components/schemas/CustomEntityMetadata"
              },
              "roles": {
                "type": "array",
                "description": "A list of user roles for the custom entity explicitly granted by the owner.",
                "items": {
                  "$ref": "#/components/schemas/UserRoleSpecification"
                }
              }
            }
          }
        ]
      },
      "AnswerId": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "The opaque id of the answer.",
            "example": 3
          }
        }
      },
      "AnswerDocId": {
        "properties": {
          "docId": {
            "type": "string",
            "description": "Internal document id of the answer. We support using the document id for cases where the client doesn't have the integer id available. If both are available, using the integer id is preferred.",
            "example": "ANSWERS_answer_3"
          }
        }
      },
      "AnswerMutableProperties": {
        "properties": {
          "question": {
            "type": "string",
            "example": "Why is the sky blue?"
          },
          "questionVariations": {
            "type": "array",
            "description": "Additional ways of phrasing this question.",
            "items": {
              "type": "string"
            }
          },
          "bodyText": {
            "type": "string",
            "description": "The plain text answer to the question.",
            "example": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."
          },
          "boardId": {
            "type": "integer",
            "description": "The parent board ID of this Answer, or 0 if it's a floating Answer."
          },
          "audienceFilters": {
            "type": "array",
            "description": "Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          },
          "addedRoles": {
            "type": "array",
            "description": "A list of user roles for the answer added by the owner.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "removedRoles": {
            "type": "array",
            "description": "A list of user roles for the answer removed by the owner.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "roles": {
            "type": "array",
            "description": "A list of roles for this answer explicitly granted by an owner, editor, or admin.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "sourceDocumentSpec": {
            "$ref": "#/components/schemas/DocumentSpec"
          }
        }
      },
      "StructuredTextMutableProperties": {
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "example": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."
          }
        }
      },
      "StructuredTextItem": {
        "properties": {
          "link": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Diffuse_sky_radiation"
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "text": {
            "type": "string",
            "example": "Because its wavelengths are shorter, blue light is more strongly scattered than the longer-wavelength lights, red or green. Hence the result that when looking at the sky away from the direct incident sunlight, the human eye perceives the sky to be blue."
          }
        }
      },
      "StructuredText": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StructuredTextMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "structuredList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StructuredTextItem"
                },
                "description": "An array of objects each of which contains either a string or a link which optionally corresponds to a document."
              }
            }
          }
        ]
      },
      "AnswerLike": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Person"
          },
          "createTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time the user liked the answer in ISO format (ISO 8601)."
          }
        }
      },
      "AnswerLikes": {
        "required": [
          "likedBy",
          "likedByUser",
          "numLikes"
        ],
        "properties": {
          "likedBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerLike"
            }
          },
          "likedByUser": {
            "type": "boolean",
            "description": "Whether the user in context liked the answer."
          },
          "numLikes": {
            "type": "integer",
            "description": "The total number of likes for the answer."
          }
        }
      },
      "Reminder": {
        "required": [
          "assignee",
          "remindAt"
        ],
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/Person"
          },
          "requestor": {
            "$ref": "#/components/schemas/Person"
          },
          "remindAt": {
            "type": "integer",
            "description": "Unix timestamp for when the reminder should trigger (in seconds since epoch UTC)."
          },
          "createdAt": {
            "type": "integer",
            "description": "Unix timestamp for when the reminder was first created (in seconds since epoch UTC)."
          },
          "reason": {
            "type": "string",
            "description": "An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, \"Duplicate\", \"Incomplete\", \"Incorrect\")."
          }
        }
      },
      "TimePoint": {
        "properties": {
          "epochSeconds": {
            "type": "integer",
            "description": "Epoch seconds. Has precedence over daysFromNow."
          },
          "daysFromNow": {
            "type": "integer",
            "description": "The number of days from now. Specification relative to current time. Can be negative."
          }
        }
      },
      "Period": {
        "properties": {
          "minDaysFromNow": {
            "type": "integer",
            "description": "DEPRECATED - The number of days from now in the past to define upper boundary of time period.",
            "deprecated": true
          },
          "maxDaysFromNow": {
            "type": "integer",
            "description": "DEPRECATED - The number of days from now in the past to define lower boundary of time period.",
            "deprecated": true
          },
          "start": {
            "$ref": "#/components/schemas/TimePoint"
          },
          "end": {
            "$ref": "#/components/schemas/TimePoint"
          }
        }
      },
      "CountInfo": {
        "required": [
          "count"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "The counter value"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "org": {
            "type": "string",
            "description": "The unit of organization over which we did the count aggregation, e.g. org (department) or company"
          }
        }
      },
      "VerificationMetadata": {
        "required": [
          "documentId"
        ],
        "properties": {
          "lastVerifier": {
            "$ref": "#/components/schemas/Person"
          },
          "lastVerificationTs": {
            "type": "integer",
            "description": "The unix timestamp of the verification (in seconds since epoch UTC)."
          },
          "expirationTs": {
            "type": "integer",
            "description": "The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC)."
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "reminders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reminder"
            },
            "description": "Info about all outstanding verification reminders for the document if exists."
          },
          "lastReminder": {
            "$ref": "#/components/schemas/Reminder"
          },
          "visitorCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountInfo"
            },
            "description": "Number of visitors to the document during included time periods."
          },
          "candidateVerifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions."
          }
        }
      },
      "Verification": {
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "UNVERIFIED",
              "VERIFIED",
              "DEPRECATED"
            ],
            "description": "The verification state for the document."
          },
          "metadata": {
            "$ref": "#/components/schemas/VerificationMetadata"
          }
        }
      },
      "CollectionBaseMutableProperties": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of the Collection."
          },
          "description": {
            "type": "string",
            "description": "A brief summary of the Collection's contents."
          },
          "addedRoles": {
            "type": "array",
            "description": "A list of added user roles for the collection.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "removedRoles": {
            "type": "array",
            "description": "A list of removed user roles for the collection.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "audienceFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            },
            "description": "Filters which restrict who should see this collection. Values are taken from the corresponding filters in people search."
          }
        }
      },
      "AnswerBoardMutableProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionBaseMutableProperties"
          }
        ]
      },
      "AnswerBoard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerBoardMutableProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "required": [
              "id",
              "description"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique ID of the Answer Board."
              },
              "createTime": {
                "type": "string",
                "format": "date-time"
              },
              "updateTime": {
                "type": "string",
                "format": "date-time"
              },
              "creator": {
                "$ref": "#/components/schemas/Person"
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "itemCount": {
                "type": "integer",
                "description": "The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items."
              },
              "roles": {
                "type": "array",
                "description": "A list of user roles for the Answer Board.",
                "items": {
                  "$ref": "#/components/schemas/UserRoleSpecification"
                }
              }
            }
          }
        ]
      },
      "Thumbnail": {
        "properties": {
          "photoId": {
            "type": "string",
            "description": "Photo id if the thumbnail is from splash."
          },
          "url": {
            "type": "string",
            "description": "Thumbnail url. This can be user provided image and/or from downloaded images hosted by glean."
          }
        }
      },
      "CollectionMutableProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionBaseMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "icon": {
                "type": "string",
                "description": "The emoji icon of this Collection."
              },
              "adminLocked": {
                "type": "boolean",
                "description": "Indicates whether edits are allowed for everyone or only admins."
              },
              "parentId": {
                "type": "integer",
                "description": "The parent of this Collection, or 0 if it's a top-level Collection."
              },
              "thumbnail": {
                "$ref": "#/components/schemas/Thumbnail"
              },
              "allowedDatasource": {
                "type": "string",
                "description": "The datasource type this collection can hold."
              }
            }
          }
        ]
      },
      "CollectionItemMutableProperties": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The optional name of the collection item."
          },
          "description": {
            "type": "string",
            "description": "A helpful description of why this CollectionItem is in the Collection that it's in."
          },
          "icon": {
            "type": "string",
            "description": "The emoji icon for this CollectionItem. Only used for Text type items."
          }
        }
      },
      "UserGeneratedContentId": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "The opaque id of the user generated content."
          }
        }
      },
      "ShortcutMutableProperties": {
        "properties": {
          "inputAlias": {
            "type": "string",
            "description": "link text following go/ prefix as entered by the user."
          },
          "destinationUrl": {
            "type": "string",
            "description": "destination URL for the shortcut."
          },
          "destinationDocumentId": {
            "type": "string",
            "description": "document id for the url, if known."
          },
          "description": {
            "type": "string",
            "description": "A short, plain text blurb to help people understand the intent of the shortcut."
          },
          "unlisted": {
            "type": "boolean",
            "description": "Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only."
          },
          "urlTemplate": {
            "type": "string",
            "description": "For variable shortcuts, contains the url template; note, destinationUrl contains default url"
          },
          "addedRoles": {
            "type": "array",
            "description": "A list of user roles added for the Shortcut.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "removedRoles": {
            "type": "array",
            "description": "A list of user roles removed for the Shortcut.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          }
        }
      },
      "ShortcutMetadata": {
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/Person"
          },
          "createTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time the shortcut was created in ISO format (ISO 8601)."
          },
          "updatedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time the shortcut was updated in ISO format (ISO 8601)."
          },
          "destinationDocument": {
            "$ref": "#/components/schemas/Document",
            "description": "Document that corresponds to the destination url, if applicable."
          },
          "intermediateUrl": {
            "type": "string",
            "description": "The URL from which the user is then redirected to the destination URL. Full replacement for https://go/<inputAlias>."
          },
          "viewPrefix": {
            "type": "string",
            "description": "The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with \"/\". e.g. \"go/\" for native shortcuts."
          },
          "isExternal": {
            "type": "boolean",
            "description": "Indicates whether a shortcut is native or external."
          },
          "editUrl": {
            "type": "string",
            "description": "The URL using which the user can access the edit page of the shortcut."
          }
        }
      },
      "Shortcut": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserGeneratedContentId"
          },
          {
            "$ref": "#/components/schemas/ShortcutMutableProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "$ref": "#/components/schemas/ShortcutMetadata"
          },
          {
            "type": "object",
            "required": [
              "inputAlias"
            ],
            "properties": {
              "alias": {
                "type": "string",
                "description": "canonical link text following go/ prefix where hyphen/underscore is removed."
              },
              "title": {
                "type": "string",
                "description": "Title for the Go Link"
              },
              "roles": {
                "type": "array",
                "description": "A list of user roles for the Go Link.",
                "items": {
                  "$ref": "#/components/schemas/UserRoleSpecification"
                }
              }
            }
          }
        ]
      },
      "Collection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionMutableProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "required": [
              "id",
              "description"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique ID of the collection."
              },
              "createTime": {
                "type": "string",
                "format": "date-time"
              },
              "updateTime": {
                "type": "string",
                "format": "date-time"
              },
              "creator": {
                "$ref": "#/components/schemas/Person"
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "itemCount": {
                "type": "integer",
                "description": "The number of items currently in the Collection. Separated from the actual items so we can grab the count without items."
              },
              "childCount": {
                "type": "integer",
                "description": "The number of children Collections. Separated from the actual children so we can grab the count without children."
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CollectionItem"
                },
                "description": "The items in this Collection."
              },
              "pinMetadata": {
                "$ref": "#/components/schemas/CollectionPinnedMetadata",
                "description": "Metadata having what categories this collection is pinned to and the eligible categories to pin to"
              },
              "shortcuts": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The names of the shortcuts (Go Links) that point to this Collection."
              },
              "children": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Collection"
                },
                "description": "The children Collections of this Collection."
              },
              "roles": {
                "type": "array",
                "description": "A list of user roles for the collection.",
                "items": {
                  "$ref": "#/components/schemas/UserRoleSpecification"
                }
              }
            }
          }
        ]
      },
      "CollectionItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionItemMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "collectionId",
              "itemType"
            ],
            "properties": {
              "collectionId": {
                "type": "integer",
                "description": "The Collection ID of the Collection that this CollectionItem belongs in."
              },
              "documentId": {
                "type": "string",
                "description": "If this CollectionItem is a Glean-indexed document, the document ID of that document."
              },
              "url": {
                "type": "string",
                "description": "The URL of this CollectionItem."
              },
              "itemId": {
                "type": "string",
                "description": "Unique identifier for the item within the collection it belongs to."
              },
              "createdBy": {
                "$ref": "#/components/schemas/Person",
                "description": "The person who added this collection item."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Unix timestamp for when the item was first added (in seconds since epoch UTC)."
              },
              "document": {
                "$ref": "#/components/schemas/Document",
                "description": "The Document this CollectionItem corresponds to (omitted if item is a non-indexed URL)."
              },
              "shortcut": {
                "$ref": "#/components/schemas/Shortcut",
                "description": "The Shortcut this CollectionItem corresponds to (only included if item URL is for a Go Link)."
              },
              "collection": {
                "$ref": "#/components/schemas/Collection",
                "description": "The Collection this CollectionItem corresponds to (only included if item type is COLLECTION)."
              },
              "itemType": {
                "type": "string",
                "enum": [
                  "DOCUMENT",
                  "TEXT",
                  "URL",
                  "COLLECTION"
                ]
              }
            }
          }
        ]
      },
      "CollectionPinnableCategories": {
        "type": "string",
        "description": "Categories a collection can be pinned to",
        "enum": [
          "COMPANY_RESOURCE",
          "DEPARTMENT_RESOURCE",
          "TEAM_RESOURCE"
        ]
      },
      "CollectionPinnableTargets": {
        "type": "string",
        "description": "What targets can a collection be pinned to",
        "enum": [
          "RESOURCE_CARD",
          "TEAM_PROFILE_PAGE"
        ]
      },
      "CollectionPinTarget": {
        "required": [
          "category"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/CollectionPinnableCategories"
          },
          "value": {
            "type": "string",
            "description": "Optional. If category supports values, then the additional value for the category e.g. department name for DEPARTMENT_RESOURCE, team name/id for TEAM_RESOURCE and so on."
          },
          "target": {
            "$ref": "#/components/schemas/CollectionPinnableTargets"
          }
        }
      },
      "CollectionPinMetadata": {
        "required": [
          "id",
          "target"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the collection."
          },
          "target": {
            "$ref": "#/components/schemas/CollectionPinTarget"
          }
        }
      },
      "CollectionPinnedMetadata": {
        "required": [
          "pinnedCategories",
          "eligibleCategoriesForPinning"
        ],
        "properties": {
          "existingPins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionPinTarget"
            },
            "description": "List of targets this collection is pinned to"
          },
          "eligiblePins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionPinMetadata"
            },
            "description": "List of targets this collection can be pinned to, excluding the targets this collection is already pinned to. We also include collection id already is pinned to each eligible target, which will be 0 if the target has no pinned collection."
          },
          "pinnedCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionPinnableCategories"
            },
            "description": "DEPRECATED - List of categories this collection is pinned to. Use existingPins instead.",
            "deprecated": true
          },
          "eligibleCategoriesForPinning": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            },
            "description": "DEPRECATED - A map of {category, collectionId to bump out} pairs of eligible categories to pin. We exclude categories the collection is already pinned to. CollectionId will be 0 if the the cateogry has no pinned collection. Use eligiblePins instead.",
            "deprecated": true
          }
        }
      },
      "Answer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerId"
          },
          {
            "$ref": "#/components/schemas/AnswerDocId"
          },
          {
            "$ref": "#/components/schemas/AnswerMutableProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "combinedAnswerText": {
                "$ref": "#/components/schemas/StructuredText"
              },
              "likes": {
                "$ref": "#/components/schemas/AnswerLikes"
              },
              "userRole": {
                "type": "string",
                "enum": [
                  "OWNER",
                  "VIEWER",
                  "ANSWER_MODERATOR"
                ],
                "description": "DEPRECATED - use roles instead. User's role on the specific answer.",
                "deprecated": true
              },
              "author": {
                "$ref": "#/components/schemas/Person"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "The time the answer was created in ISO format (ISO 8601)."
              },
              "updateTime": {
                "type": "string",
                "format": "date-time",
                "description": "The time the answer was last updated in ISO format (ISO 8601)."
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "verification": {
                "$ref": "#/components/schemas/Verification"
              },
              "board": {
                "$ref": "#/components/schemas/AnswerBoard",
                "description": "The parent board this answer is in."
              },
              "collections": {
                "type": "array",
                "description": "The collections to which the answer belongs.",
                "items": {
                  "$ref": "#/components/schemas/Collection"
                }
              },
              "documentCategory": {
                "type": "string",
                "description": "The document's document_category(.proto)."
              },
              "sourceDocument": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        ]
      },
      "ExtractedQnA": {
        "properties": {
          "heading": {
            "type": "string",
            "description": "Heading text that was matched to produce this result."
          },
          "question": {
            "type": "string",
            "description": "Question text that was matched to produce this result."
          },
          "questionResult": {
            "$ref": "#/components/schemas/SearchResult"
          }
        }
      },
      "AppResult": {
        "required": [
          "datasource"
        ],
        "properties": {
          "datasource": {
            "type": "string",
            "description": "The app or other repository type this represents"
          },
          "docType": {
            "type": "string",
            "description": "The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request)."
          },
          "mimeType": {
            "type": "string",
            "description": "Mimetype is used to differentiate between sub applications from a datasource (e.g. Sheets, Docs from Gdrive)"
          },
          "iconUrl": {
            "type": "string",
            "description": "If there is available icon url."
          }
        }
      },
      "CodeLine": {
        "properties": {
          "lineNumber": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "Index ranges depicting matched sections of the line"
          }
        }
      },
      "Code": {
        "properties": {
          "repoName": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "fileUrl": {
            "type": "string"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeLine"
            }
          },
          "isLastMatch": {
            "type": "boolean",
            "description": "Last file match for a repo"
          }
        },
        "example": {
          "repoName": "scio",
          "fileName": "README.md",
          "matches": [
            {
              "lineNumber": 1,
              "content": "Welcome to the beginning",
              "ranges": []
            },
            {
              "lineNumber": 2,
              "content": "Second line of the file",
              "ranges": []
            },
            {
              "lineNumber": 3,
              "content": "hello world hello world",
              "ranges": [
                {
                  "startindex": 0,
                  "endIndex": 5
                },
                {
                  "startIndex": 12,
                  "endIndex": 17
                }
              ]
            }
          ]
        }
      },
      "StructuredResult": {
        "properties": {
          "snippets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultSnippet"
            }
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "customEntity": {
            "$ref": "#/components/schemas/CustomEntity"
          },
          "answer": {
            "$ref": "#/components/schemas/Answer"
          },
          "extractedQnA": {
            "$ref": "#/components/schemas/ExtractedQnA"
          },
          "app": {
            "$ref": "#/components/schemas/AppResult"
          },
          "collection": {
            "$ref": "#/components/schemas/Collection"
          },
          "answerBoard": {
            "$ref": "#/components/schemas/AnswerBoard"
          },
          "code": {
            "$ref": "#/components/schemas/Code"
          },
          "shortcut": {
            "$ref": "#/components/schemas/Shortcut"
          },
          "querySuggestions": {
            "$ref": "#/components/schemas/QuerySuggestionList"
          },
          "relatedDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocuments"
            },
            "description": "A list of documents related to this structured result."
          },
          "debugInfo": {
            "type": "string",
            "description": "Debug details for this result if debug is enabled."
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular result in this particular query. To be used for /feedback reporting."
          },
          "prominence": {
            "type": "string",
            "description": "The level of visual distinction that should be given to a result.\nHERO - A high-confidence result that should feature prominently on the page.\nPROMOTED - May not be the best result but should be given additional visual distinction.\nSTANDARD - Should not be distinct from any other results.\nTODO: Deprecate and use prominence field only in SearchResult.\n",
            "enum": [
              "HERO",
              "PROMOTED",
              "STANDARD"
            ]
          },
          "source": {
            "type": "string",
            "description": "Source context for this result. Possible values depend on the result type.",
            "enum": [
              "EXPERT_DETECTION"
            ]
          }
        }
      },
      "SearchResultProminenceEnum": {
        "type": "string",
        "description": "The level of visual distinction that should be given to a result.\nHERO - A high-confidence result that should feature prominently on the page.\nPROMOTED - May not be the best result but should be given additional visual distinction.\nSTANDARD - Should not be distinct from any other results.\n",
        "enum": [
          "HERO",
          "PROMOTED",
          "STANDARD"
        ]
      },
      "PinDocumentMutableProperties": {
        "properties": {
          "query": {
            "type": "string",
            "description": "DEPRECATED - The query string to be set for the pin"
          },
          "queries": {
            "type": "array",
            "description": "The query strings for which the pinned result will show.",
            "items": {
              "type": "string"
            }
          },
          "audienceFilters": {
            "type": "array",
            "description": "Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          }
        }
      },
      "PinDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PinDocumentMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "documentId"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The opaque id of the pin."
              },
              "pinId": {
                "type": "integer",
                "description": "DEPRECATED - Prefer use of `id` string field instead"
              },
              "documentId": {
                "type": "string",
                "description": "The document which should be a pinned result."
              },
              "query": {
                "type": "string",
                "description": "DEPRECATED - The query string for which the result was generated."
              },
              "audienceFilters": {
                "type": "array",
                "description": "Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.",
                "items": {
                  "$ref": "#/components/schemas/FacetFilter"
                }
              },
              "attribution": {
                "$ref": "#/components/schemas/Person"
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "createTime": {
                "type": "string",
                "format": "date-time"
              },
              "updateTime": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "PersonTeam": {
        "description": "Use `id` if you index teams via Glean, and use `name` and `externalLink` if you want to use your own team pages",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Team name"
          },
          "externalLink": {
            "type": "string",
            "format": "uri",
            "description": "Link to a team page on the internet or your company's intranet"
          },
          "relationship": {
            "type": "string",
            "description": "The team member's relationship to the team. This defaults to MEMBER if not set.",
            "default": "MEMBER",
            "enum": [
              "MEMBER",
              "MANAGER",
              "LEAD",
              "POINT_OF_CONTACT",
              "OTHER"
            ]
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "description": "The team member's start date"
          }
        }
      },
      "StructuredLocation": {
        "type": "object",
        "description": "Detailed location with information about country, state, city etc.",
        "properties": {
          "deskLocation": {
            "type": "string",
            "description": "Desk number."
          },
          "timezone": {
            "type": "string",
            "description": "Location's timezone, e.g. UTC, PST."
          },
          "address": {
            "type": "string",
            "description": "Office address or name."
          },
          "city": {
            "type": "string",
            "description": "Name of the city."
          },
          "state": {
            "type": "string",
            "description": "State code."
          },
          "region": {
            "type": "string",
            "description": "Region information, e.g. NORAM, APAC."
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP Code for the address."
          },
          "country": {
            "type": "string",
            "description": "Country name."
          },
          "countryCode": {
            "type": "string",
            "description": "Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA."
          }
        }
      },
      "SocialNetwork": {
        "required": [
          "name",
          "profileUrl"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Possible values are \"twitter\", \"linkedin\"."
          },
          "profileName": {
            "type": "string",
            "description": "Human-readable profile name."
          },
          "profileUrl": {
            "type": "string",
            "description": "Link to profile."
          }
        }
      },
      "PersonDistance": {
        "required": [
          "name",
          "obfuscatedId",
          "distance"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name."
          },
          "obfuscatedId": {
            "type": "string",
            "description": "An opaque identifier that can be used to request metadata for a Person."
          },
          "distance": {
            "type": "number",
            "format": "float",
            "description": "Distance to person, refer to PeopleDistance pipeline on interpretation of the value."
          }
        }
      },
      "InviteInfo": {
        "description": "Information regarding the invite status of a person.",
        "properties": {
          "inviter": {
            "description": "The person that invited this person.",
            "$ref": "#/components/schemas/Person"
          },
          "inviteTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time this person was invited in ISO format (ISO 8601)."
          },
          "signUpTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time this person signed up in ISO format (ISO 8601)."
          },
          "reminderTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time this person was reminded in ISO format (ISO 8601) if a reminder was sent."
          }
        }
      },
      "ReadPermission": {
        "description": "Describes the read permission level that a user has for a specific feature",
        "properties": {
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          }
        }
      },
      "ReadPermissions": {
        "description": "Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject",
        "additionalProperties": {
          "type": "array",
          "description": "List of read permissions (for different scopes but same feature)",
          "items": {
            "$ref": "#/components/schemas/ReadPermission"
          }
        }
      },
      "WritePermissions": {
        "description": "Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject",
        "additionalProperties": {
          "type": "array",
          "description": "List of write permissions (for different scopes but same feature)",
          "items": {
            "$ref": "#/components/schemas/WritePermission"
          }
        }
      },
      "GrantPermission": {
        "description": "Describes the grant permission level that a user has for a specific feature",
        "properties": {
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          }
        }
      },
      "GrantPermissions": {
        "description": "Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject",
        "additionalProperties": {
          "type": "array",
          "description": "List of grant permissions (for different scopes but same feature)",
          "items": {
            "$ref": "#/components/schemas/GrantPermission"
          }
        }
      },
      "Permissions": {
        "description": "Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles. When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes (along with Permisisons.isModified)",
        "required": [
          "canInsightsDashboard",
          "canAdminSearch",
          "canAdminClientAPIGlobalTokens",
          "createUgcTags",
          "editDocumentTags",
          "canCreateAnnoucements"
        ],
        "properties": {
          "canInsightsDashboard": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user has access to the insights dashboard"
          },
          "canAdminSearch": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch"
          },
          "canAdminClientApiGlobalTokens": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope"
          },
          "canDlp": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features"
          },
          "createUgcTags": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. Define new UGC tags."
          },
          "editDocumentTags": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. Add and remove existing UGC tags on any document."
          },
          "canCreateAnnoucements": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True is the user can create/update/delete announcements."
          },
          "canAccessGeneratedQna": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user has access to the Generated Qna feature on SERP"
          },
          "read": {
            "$ref": "#/components/schemas/ReadPermissions"
          },
          "write": {
            "$ref": "#/components/schemas/WritePermissions"
          },
          "grant": {
            "$ref": "#/components/schemas/GrantPermissions"
          },
          "role": {
            "type": "string",
            "description": "DEPRECATED - The role for the user",
            "deprecated": true
          },
          "roles": {
            "type": "array",
            "description": "The roles a user has.",
            "items": {
              "type": "string"
            }
          },
          "isModified": {
            "type": "boolean",
            "description": "True if this user was given additional permissions beyond what they're granted via their permission role"
          }
        }
      },
      "CustomFieldValueStr": {
        "required": [
          "strText"
        ],
        "properties": {
          "strText": {
            "type": "string",
            "description": "Text field for string value."
          }
        }
      },
      "CustomFieldValueHyperlink": {
        "required": [
          "urlAnchor",
          "urlLink"
        ],
        "properties": {
          "urlAnchor": {
            "type": "string",
            "description": "Anchor text for hyperlink."
          },
          "urlLink": {
            "type": "string",
            "description": "Link for this URL."
          }
        }
      },
      "CustomFieldValuePerson": {
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "CustomFieldValue": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFieldValueStr"
          },
          {
            "$ref": "#/components/schemas/CustomFieldValueHyperlink"
          },
          {
            "$ref": "#/components/schemas/CustomFieldValuePerson"
          }
        ]
      },
      "CustomFieldData": {
        "required": [
          "label",
          "values",
          "displayable"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "A user-facing label for this field."
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "displayable": {
            "type": "boolean",
            "description": "Determines whether the client should display this custom field",
            "default": true
          }
        }
      },
      "TimeInterval": {
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "type": "string",
            "description": "The RFC3339 timestamp formatted start time of this event."
          },
          "end": {
            "type": "string",
            "description": "The RFC3339 timestamp formatted end time of this event."
          }
        }
      },
      "AnonymousEvent": {
        "description": "A generic, light-weight calendar event.",
        "type": "object",
        "properties": {
          "time": {
            "$ref": "#/components/schemas/TimeInterval"
          },
          "eventType": {
            "description": "The nature of the event, for example \"out of office\".",
            "type": "string",
            "enum": [
              "DEFAULT",
              "OUT_OF_OFFICE"
            ]
          }
        }
      },
      "IconConfig": {
        "description": "Defines how to render an icon",
        "properties": {
          "generatedBackgroundColorKey": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "iconType": {
            "enum": [
              "COLLECTION",
              "CUSTOM",
              "DATASOURCE",
              "DATASOURCE_INSTANCE",
              "FAVICON",
              "FILE_TYPE",
              "GENERATED_BACKGROUND",
              "GLYPH",
              "MIME_TYPE",
              "NO_ICON",
              "PERSON",
              "REACTIONS",
              "URL"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the icon if applicable, e.g. the glyph name for IconType.GLYPH icons"
          },
          "url": {
            "type": "string",
            "description": "The URL to an image to be displayed if applicable, e.g. the url for iconType.URL icons"
          }
        },
        "example": {
          "color": "#343CED",
          "key": "person_icon",
          "iconType": "GLYPH",
          "name": "user"
        }
      },
      "Badge": {
        "type": "object",
        "description": "Displays a user's accomplishment or milestone",
        "properties": {
          "key": {
            "type": "string",
            "description": "An auto generated unique identifier."
          },
          "displayName": {
            "type": "string",
            "description": "The badge name displayed to users"
          },
          "iconConfig": {
            "$ref": "#/components/schemas/IconConfig"
          },
          "pinned": {
            "type": "boolean",
            "description": "The badge should be shown on the PersonAttribution"
          }
        },
        "example": {
          "key": "deployment_name_new_hire",
          "displayName": "New hire",
          "iconConfig": [
            {
              "$ref": "../../shared/common.yaml#/components/schemas/IconConfig/example"
            }
          ]
        }
      },
      "PersonMetadata": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FULL_TIME",
              "CONTRACTOR",
              "NON_EMPLOYEE"
            ],
            "example": "FULL_TIME"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the person"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the person"
          },
          "title": {
            "type": "string",
            "description": "Job title."
          },
          "businessUnit": {
            "type": "string",
            "description": "Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."
          },
          "department": {
            "type": "string",
            "description": "An organizational unit where everyone has a similar task, e.g. `Engineering`."
          },
          "teams": {
            "description": "Info about the employee's team(s).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonTeam"
            }
          },
          "departmentCount": {
            "type": "integer",
            "description": "The number of people in this person's department."
          },
          "email": {
            "type": "string",
            "description": "The user's primary email address"
          },
          "aliasEmails": {
            "type": "array",
            "description": "Additional email addresses of this user beyond the primary, if any.",
            "items": {
              "type": "string"
            }
          },
          "location": {
            "type": "string",
            "description": "User facing string representing the person's location."
          },
          "structuredLocation": {
            "$ref": "#/components/schemas/StructuredLocation"
          },
          "externalProfileLink": {
            "type": "string",
            "description": "Link to a customer's internal profile page. This is set to '#' when no link is desired."
          },
          "manager": {
            "$ref": "#/components/schemas/Person"
          },
          "managementChain": {
            "description": "The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "phone": {
            "type": "string",
            "description": "Phone number as a number string."
          },
          "photoUrl": {
            "type": "string",
            "description": "The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."
          },
          "uneditedPhotoUrl": {
            "type": "string",
            "description": "The original photo URL of the person's avatar before any edits they made are applied"
          },
          "bannerUrl": {
            "type": "string",
            "description": "The URL of the person's banner photo."
          },
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date when the employee started.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "If a former employee, the last date of employment."
          },
          "bio": {
            "type": "string",
            "description": "Short biography or mission statement of the employee."
          },
          "pronoun": {
            "type": "string",
            "description": "She/her, He/his or other pronoun."
          },
          "orgSizeCount": {
            "type": "integer",
            "description": "The total recursive size of the people reporting to this person, or 1"
          },
          "directReportsCount": {
            "type": "integer",
            "description": "The total number of people who directly report to this person, or 0"
          },
          "preferredName": {
            "type": "string",
            "description": "The preferred name of the person, or a nickname."
          },
          "socialNetwork": {
            "description": "List of social network profiles.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialNetwork"
            }
          },
          "datasourceProfile": {
            "type": "array",
            "description": "List of profiles this user has in different datasources / tools that they use.",
            "items": {
              "$ref": "#/components/schemas/DatasourceProfile"
            }
          },
          "querySuggestions": {
            "$ref": "#/components/schemas/QuerySuggestionList"
          },
          "peopleDistance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonDistance"
            },
            "description": "List of people and distances to those people from this person. Optionally with metadata."
          },
          "inviteInfo": {
            "$ref": "#/components/schemas/InviteInfo"
          },
          "isSignedUp": {
            "type": "boolean",
            "description": "Whether the user has signed into Glean at least once."
          },
          "lastExtensionUse": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the user has used the Glean extension in ISO 8601 format."
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "customFields": {
            "type": "array",
            "description": "User customizable fields for additional people information.",
            "items": {
              "$ref": "#/components/schemas/CustomFieldData"
            }
          },
          "loggingId": {
            "type": "string",
            "description": "The logging id of the person used in scrubbed logs, tracking GA metrics."
          },
          "startDatePercentile": {
            "type": "number",
            "format": "float",
            "description": "Percentage of the company that started strictly after this person. Between [0,100)."
          },
          "busyEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnonymousEvent"
            },
            "description": "Intervals of busy time for this person, along with the type of event they're busy with."
          },
          "profileBoolSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "flag settings to indicate user profile settings for certain items"
          },
          "badges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Badge"
            },
            "description": "The badges that a user has earned over their lifetime."
          }
        },
        "example": {
          "department": "Movies",
          "email": "george@example.com",
          "location": "Hollywood, CA",
          "phone": 6505551234,
          "photoUrl": "https://example.com/george.jpg",
          "startDate": "2000-01-23",
          "title": "Actor"
        }
      },
      "DocumentVisibility": {
        "type": "string",
        "description": "The level of visibility of the document as understood by our system. PRIVATE - Only one person is able to see the document SPECIFIC_PEOPLE_AND_GROUPS - Only specific people and/or groups can see the document DOMAIN_LINK - Anyone in the domain with the link can see the document DOMAIN_VISIBLE - Anyone in the domain can search for the document PUBLIC_LINK - Anyone with the link can see the document PUBLIC_VISIBLE - Anyone on the internet can search for the document",
        "enum": [
          "PRIVATE",
          "SPECIFIC_PEOPLE_AND_GROUPS",
          "DOMAIN_LINK",
          "DOMAIN_VISIBLE",
          "PUBLIC_LINK",
          "PUBLIC_VISIBLE"
        ]
      },
      "Reaction": {
        "properties": {
          "type": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "description": "The count of the reaction type on the document."
          },
          "reactors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "reactedByViewer": {
            "type": "boolean",
            "description": "Whether the user in context reacted with this type to the document."
          }
        }
      },
      "Share": {
        "description": "Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip",
        "required": [
          "numDaysAgo"
        ],
        "properties": {
          "numDaysAgo": {
            "type": "integer",
            "description": "The number of days that has passed since the share happened"
          },
          "sharer": {
            "$ref": "#/components/schemas/Person"
          },
          "sharingDocument": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "DocumentInteractions": {
        "properties": {
          "numComments": {
            "type": "integer",
            "description": "The count of comments (thread replies in the case of slack)."
          },
          "numReactions": {
            "type": "integer",
            "description": "The count of reactions on the document."
          },
          "reactions": {
            "type": "array",
            "description": "To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "reacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reaction"
            }
          },
          "shares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Share"
            },
            "description": "Describes instances of someone posting a link to this document in one of our indexed datasources."
          },
          "visitorCount": {
            "$ref": "#/components/schemas/CountInfo"
          }
        }
      },
      "ViewerInfo": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "ANSWER_MODERATOR",
              "OWNER",
              "VIEWER"
            ],
            "description": "DEPRECATED - use permissions instead. Viewer's role on the specific document.",
            "deprecated": true
          },
          "lastViewedTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IndexStatus": {
        "properties": {
          "lastCrawledTime": {
            "description": "When the document was last crawled",
            "type": "string",
            "format": "date-time"
          },
          "lastIndexedTime": {
            "description": "When the document was last indexed",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DocumentMetadata": {
        "properties": {
          "datasource": {
            "type": "string"
          },
          "datasourceInstance": {
            "type": "string",
            "description": "The datasource instance from which the document was extracted."
          },
          "objectType": {
            "type": "string",
            "description": "The type of the result. Interpretation is specific to each datasource. (e.g. for Jira issues, this is the issue type such as Bug or Feature Request)."
          },
          "container": {
            "type": "string",
            "description": "The name of the container (higher level parent, not direct parent) of the result. Interpretation is specific to each datasource (e.g. Channels for Slack, Project for Jira). cf. parentId"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the direct parent of the result. Interpretation is specific to each datasource (e.g. parent issue for Jira). cf. container"
          },
          "mimeType": {
            "type": "string"
          },
          "documentId": {
            "type": "string",
            "description": "The index-wide unique identifier."
          },
          "documentIdHash": {
            "type": "string",
            "description": "Hash of documentId."
          },
          "createTime": {
            "type": "string",
            "format": "date-time"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "$ref": "#/components/schemas/Person"
          },
          "owner": {
            "$ref": "#/components/schemas/Person"
          },
          "visibility": {
            "$ref": "#/components/schemas/DocumentVisibility"
          },
          "components": {
            "type": "array",
            "description": "A list of components this result is associated with. Interpretation is specific to each datasource. (e.g. for Jira issues, these are [components](https://confluence.atlassian.com/jirasoftwarecloud/organizing-work-with-components-764478279.html).)",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "The status or disposition of the result. Interpretation is specific to each datasource. (e.g. for Jira issues, this is the issue status such as Done, In Progress or Will Not Fix)."
          },
          "statusCategory": {
            "type": "string",
            "description": "The status category of the result. Meant to be more general than status. Interpretation is specific to each datasource."
          },
          "pins": {
            "type": "array",
            "description": "A list of stars associated with this result.  \"Pin\" is an older name.",
            "items": {
              "$ref": "#/components/schemas/PinDocument"
            }
          },
          "priority": {
            "type": "string",
            "description": "The document priority. Interpretation is datasource specific."
          },
          "assignedTo": {
            "$ref": "#/components/schemas/Person"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "labels": {
            "type": "array",
            "description": "A list of tags for the document. Interpretation is datasource specific.",
            "items": {
              "type": "string"
            }
          },
          "collections": {
            "type": "array",
            "description": "A list of collections that the document belongs to.",
            "items": {
              "$ref": "#/components/schemas/Collection"
            }
          },
          "datasourceId": {
            "type": "string",
            "description": "The user-visible datasource specific id (e.g. Salesforce case number for example, GitHub PR number)."
          },
          "interactions": {
            "$ref": "#/components/schemas/DocumentInteractions"
          },
          "verification": {
            "$ref": "#/components/schemas/Verification"
          },
          "viewerInfo": {
            "$ref": "#/components/schemas/ViewerInfo"
          },
          "permissions": {
            "$ref": "#/components/schemas/ObjectPermissions"
          },
          "visitCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "shortcuts": {
            "type": "array",
            "description": "A list of shortcuts of which destination url is for the document.",
            "items": {
              "$ref": "#/components/schemas/Shortcut"
            }
          },
          "path": {
            "type": "string",
            "description": "For file datasources like onedrive/github etc this has the path to the file"
          },
          "customData": {
            "$ref": "#/components/schemas/CustomData"
          },
          "documentCategory": {
            "type": "string",
            "description": "The document's document_category(.proto)."
          },
          "contactPerson": {
            "$ref": "#/components/schemas/Person"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/Thumbnail",
            "description": "A thumbnail image representing this document."
          },
          "indexStatus": {
            "$ref": "#/components/schemas/IndexStatus"
          }
        },
        "example": {
          "container": "container",
          "parentId": "JIRA_EN-1337",
          "createTime": "2000-01-23T04:56:07.000Z",
          "datasource": "datasource",
          "author": {
            "name": "name"
          },
          "documentId": "documentId",
          "updateTime": "2000-01-23T04:56:07.000Z",
          "mimeType": "mimeType",
          "objectType": "Feature Request",
          "components": [
            "Backend",
            "Networking"
          ],
          "status": [
            "Done"
          ],
          "customData": {
            "someCustomField": "someCustomValue"
          }
        }
      },
      "DocumentSection": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the document section (e.g. the section header)."
          },
          "url": {
            "type": "string",
            "description": "The permalink of the document section."
          }
        }
      },
      "ResultsRequest": {
        "required": [
          "sourceInfo"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The ISO 8601 timestamp associated with the client request.",
            "format": "date-time"
          },
          "trackingToken": {
            "type": "string",
            "description": "A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs."
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          },
          "sourceInfo": {
            "$ref": "#/components/schemas/SearchRequestSourceInfo"
          },
          "sourceDocument": {
            "$ref": "#/components/schemas/Document",
            "description": "The document from which the ResultsRequest is issued, if any."
          },
          "sc": {
            "type": "string",
            "example": "db.enable_debug=true,qp.idf_threshold=0.3",
            "description": "Debug only search params to to change the flow of control in request handling. It will be passed around service boundaries/endpoints. For more details, https://docs.google.com/document/d/1e6taTfWUL8KNUC9de8kmmG2MG2L6cTx4ulOJfAshDTM/edit. Requires sufficient permissions."
          },
          "pageSize": {
            "type": "integer",
            "example": 100,
            "description": "Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize."
          },
          "maxSnippetSize": {
            "type": "integer",
            "description": "Hint to the server about how many characters long a snippet may be. Server may return less or more.",
            "example": 400
          }
        }
      },
      "SearchRequestInputDetails": {
        "properties": {
          "hasCopyPaste": {
            "type": "boolean",
            "description": "Whether the associated query was at least partially copy-pasted.  If subsequent requests are issued after a copy-pasted query is constructed (e.g. with facet modifications), this bit should continue to be set for those requests."
          }
        },
        "example": {
          "hasCopyPaste": true
        }
      },
      "SearchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultsRequest"
          },
          {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The search terms.",
                "example": "vacation policy"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."
              },
              "resultTabIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict."
              },
              "inputDetails": {
                "$ref": "#/components/schemas/SearchRequestInputDetails"
              },
              "requestOptions": {
                "$ref": "#/components/schemas/SearchRequestOptions"
              },
              "timeoutMillis": {
                "type": "integer",
                "description": "Timeout in milliseconds for the request. Backend should throw a 408 if request takes longer than this.",
                "example": 5000
              },
              "people": {
                "type": "array",
                "description": "People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.",
                "items": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "disableSpellcheck": {
                "type": "boolean",
                "description": "Whether or not to disable spellcheck."
              }
            }
          }
        ],
        "example": {
          "trackingToken": "trackingToken",
          "query": "vacation policy",
          "pageSize": 10,
          "requestOptions": {
            "debugOptions": {
              "enableDebugging": true
            },
            "facetFilters": [
              {
                "fieldName": "doctype",
                "fieldValues": [
                  "article",
                  "document"
                ]
              },
              {
                "fieldName": "container",
                "fieldValues": [
                  "engineering"
                ]
              }
            ]
          }
        }
      },
      "GeneratedQna": {
        "properties": {
          "question": {
            "type": "string",
            "description": "Search query rephrased into a question."
          },
          "answer": {
            "type": "string",
            "description": "Answer generated for the given query or the generated question."
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "Answer subsections to mark with special formatting (citations, bolding etc)"
          },
          "status": {
            "type": "string",
            "enum": [
              "COMPUTING",
              "DISABLED",
              "FAILED",
              "NO_ANSWER",
              "SKIPPED",
              "SUCCEEDED",
              "TIMEOUT"
            ],
            "description": "Status of backend generating the answer"
          },
          "cursor": {
            "type": "string",
            "description": "An opaque cursor representing the search request"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular result in this particular query. To be used for /feedback reporting."
          },
          "debugInfo": {
            "type": "string",
            "description": "Debug details for this result if debug is enabled."
          }
        }
      },
      "SearchDebugInfo": {
        "properties": {
          "formattedDebugQuery": {
            "type": "string",
            "description": "A formatted string that represents the parsed query."
          },
          "searchConfigurationJson": {
            "type": "string",
            "description": "JSON of the search config"
          },
          "extraArgsJson": {
            "type": "string",
            "description": "JSON of the extra args"
          },
          "parsedQueryJson": {
            "type": "string",
            "description": "JSON for the parsed query, to be used as an override."
          },
          "debugParsedQueryJson": {
            "type": "string",
            "description": "JSON for the parsed query with debugging signals (e.g. syns and spellchecks)"
          },
          "debugScholasticJson": {
            "type": "string",
            "description": "JSON containing Scholastic data (query embeddings, doc similarities)."
          },
          "debugQPMetadataJson": {
            "type": "string",
            "description": "JSON containing QP metadata"
          },
          "debugScholasticMetadataJson": {
            "type": "string",
            "description": "JSON containing Scholastic metadata"
          },
          "debugMinedSamplesJson": {
            "type": "string",
            "description": "JSON containing mined Intelligence samples"
          },
          "debugRetrievalElasticQuery": {
            "type": "string",
            "description": "JSON containing Elastic retrieval query"
          },
          "debugSnippetsElasticQuery": {
            "type": "string",
            "description": "JSON containing Elastic snippets query"
          },
          "elasticPerformanceString": {
            "type": "string",
            "description": "A string showing performance information returned by elastic."
          },
          "scoringLegendString": {
            "type": "string",
            "description": "A legend of what the functions are when computing the backend score"
          },
          "resultsDebugString": {
            "type": "string",
            "description": "Additional debugging details associated with the request."
          },
          "debugKeywordGenerationJson": {
            "type": "string",
            "description": "JSON containing Keyword Generation data for debugging purposes."
          }
        },
        "example": {
          "formattedDebugInfo": "formattedDebugInfo"
        }
      },
      "InvalidOperatorValueError": {
        "properties": {
          "key": {
            "description": "The operator key that has an invalid value.",
            "type": "string"
          },
          "value": {
            "description": "The invalid operator value.",
            "type": "string"
          }
        }
      },
      "ErrorMessage": {
        "properties": {
          "source": {
            "description": "The datasource this message relates to.",
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ErrorInfo": {
        "properties": {
          "badGmailToken": {
            "type": "boolean",
            "description": "Indicates the gmail results could not be fetched due to bad token."
          },
          "badOutlookToken": {
            "type": "boolean",
            "description": "Indicates the outlook results could not be fetched due to bad token."
          },
          "invalidOperators": {
            "type": "array",
            "description": "Indicates results could not be fetched due to invalid operators in the query.",
            "items": {
              "$ref": "#/components/schemas/InvalidOperatorValueError"
            }
          },
          "errorMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "ResultsResponse": {
        "properties": {
          "trackingToken": {
            "type": "string",
            "description": "A token that should be passed for additional requests related to this request (such as more results requests)."
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "structuredResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StructuredResult"
            }
          },
          "generatedQnaResult": {
            "$ref": "#/components/schemas/GeneratedQna"
          },
          "debugInfo": {
            "$ref": "#/components/schemas/SearchDebugInfo"
          },
          "errorInfo": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "requestID": {
            "type": "string",
            "description": "A platform-generated request ID to correlate backend logs."
          },
          "backendTimeMillis": {
            "type": "integer",
            "format": "int64",
            "description": "Time in milliseconds the backend took to respond to the request.",
            "example": 1100
          }
        }
      },
      "BackendExperimentsContext": {
        "properties": {
          "experimentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of experiment ids for the corresponding request."
          }
        }
      },
      "SearchWarning": {
        "required": [
          "warningType"
        ],
        "properties": {
          "warningType": {
            "type": "string",
            "enum": [
              "LONG_QUERY",
              "QUOTED_PUNCTUATION",
              "PUNCTUATION_ONLY",
              "COPYPASTED_QUOTES"
            ],
            "description": "The type of the warning."
          },
          "lastUsedTerm": {
            "type": "string",
            "description": "The last term we considered in the user's long query."
          },
          "quotesIgnoredQuery": {
            "type": "string",
            "description": "The query after ignoring/removing quotes."
          }
        }
      },
      "SearchResponseMetadata": {
        "properties": {
          "rewrittenQuery": {
            "type": "string",
            "description": "A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators."
          },
          "searchedQuery": {
            "type": "string",
            "description": "The actual query used to perform search and return results."
          },
          "searchedQueryRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "The bolded ranges within the searched query."
          },
          "originalQuery": {
            "type": "string",
            "description": "The query text sent by the client in the request."
          },
          "querySuggestion": {
            "$ref": "#/components/schemas/QuerySuggestion"
          },
          "negatedTerms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of terms that were negated when processing the query."
          },
          "ignoredTerms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "DEPRECATED - A list of terms that are ignored in search. Used, for example, by negation.",
            "deprecated": true
          },
          "modifiedQueryWasUsed": {
            "type": "boolean",
            "description": "A different query was performed than the one requested."
          },
          "originalQueryHadNoResults": {
            "type": "boolean",
            "description": "No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based."
          },
          "searchWarning": {
            "$ref": "#/components/schemas/SearchWarning"
          },
          "triggeredExpertDetection": {
            "type": "boolean",
            "description": "Whether the query triggered expert detection results in the People tab."
          }
        }
      },
      "FacetValue": {
        "properties": {
          "stringValue": {
            "type": "string",
            "example": "engineering",
            "description": "The value that should be set in the FacetFilter when applying this filter to a search request."
          },
          "integerValue": {
            "type": "integer",
            "example": 5
          },
          "displayLabel": {
            "type": "string",
            "example": "engineering",
            "description": "An optional user-friendly label to display in place of the facet value."
          },
          "iconConfig": {
            "$ref": "#/components/schemas/IconConfig"
          }
        }
      },
      "FacetBucket": {
        "properties": {
          "count": {
            "type": "integer",
            "description": "Estimated number of results in this facet.",
            "example": 1
          },
          "datasource": {
            "type": "string",
            "example": "jira",
            "description": "The datasource the value belongs to. This will be used by the all tab to show types across all datasources."
          },
          "percentage": {
            "type": "integer",
            "description": "Estimated percentage of results in this facet.",
            "example": 5
          },
          "value": {
            "$ref": "#/components/schemas/FacetValue"
          }
        }
      },
      "FacetResult": {
        "properties": {
          "sourceName": {
            "type": "string",
            "description": "The source of this facet (e.g. container_name, doc_type, last_updated_at).",
            "example": "container_name"
          },
          "operatorName": {
            "type": "string",
            "description": "How to display this facet. Currently supportes 'SelectSingle' and 'SelectMultiple'.",
            "example": "SelectMultiple"
          },
          "buckets": {
            "type": "array",
            "description": "A list of unique buckets that exist within this result set.",
            "items": {
              "$ref": "#/components/schemas/FacetBucket"
            }
          },
          "hasMoreBuckets": {
            "type": "boolean",
            "description": "Returns true if more buckets exist than those returned. Additional buckets can be retrieve by requesting again with a higher facetBucketSize.",
            "example": false
          },
          "groupName": {
            "type": "string",
            "description": "For most facets this will be the empty string, meaning the facet is high-level and applies to all documents for the datasource. When non-empty, this is used to group facets together (i.e. group facets for each doctype for a certain datasource)",
            "example": "Service Cloud"
          }
        }
      },
      "ResultTab": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the tab. Can be passed in a search request to get results for that tab."
          },
          "count": {
            "type": "integer",
            "description": "The number of results in this tab for the current query."
          },
          "datasource": {
            "type": "string",
            "description": "The datasource associated with the tab, if any."
          },
          "datasourceInstance": {
            "type": "string",
            "description": "The datasource instance associated with the tab, if any."
          }
        }
      },
      "ResultsDescription": {
        "properties": {
          "text": {
            "type": "string",
            "description": "Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab."
          },
          "iconConfig": {
            "$ref": "#/components/schemas/IconConfig",
            "description": "The config for the icon that's displayed with this description"
          }
        }
      },
      "SearchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultsResponse"
          },
          {
            "$ref": "#/components/schemas/BackendExperimentsContext"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/SearchResponseMetadata"
              },
              "facetResults": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FacetResult"
                }
              },
              "resultTabs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResultTab"
                },
                "description": "All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request."
              },
              "resultTabIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The unique IDs of the result tabs to which this response belongs."
              },
              "resultsDescription": {
                "$ref": "#/components/schemas/ResultsDescription"
              },
              "rewrittenFacetFilters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FacetFilter"
                },
                "description": "The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets."
              },
              "cursor": {
                "type": "string",
                "description": "Cursor that indicates the start of the next page of results. To be passed in \"more\" requests for this query."
              },
              "hasMoreResults": {
                "type": "boolean",
                "description": "Whether more results are available. Use cursor to retrieve them."
              }
            }
          }
        ],
        "example": {
          "trackingToken": "trackingToken",
          "suggestedSpellCorrectedQuery": "suggestedSpellCorrectedQuery",
          "hasMoreResults": true,
          "errorInfo": {
            "errorMessages": [
              {
                "source": "gmail",
                "errorMessage": "invalid token"
              },
              {
                "source": "slack",
                "errorMessage": "expired token"
              }
            ]
          },
          "debugInfo": {
            "formattedDebugInfo": "formattedDebugInfo"
          },
          "requestID": "5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100",
          "results": [
            {
              "snippets": [
                {
                  "snippet": "snippet",
                  "mimeType": "mimeType"
                }
              ],
              "metadata": {
                "container": "container",
                "createTime": "2000-01-23T04:56:07.000Z",
                "datasource": "datasource",
                "author": {
                  "name": "name"
                },
                "documentId": "documentId",
                "updateTime": "2000-01-23T04:56:07.000Z",
                "mimeType": "mimeType",
                "objectType": "objectType"
              },
              "debugInfo": {
                "formattedDebugInfo": "formattedDebugInfo"
              },
              "title": "title",
              "url": "url"
            },
            {
              "snippets": [
                {
                  "snippet": "snippet",
                  "mimeType": "mimeType"
                }
              ],
              "metadata": {
                "container": "container",
                "createTime": "2000-01-23T04:56:07.000Z",
                "datasource": "datasource",
                "author": {
                  "name": "name"
                },
                "documentId": "documentId",
                "updateTime": "2000-01-23T04:56:07.000Z",
                "mimeType": "mimeType",
                "objectType": "objectType"
              },
              "debugInfo": {
                "formattedDebugInfo": "formattedDebugInfo"
              },
              "title": "title",
              "url": "url"
            }
          ],
          "facetResults": [
            {
              "buckets": [
                {
                  "percentage": 5,
                  "count": 1,
                  "value": {
                    "stringValue": "stringValue",
                    "integerValue": 5
                  }
                },
                {
                  "percentage": 5,
                  "count": 1,
                  "value": {
                    "stringValue": "stringValue",
                    "integerValue": 5
                  }
                }
              ],
              "sourceName": "sourceName",
              "operatorName": "operatorName",
              "objectType": "objectType"
            },
            {
              "buckets": [
                {
                  "percentage": 5,
                  "count": 1,
                  "value": {
                    "stringValue": "stringValue",
                    "integerValue": 5
                  }
                },
                {
                  "percentage": 5,
                  "count": 1,
                  "value": {
                    "stringValue": "stringValue",
                    "integerValue": 5
                  }
                }
              ],
              "sourceName": "sourceName",
              "operatorName": "operatorName",
              "objectType": "objectType"
            }
          ],
          "rewrittenQuery": "rewrittenQuery",
          "rewrittenFacetFilters": [
            {
              "fieldName": "fieldName",
              "fieldValues": [
                "fieldValues",
                "fieldValues"
              ]
            },
            {
              "fieldName": "fieldName",
              "fieldValues": [
                "fieldValues",
                "fieldValues"
              ]
            }
          ]
        }
      },
      "AutocompleteRequest": {
        "type": "object",
        "properties": {
          "trackingToken": {
            "type": "string"
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          },
          "sourceInfo": {
            "$ref": "#/components/schemas/SearchRequestSourceInfo"
          },
          "query": {
            "type": "string",
            "description": "Partially typed query.",
            "example": "San Fra"
          },
          "datasourcesFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing."
          },
          "datasource": {
            "type": "string",
            "description": "Filter to only return results relevant to the given datasource."
          },
          "resultTypes": {
            "type": "array",
            "description": "Filter to only return results of the given type(s). All types may be returned if omitted.",
            "items": {
              "type": "string",
              "enum": [
                "DOCUMENT",
                "HISTORY",
                "OPERATOR",
                "SUGGESTION",
                "ENTITY",
                "GOLINK"
              ]
            }
          },
          "resultSize": {
            "type": "integer",
            "description": "Maximum number of results to be returned. If no value is provided, the backend will cap at 200.\n",
            "example": 10
          },
          "authTokens": {
            "type": "array",
            "description": "Auth tokens which may be used for federated results.",
            "items": {
              "$ref": "#/components/schemas/AuthToken"
            }
          },
          "sc": {
            "type": "string",
            "example": "ro.pero.do_historical_simulation_for_visits=true",
            "description": "Debug only search params to to change the flow of control in request handling. It will be passed around service boundaries/endpoints. For more details,"
          }
        },
        "example": {
          "trackingToken": "trackingToken",
          "query": "what is a que",
          "datasource": "GDRIVE",
          "resultSize": 10
        }
      },
      "OperatorScope": {
        "properties": {
          "datasource": {
            "type": "string"
          },
          "docType": {
            "type": "string"
          }
        }
      },
      "OperatorMetadata": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "isCustom": {
            "type": "boolean",
            "description": "Whether this operator is supported by default or something that was created within a workplace app (e.g. custom jira field)."
          },
          "operatorType": {
            "type": "string",
            "enum": [
              "TEXT",
              "DOUBLE",
              "DATE"
            ]
          },
          "helpText": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatorScope"
            }
          }
        },
        "example": {
          "name": "Last Updated",
          "operatorType": "DATE",
          "scopes": [
            {
              "datasource": "GDRIVE",
              "docType": "Document"
            },
            {
              "datasource": "ZENDESK"
            }
          ]
        }
      },
      "Quicklink": {
        "description": "An action for a specific datasource that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira",
        "properties": {
          "name": {
            "type": "string",
            "description": "Full action name. Used in autocomplete"
          },
          "shortName": {
            "type": "string",
            "description": "Shortened name. Used in app card"
          },
          "url": {
            "type": "string",
            "description": "The URL for the action"
          },
          "iconConfig": {
            "$ref": "#/components/schemas/IconConfig",
            "description": "The config for the icon for this quicklink"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of this quicklink"
          },
          "scopes": {
            "type": "array",
            "description": "The scopes for which this quicklink is applicable",
            "items": {
              "type": "string",
              "enum": [
                "APP_CARD",
                "AUTOCOMPLETE_EXACT_MATCH",
                "AUTOCOMPLETE_FUZZY_MATCH",
                "AUTOCOMPLETE_ZERO_QUERY",
                "NEW_TAB_PAGE"
              ]
            }
          }
        }
      },
      "AutocompleteResult": {
        "required": [
          "result",
          "result_type"
        ],
        "properties": {
          "result": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all possible keywords for given result."
          },
          "resultType": {
            "type": "string",
            "enum": [
              "APP",
              "DOCUMENT",
              "HISTORY",
              "OPERATOR",
              "SUGGESTION",
              "ENTITY",
              "BROWSER_HISTORY",
              "DATASOURCE",
              "QUICKLINK",
              "OPERATOR_VALUE",
              "GOLINK",
              "ADDITIONAL_DOCUMENT"
            ]
          },
          "score": {
            "type": "number",
            "description": "Higher indicates a more confident match."
          },
          "operatorMetadata": {
            "$ref": "#/components/schemas/OperatorMetadata"
          },
          "quicklink": {
            "$ref": "#/components/schemas/Quicklink"
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "url": {
            "type": "string"
          },
          "structuredResult": {
            "$ref": "#/components/schemas/StructuredResult"
          },
          "trackingToken": {
            "type": "string",
            "description": "A token to be passed in /feedback events associated with this autocomplete result."
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "Subsections of the result string to which some special formatting should be applied (eg. bold)"
          }
        },
        "example": {
          "result": "sample result",
          "resultType": "DOCUMENT",
          "score": 4.56,
          "url": "url",
          "trackingToken": "abcd",
          "metadata": [
            {
              "datasource": "confluence"
            },
            {
              "objectType": "page"
            }
          ]
        }
      },
      "AutocompleteResultGroup": {
        "description": "A subsection of the results list from which distinct sections should be created.",
        "properties": {
          "startIndex": {
            "type": "integer",
            "description": "The inclusive start index of the range."
          },
          "endIndex": {
            "type": "integer",
            "description": "The exclusive end index of the range."
          },
          "title": {
            "type": "string",
            "description": "The title of the result group to be displayed by FE. Empty means no title."
          }
        }
      },
      "AutocompleteResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BackendExperimentsContext"
          },
          {
            "type": "object",
            "properties": {
              "trackingToken": {
                "type": "string",
                "description": "An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting."
              },
              "sessionInfo": {
                "$ref": "#/components/schemas/SessionInfo"
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutocompleteResult"
                }
              },
              "groups": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutocompleteResultGroup"
                },
                "description": "Subsections of the results list from which distinct sections should be created."
              },
              "errorInfo": {
                "$ref": "#/components/schemas/ErrorInfo"
              },
              "backendTimeMillis": {
                "type": "integer",
                "format": "int64",
                "description": "Time in milliseconds the backend took to respond to the request.",
                "example": 1100
              }
            },
            "example": {
              "trackingToken": "trackingToken"
            }
          }
        ]
      },
      "AnnouncementMutableProperties": {
        "properties": {
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the announcement becomes active."
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the announcement expires."
          },
          "title": {
            "type": "string",
            "description": "The headline of the announcement."
          },
          "body": {
            "$ref": "#/components/schemas/StructuredText"
          },
          "emoji": {
            "type": "string",
            "description": "An emoji used to indicate the nature of the announcement."
          },
          "thumbnail": {
            "$ref": "#/components/schemas/Thumbnail"
          },
          "banner": {
            "$ref": "#/components/schemas/Thumbnail",
            "description": "Optional variant of thumbnail cropped for header background."
          },
          "audienceFilters": {
            "type": "array",
            "description": "Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          },
          "sourceDocumentId": {
            "type": "string",
            "description": "The Document ID of the Source Document this Announcement was created from (e.g. Slack thread)."
          },
          "hideAttribution": {
            "type": "boolean",
            "description": "Whether or not to hide an author attribution."
          },
          "channel": {
            "type": "string",
            "enum": [
              "MAIN",
              "SOCIAL_FEED"
            ],
            "description": "This determines whether this is a Social Feed post or a regular announcement."
          },
          "isPrioritized": {
            "type": "boolean",
            "description": "Used by the Social Feed to pin posts to the front of the feed."
          },
          "viewUrl": {
            "type": "string",
            "description": "Url for viewing the announcement. It will be set to document url for announcements from other datasources e.g. simpplr. Can only be written when channel=\"SOCIAL_FEED\"."
          }
        }
      },
      "AnnouncementCreateOrUpdateData": {
        "required": [
          "title",
          "endTime"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "If editing an existing announcement, the announcement's ID."
          },
          "title": {
            "type": "string",
            "description": "The headline of the announcement."
          },
          "structuredText": {
            "$ref": "#/components/schemas/StructuredText"
          },
          "emoji": {
            "type": "string",
            "description": "An emoji used to indicate the nature of the announcement."
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the announcement becomes active. If omitted, the announement will become active immediately."
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the announcement expires."
          },
          "audienceFilters": {
            "type": "array",
            "description": "Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          }
        }
      },
      "CreateAnnouncementRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "title",
              "startTime",
              "endTime"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/AnnouncementCreateOrUpdateData",
                "description": "DEPRECATED - use AnnouncementMutableProperties instead.",
                "deprecated": true
              }
            }
          }
        ]
      },
      "DraftProperties": {
        "properties": {
          "draftId": {
            "type": "integer",
            "description": "The opaque id of the associated draft."
          }
        },
        "example": {
          "draftId": 342
        }
      },
      "UserActivity": {
        "properties": {
          "actor": {
            "$ref": "#/components/schemas/Person"
          },
          "timestamp": {
            "type": "integer",
            "description": "Unix timestamp of the activity (in seconds since epoch UTC)."
          },
          "action": {
            "type": "string",
            "enum": [
              "ADD",
              "ADD_REMINDER",
              "CLICK",
              "COMMENT",
              "DELETE",
              "DISMISS",
              "EDIT",
              "MENTION",
              "MOVE",
              "OTHER",
              "RESTORE",
              "UNKNOWN",
              "VERIFY",
              "VIEW"
            ],
            "description": "The action for the activity"
          },
          "aggregateVisitCount": {
            "$ref": "#/components/schemas/CountInfo"
          }
        }
      },
      "Announcement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          {
            "$ref": "#/components/schemas/DraftProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The opaque id of the announcement."
              },
              "author": {
                "$ref": "#/components/schemas/Person"
              },
              "createTimestamp": {
                "type": "integer",
                "description": "Server Unix timestamp of the creation time (in seconds since epoch UTC)."
              },
              "lastUpdateTimestamp": {
                "type": "integer",
                "description": "Server Unix timestamp of the last update time (in seconds since epoch UTC)."
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "viewerInfo": {
                "type": "object",
                "properties": {
                  "isDismissed": {
                    "type": "boolean",
                    "description": "Whether the viewer has dismissed the announcement."
                  },
                  "isRead": {
                    "type": "boolean",
                    "description": "Whether the viewer has read the announcement."
                  },
                  "userActivity": {
                    "type": "array",
                    "deprecated": true,
                    "description": "A list of actions the viewer has taken on the announcement (e.g. view, dismiss).",
                    "items": {
                      "$ref": "#/components/schemas/UserActivity"
                    }
                  }
                }
              },
              "sourceDocument": {
                "$ref": "#/components/schemas/Document",
                "description": "The source document if the announcement is created from one."
              },
              "isPublished": {
                "type": "boolean",
                "description": "Whether or not the announcement is published."
              }
            }
          }
        ]
      },
      "AddedCollections": {
        "properties": {
          "addedCollections": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "IDs of collections to which a document is added."
          }
        }
      },
      "AnswerCreationData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerMutableProperties"
          },
          {
            "$ref": "#/components/schemas/AddedCollections"
          },
          {
            "type": "object",
            "properties": {
              "combinedAnswerText": {
                "$ref": "#/components/schemas/StructuredTextMutableProperties"
              }
            }
          }
        ]
      },
      "CreateAnswerRequest": {
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AnswerCreationData"
          }
        }
      },
      "CreateAuthTokenResponse": {
        "required": [
          "token",
          "expirationTime"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "An authentication token that can be passed to any endpoint via Bearer Authentication"
          },
          "expirationTime": {
            "description": "Unix timestamp for when this token expires (in seconds since epoch UTC).",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "DeleteAnnouncementRequest": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The opaque id of the announcement to be deleted."
          }
        }
      },
      "DeleteAnswerRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerId"
          },
          {
            "$ref": "#/components/schemas/AnswerDocId"
          },
          {
            "type": "object",
            "required": [
              "id"
            ]
          }
        ]
      },
      "RemovedCollections": {
        "properties": {
          "removedCollections": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "IDs of collections from which a document is removed."
          }
        }
      },
      "EditAnswerRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerId"
          },
          {
            "$ref": "#/components/schemas/AnswerDocId"
          },
          {
            "$ref": "#/components/schemas/AnswerMutableProperties"
          },
          {
            "$ref": "#/components/schemas/AddedCollections"
          },
          {
            "$ref": "#/components/schemas/RemovedCollections"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "combinedAnswerText": {
                "$ref": "#/components/schemas/StructuredTextMutableProperties"
              }
            }
          }
        ]
      },
      "ListAnswersRequest": {
        "properties": {
          "boardId": {
            "type": "integer",
            "description": "The Answer Board Id to list answers on."
          }
        }
      },
      "AnswerResult": {
        "required": [
          "answer"
        ],
        "properties": {
          "answer": {
            "$ref": "#/components/schemas/Answer"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular answer. To be used for /feedback reporting."
          }
        }
      },
      "ListAnswersResponse": {
        "required": [
          "answers",
          "answerResults"
        ],
        "properties": {
          "answerResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerResult"
            },
            "description": "List of answers with tracking tokens."
          },
          "userRole": {
            "type": "string",
            "enum": [
              "REGULAR",
              "ANSWER_MODERATOR"
            ],
            "description": "DEPRECATED - use permissions instead. User's role for Answers in their workplace.",
            "deprecated": true
          }
        }
      },
      "CreateCollectionRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "newNextItemId": {
                "type": "string",
                "description": "The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection. Only used if parentId is specified."
              }
            }
          }
        ]
      },
      "CollectionError": {
        "required": [
          "errorCode"
        ],
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "NAME_EXISTS",
              "NOT_FOUND",
              "COLLECTION_PINNED",
              "CONCURRENT_HIERARCHY_EDIT",
              "HEIGHT_VIOLATION",
              "WIDTH_VIOLATION",
              "NO_PERMISSIONS"
            ]
          }
        }
      },
      "CreateCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Collection"
          },
          {
            "$ref": "#/components/schemas/CollectionError"
          },
          {
            "type": "object",
            "properties": {
              "collection": {
                "$ref": "#/components/schemas/Collection"
              },
              "error": {
                "$ref": "#/components/schemas/CollectionError"
              }
            }
          }
        ]
      },
      "ListCollectionsRequest": {
        "properties": {
          "includeAudience": {
            "type": "boolean",
            "description": "Whether to include the audience filters with the listed collections."
          },
          "includeRoles": {
            "type": "boolean",
            "description": "Whether to include the editor roles with the listed collections."
          },
          "allowedDatasource": {
            "type": "string",
            "description": "The datasource type this collection can hold.\nANSWERS - for collections representing answer boards"
          }
        }
      },
      "ListCollectionsResponse": {
        "required": [
          "collections"
        ],
        "properties": {
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collection"
            },
            "description": "List of all collections, no collection items are fetched."
          }
        }
      },
      "VerifyRequest": {
        "required": [
          "documentId"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "description": "The document which is verified."
          },
          "action": {
            "type": "string",
            "enum": [
              "VERIFY",
              "DEPRECATE",
              "UNVERIFY"
            ],
            "description": "The verification action requested."
          }
        }
      },
      "ReminderRequest": {
        "required": [
          "documentId"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "description": "The document which the verification is for new reminders and/or update."
          },
          "assignee": {
            "type": "string",
            "description": "The obfuscated id of the person this verification is assigned to."
          },
          "remindInDays": {
            "type": "integer",
            "description": "Reminder for the next verifications in terms of days. For deletion, this will be omitted."
          },
          "reason": {
            "type": "string",
            "description": "An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, \"Duplicate\", \"Incomplete\", \"Incorrect\")."
          }
        }
      },
      "VerificationFeed": {
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Verification"
            },
            "description": "List of document infos that include verification related information for them."
          }
        }
      },
      "CreateShortcutRequest": {
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShortcutMutableProperties"
          }
        }
      },
      "ShortcutError": {
        "properties": {
          "errorType": {
            "type": "string",
            "enum": [
              "NO_PERMISSION",
              "INVALID_ID",
              "EXISTING_SHORTCUT"
            ]
          }
        }
      },
      "CreateShortcutResponse": {
        "properties": {
          "shortcut": {
            "$ref": "#/components/schemas/Shortcut"
          },
          "error": {
            "$ref": "#/components/schemas/ShortcutError"
          }
        }
      },
      "ActivityEventParams": {
        "properties": {
          "bodyContent": {
            "description": "The HTML content of the page body.",
            "type": "string"
          },
          "datasourceInstance": {
            "type": "string",
            "description": "The full datasource instance name inferred from the URL of the event"
          },
          "datasource": {
            "type": "string",
            "description": "The datasource without the instance inferred from the URL of the event"
          },
          "instanceOnlyName": {
            "type": "string",
            "description": "The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event"
          },
          "duration": {
            "description": "Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.",
            "type": "integer"
          },
          "query": {
            "description": "The user's search query associated with a SEARCH.",
            "type": "string"
          },
          "referrer": {
            "description": "The referring URL of the VIEW or SEARCH.",
            "type": "string"
          },
          "title": {
            "description": "The page title associated with the URL of the event",
            "type": "string"
          },
          "truncated": {
            "description": "Indicates that the params are incomplete and more params may be sent with the same action+timestamp+url in the future. This is used for sending the duration when a VIEW is finished.",
            "type": "boolean"
          }
        }
      },
      "ActivityEvent": {
        "required": [
          "action",
          "source",
          "timestamp",
          "url"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "The type of activity this represents.\nCRAWL - Represents an explicit request to index the given `url` along with associated attributes in this payload. HISTORICAL_SEARCH - Represents a search performed at the given `url` as indicated by the user's history. HISTORICAL_VIEW - Represents a visit to the given `url` as indicated by the user's history. SEARCH - Represents a search performed at the given `url`. VIEW - Represents a visit to the given `url`. EDIT - Represents an edit of the document represented by the `url`. COMMENT - Represents a comment on the document represented by the `url`.",
            "enum": [
              "CRAWL",
              "HISTORICAL_SEARCH",
              "HISTORICAL_VIEW",
              "SEARCH",
              "VIEW",
              "EDIT",
              "COMMENT"
            ]
          },
          "params": {
            "$ref": "#/components/schemas/ActivityEventParams"
          },
          "source": {
            "type": "string",
            "description": "Identifies the type of client that is reporting the activity.",
            "enum": [
              "EMBEDDED_SEARCH",
              "EXTENSION",
              "REST_ENDPOINT"
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "The ISO 8601 timestamp when the activity began.",
            "format": "date-time"
          },
          "url": {
            "description": "The url of the activity.",
            "type": "string"
          }
        }
      },
      "User": {
        "properties": {
          "userID": {
            "description": "An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).",
            "type": "string"
          },
          "origID": {
            "description": "An opaque user ID for the authenticated user (ignores actas).",
            "type": "string"
          }
        }
      },
      "Activity": {
        "required": [
          "events"
        ],
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityEvent"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "example": {
          "events": [
            {
              "url": "https://example.com/",
              "action": "HISTORICAL_VIEW",
              "timestamp": "2000-01-23T04:56:07.000Z"
            },
            {
              "url": "https://example.com/search?q=query",
              "action": "SEARCH",
              "timestamp": "2000-01-23T04:56:07.000Z",
              "params": {
                "query": "query"
              }
            },
            {
              "url": "https://example.com/",
              "action": "VIEW",
              "timestamp": "2000-01-23T04:56:07.000Z",
              "params": {
                "duration": 20,
                "referrer": "https://example.com/document"
              }
            }
          ]
        }
      },
      "ManualFeedbackInfo": {
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event."
          },
          "source": {
            "type": "string",
            "description": "The source associated with the Feedback.event.MANUAL_FEEDBACK event.",
            "enum": [
              "SEARCH",
              "FEED",
              "Q_AND_A",
              "GENERATED_Q_AND_A",
              "SUMMARY",
              "EXPERT_DETECTION"
            ]
          },
          "issue": {
            "type": "string",
            "description": "The issue the user indicated in the feedback."
          },
          "query": {
            "type": "string",
            "description": "The query associated with the Feedback.event.MANUAL_FEEDBACK event."
          },
          "obscuredQuery": {
            "type": "string",
            "description": "The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only."
          },
          "activeTab": {
            "type": "string",
            "description": "Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only."
          },
          "comments": {
            "type": "string",
            "description": "The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events."
          },
          "searchResults": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The array of search result docIds, ordered by top to bottom result."
          },
          "numQueriesFromFirstRun": {
            "type": "integer",
            "description": "How many times this query has been run in the past."
          }
        }
      },
      "SeenFeedbackInfo": {
        "properties": {
          "isExplicit": {
            "type": "boolean",
            "description": "The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction."
          }
        }
      },
      "UserViewInfo": {
        "properties": {
          "docId": {
            "type": "string",
            "description": "Unique identifier of associated document"
          },
          "docTitle": {
            "type": "string",
            "description": "Title of associated document"
          },
          "docUrl": {
            "type": "string",
            "description": "URL of associated document"
          }
        }
      },
      "Feedback": {
        "required": [
          "event",
          "trackingTokens"
        ],
        "properties": {
          "category": {
            "type": "string",
            "description": "The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.",
            "enum": [
              "ANNOUNCEMENT",
              "AUTOCOMPLETE",
              "COLLECTIONS",
              "FEED",
              "SEARCH",
              "CHAT"
            ]
          },
          "trackingTokens": {
            "type": "array",
            "description": "A list of server-generated trackingTokens to which this event applies.",
            "items": {
              "type": "string"
            }
          },
          "event": {
            "type": "string",
            "description": "The action the user took within a Glean client with respect to the object referred to by the given `trackingToken``.\nCLICK - The object's primary link was clicked with the intent to view its full representation. Depending on the object type, this may imply an external navigation or navigating to a new page or view within the Glean app. CONTAINER_CLICK - A link to the object's parent container (e.g. the folder in which it's located) was clicked. COPY_LINK - The user copied a link to the primary link. CREATE - The user creates a document. DISMISS - The user dismissed the object such that it was hidden from view. DOWNVOTE - The user gave feedback that the object was not useful. EMAIL - The user attempted to send an email. FOCUS_IN - The user clicked into an interactive element, e.g. the search box. MANUAL_FEEDBACK - The user submitted textual manual feedback regarding the object. MESSAGE - The user attempted to send a message using their default messaing app. MIDDLE_CLICK - The user middle clicked the object's primary link with the intent to open its full representation in a new tab. PREVIEW - The user clicked the object's inline preview affordance. RIGHT_CLICK - The user right clicked the object's primary link. This may indicate an intent to open it in a new tab or copy it. SECTION_CLICK - The user clicked a link to a subsection of the primary object. SEEN - The user has likely seen the object (e.g. took action to make the object visible within the user's viewport). SHARE - The user shared the object with another user. SHOW_MORE - The user clicked the object's show more affordance. UPVOTE - The user gave feedback that the object was useful. VIEW - The object was visible within the user's viewport. VISIBLE - The object was visible within the user's viewport.",
            "enum": [
              "CLICK",
              "CONTAINER_CLICK",
              "COPY_LINK",
              "CREATE",
              "DISMISS",
              "DOWNVOTE",
              "EMAIL",
              "FOCUS_IN",
              "MANUAL_FEEDBACK",
              "MESSAGE",
              "MIDDLE_CLICK",
              "PREVIEW",
              "RELATED_CLICK",
              "RIGHT_CLICK",
              "SECTION_CLICK",
              "SEEN",
              "SHARE",
              "SHOW_MORE",
              "UPVOTE",
              "VIEW",
              "VISIBLE"
            ]
          },
          "position": {
            "type": "integer",
            "description": "Position of the element in the case that the client controls order (such as feed and autocomplete)."
          },
          "payload": {
            "type": "string",
            "description": "For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content."
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          },
          "timestamp": {
            "type": "string",
            "description": "The ISO 8601 timestamp when the event occured.",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "pathname": {
            "type": "string",
            "description": "The path the client was at when the feedback event triggered."
          },
          "channels": {
            "type": "array",
            "description": "Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.",
            "items": {
              "type": "string",
              "enum": [
                "COMPANY",
                "GLEAN"
              ]
            }
          },
          "url": {
            "type": "string",
            "description": "The url the client was at when the feedback event triggered."
          },
          "uiElement": {
            "type": "string",
            "description": "The UI element associated with the event, if any."
          },
          "manualFeedbackInfo": {
            "$ref": "#/components/schemas/ManualFeedbackInfo"
          },
          "seenFeedbackInfo": {
            "$ref": "#/components/schemas/SeenFeedbackInfo"
          },
          "userViewInfo": {
            "$ref": "#/components/schemas/UserViewInfo"
          }
        },
        "example": {
          "trackingTokens": [
            "trackingTokens"
          ],
          "event": "VIEW"
        }
      },
      "PeopleRequest": {
        "type": "object",
        "properties": {
          "timezoneOffset": {
            "type": "integer",
            "description": "The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."
          },
          "obfuscatedIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The Person IDs to retrieve. If no IDs are requested, the current user's details are returned."
          },
          "emailIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds."
          },
          "includeFields": {
            "description": "List of PersonMetadata fields to return (that aren't returned by default)",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BADGES",
                "BUSY_EVENTS",
                "DOCUMENT_ACTIVITY",
                "INVITE_INFO",
                "PEOPLE_DISTANCE",
                "PERMISSIONS",
                "PEOPLE_DETAILS",
                "MANAGEMENT_DETAILS",
                "PEOPLE_PROFILE_SETTINGS",
                "PEOPLE_WITHOUT_MANAGER"
              ]
            }
          },
          "source": {
            "type": "string",
            "description": "A string denoting the search surface from which the endpoint is called."
          }
        },
        "example": {
          "obfuscatedIds": [
            "abc123",
            "abc456"
          ]
        }
      },
      "PeopleResponse": {
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "A Person for each ID in the request, each with PersonMetadata populated."
          },
          "relatedDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocuments"
            },
            "description": "A list of documents related to this people response. This is only included if DOCUMENT_ACTIVITY is requested and only 1 person is included in the request."
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of IDs that could not be found."
          }
        }
      },
      "PinRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PinDocumentMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "documentId": {
                "type": "string",
                "description": "The document to be pinned."
              }
            }
          }
        ]
      },
      "Unpin": {
        "properties": {
          "pinId": {
            "type": "integer",
            "description": "DEPRECATED - Prefer use of `id`"
          },
          "id": {
            "type": "string",
            "description": "The opaque id of the pin to be unpinned."
          }
        }
      },
      "UpdateAnnouncementRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "id",
              "title",
              "startTime",
              "endTime"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The opaque id of the announcement."
              },
              "data": {
                "$ref": "#/components/schemas/AnnouncementCreateOrUpdateData",
                "description": "DEPRECATED - use AnnouncementMutableProperties instead.",
                "deprecated": true
              }
            }
          }
        ]
      },
      "GetPinRequest": {
        "properties": {
          "pinId": {
            "type": "integer",
            "description": "DEPRECATED - Prefer use of `id`"
          },
          "id": {
            "type": "string",
            "description": "The opaque id of the pin to be fetched"
          }
        }
      },
      "GetPinResponse": {
        "properties": {
          "pin": {
            "$ref": "#/components/schemas/PinDocument"
          }
        }
      },
      "ListPinsResponse": {
        "required": [
          "pins"
        ],
        "properties": {
          "pins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PinDocument"
            },
            "description": "List of pinned documents."
          }
        }
      },
      "EditPinRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PinDocumentMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "pinId": {
                "type": "integer",
                "description": "DEPRECATED - Prefer use of `id`"
              },
              "id": {
                "type": "string",
                "description": "The opaque id of the pin to be edited"
              }
            }
          }
        ]
      },
      "SortOptions": {
        "type": "object",
        "properties": {
          "orderBy": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          "sortBy": {
            "type": "string"
          }
        }
      },
      "ListEntitiesRequest": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          },
          "sort": {
            "description": "Use EntitiesSortOrder enum for SortOptions.sortBy",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortOptions"
            }
          },
          "entityType": {
            "type": "string",
            "default": "PEOPLE",
            "enum": [
              "PEOPLE",
              "TEAMS",
              "CUSTOM_ENTITIES"
            ]
          },
          "datasource": {
            "type": "string",
            "description": "The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES"
          },
          "query": {
            "type": "string",
            "description": "A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities."
          },
          "sc": {
            "type": "string",
            "example": "db.enable_debug=true, db.log_elastic_caller=ENTITY",
            "description": "Debug only search params to to change the flow of control in request handling. It will be passed around service boundaries/endpoints. For more details, https://docs.google.com/document/d/1e6taTfWUL8KNUC9de8kmmG2MG2L6cTx4ulOJfAshDTM/edit. Requires sufficient permissions."
          },
          "includeFields": {
            "description": "List of entity fields to return (that aren't returned by default)",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PEOPLE",
                "TEAMS",
                "PEOPLE_DISTANCE",
                "PERMISSIONS",
                "FACETS",
                "INVITE_INFO",
                "LAST_EXTENSION_USE",
                "MANAGEMENT_DETAILS",
                "UNPROCESSED_TEAMS"
              ]
            }
          },
          "pageSize": {
            "type": "integer",
            "example": 100,
            "description": "Hint to the server about how many results to send back. Server may return less."
          },
          "cursor": {
            "type": "string",
            "description": "Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."
          },
          "source": {
            "type": "string",
            "description": "A string denoting the search surface from which the endpoint is called."
          }
        }
      },
      "EntitiesSortOrder": {
        "type": "string",
        "description": "Different ways of sorting entities",
        "enum": [
          "ENTITY_NAME",
          "FIRST_NAME",
          "LAST_NAME",
          "ORG_SIZE_COUNT",
          "START_DATE",
          "TEAM_SIZE",
          "RELEVANCE"
        ]
      },
      "ListEntitiesResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "teamResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "customEntityResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntity"
            }
          },
          "facetResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetResult"
            }
          },
          "cursor": {
            "type": "string",
            "description": "Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of entities available"
          },
          "hasMoreResults": {
            "type": "boolean",
            "description": "Whether or not more entities can be fetched."
          },
          "sortOptions": {
            "type": "array",
            "description": "Sort options from EntitiesSortOrder supported for this response. Default is empty list.",
            "items": {
              "$ref": "#/components/schemas/EntitiesSortOrder"
            }
          },
          "customFacetNames": {
            "type": "array",
            "description": "list of Person attributes that are custom setup by deployment",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search the index",
        "description": "Retrieves results for the query",
        "operationId": "search",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "description": "Search request",
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "422": {
            "description": "Invalid Query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/autocomplete": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Autocomplete a query",
        "description": "Retrieves query suggestions, operators and documents for the given partially typed query.",
        "operationId": "autocomplete",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteRequest"
              }
            }
          },
          "description": "Autocomplete request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutocompleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Create announcement",
        "description": "Creates a textual announcement visible to some set of users based on department and location.",
        "operationId": "createannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnouncementRequest"
              }
            }
          },
          "description": "Announcement content",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createanswer": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Create answer",
        "description": "Creates a user-generated answer that contains a question and answer.",
        "operationId": "createanswer",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnswerRequest"
              }
            }
          },
          "description": "CreateAnswer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createauthtoken": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Creates an authentication token for authenticated user",
        "description": "Creates an authentication token for the authenticated user",
        "operationId": "createauthtoken",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deleteannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Delete announcement",
        "description": "Deletes an existing user-generated announcement.",
        "operationId": "deleteannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAnnouncementRequest"
              }
            }
          },
          "description": "Delete announcement request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deleteanswer": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Delete answer",
        "description": "Deletes an existing user-generated answer.",
        "operationId": "deleteanswer",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAnswerRequest"
              }
            }
          },
          "description": "DeleteAnswer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/editanswer": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Edit answer",
        "description": "Edits an existing user-generated answer.",
        "operationId": "editanswer",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditAnswerRequest"
              }
            }
          },
          "description": "EditAnswer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listanswers": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "List answers created by the authed user",
        "description": "Lists answers created by the authed user.",
        "operationId": "listanswers",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListAnswersRequest"
              }
            }
          },
          "description": "ListAnswers request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAnswersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createcollection": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create a collection",
        "description": "Creates a publicly visible (empty) collection of documents.",
        "operationId": "createcollection",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              }
            }
          },
          "description": "Collection content plus any additional metadata for the request.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "422": {
            "description": "Semantic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionError"
                }
              }
            }
          }
        }
      }
    },
    "/listcollections": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "List collections",
        "description": "Lists all existing collections",
        "operationId": "listcollections",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListCollectionsRequest"
              }
            }
          },
          "description": "ListCollections request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/verify": {
      "post": {
        "tags": [
          "Verification"
        ],
        "summary": "Update verification",
        "description": "Verify documents to keep the knowledge up to date within customer corpus.",
        "operationId": "verify",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          },
          "description": "Details about the verification request.",
          "required": true,
          "x-exportParamName": "VerifyRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verification"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Document does not exist, does not support verification or user cannot access document"
          }
        }
      }
    },
    "/addverificationreminder": {
      "post": {
        "tags": [
          "Verification"
        ],
        "summary": "Create verification reminder",
        "description": "Creates a verification reminder for the document. Users can create verification reminders from different product surfaces.",
        "operationId": "addverificationreminder",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderRequest"
              }
            }
          },
          "description": "Details about the reminder.",
          "required": true,
          "x-exportParamName": "ReminderRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verification"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Document does not exist, does not support verification or user cannot access document"
          }
        }
      }
    },
    "/listverifications": {
      "post": {
        "tags": [
          "Verification"
        ],
        "summary": "List verifications",
        "description": "Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications.",
        "operationId": "listverifications",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "description": "Maximum number of documents to return",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationFeed"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createshortcut": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "Create shortcut",
        "description": "Creates a user-generated shortcut that contains a alias and destination url.",
        "operationId": "createshortcut",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortcutRequest"
              }
            }
          },
          "description": "CreateShortcut request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateShortcutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/activity": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Report activity of enterprise app usage",
        "description": "Reporting for any events that happen outside of the client UI, such as enterprise app usage.",
        "operationId": "activity",
        "x-codegen-request-body-name": "payload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Activity"
              }
            }
          },
          "required": true,
          "x-exportParamName": "Activity"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Report user events such as clicks or views",
        "description": "Reporting for events that happen within the client UI, such as result views and clicks.",
        "operationId": "feedback",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "name": "feedback",
            "in": "query",
            "description": "A URL encoded versions of Feedback. This is useful for requests.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            }
          },
          "x-exportParamName": "Feedback"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/people": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read people details",
        "description": "Retrieves people details for given ids",
        "operationId": "people",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeopleRequest"
              }
            }
          },
          "description": "People request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/pin": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "Create pin",
        "description": "Pin a document as a result for a given search query.Pin results that are known to be a good match.",
        "operationId": "pin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinRequest"
              }
            }
          },
          "description": "Details about the document and query for the pin.",
          "required": true,
          "x-exportParamName": "PinDocument"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinDocument"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/unpin": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "Delete pin",
        "description": "Unpin a previously pinned result.",
        "operationId": "unpin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unpin"
              }
            }
          },
          "description": "Details about the pin being unpinned.",
          "required": true,
          "x-exportParamName": "Unpin"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden from unpinning someone else's pin"
          }
        }
      }
    },
    "/updateannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Update announcement",
        "description": "Updates a textual announcement visible to some set of users based on department and location.",
        "operationId": "updateannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnouncementRequest"
              }
            }
          },
          "description": "Announcement content. Id need to be specified for the announcement.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getpin": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "Read pin details.",
        "description": "Gets a pin given its ID.",
        "operationId": "getpin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPinRequest"
              }
            }
          },
          "description": "Get pin request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPinResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listpins": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "List all pins.",
        "description": "Lists all pins.",
        "operationId": "listpins",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "List pins request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/editpin": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "Edit a pin",
        "description": "Edit an existing user-generated pin.",
        "operationId": "editpin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPinRequest"
              }
            }
          },
          "description": "Edit pins request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinDocument"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listentities": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "List entities",
        "description": "Retrieves some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS.",
        "operationId": "listentities",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListEntitiesRequest"
              }
            }
          },
          "description": "List people request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEntitiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    }
  }
}