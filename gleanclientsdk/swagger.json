{
  "openapi": "3.0.0",
  "info": {
    "version": "0.9.0",
    "title": "Glean Client API - Platform Preview",
    "contact": {
      "email": "support@glean.com"
    },
    "description": "# Introduction\nThese are all the APIs used by Glean to implement the Glean client. These are available as platform preview for\nimplementing a custom client to the Glean system.\n\n# Usage guidelines\nA subset of these endpoints are also in the developer ready section, which is available for public use.\nThe rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com\nif you would like to use an API that is not currently available in the developer ready section.\n"
  },
  "tags": [
    {
      "name": "Activity",
      "description": "Report user activity to improve search quality."
    },
    {
      "name": "Announcements",
      "description": "Create, read, update, and delete announcements."
    },
    {
      "name": "Answers",
      "description": "Create, read, update, and delete answers."
    },
    {
      "name": "Answer Boards",
      "description": "Group answers into answer boards."
    },
    {
      "name": "Authentication",
      "description": "Authenticating users and token management."
    },
    {
      "name": "Collections",
      "description": "Group documents into collections."
    },
    {
      "name": "Displayable Lists",
      "description": "Displayable List card platform."
    },
    {
      "name": "External Document Proxy",
      "description": "Proxy for requesting documents from a customer's server."
    },
    {
      "name": "Images",
      "description": "Upload, get images."
    },
    {
      "name": "Insights",
      "description": "Usage insights for privileged users."
    },
    {
      "name": "Permissions",
      "description": "Manage user permissions for specific features"
    },
    {
      "name": "Pins",
      "description": "Pin and star search results."
    },
    {
      "name": "Search",
      "description": "Search, autocomplete and metadata retrieval."
    },
    {
      "name": "Shortcuts",
      "description": "Create, read, update, and delete shortcuts."
    },
    {
      "name": "User",
      "description": "User settings, configuration, invitation, etc."
    },
    {
      "name": "Verification",
      "description": "Document verification status and update."
    }
  ],
  "paths": {
    "/activity": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Report activity of enterprise app usage",
        "description": "Reporting for any events that happen outside of the client UI, such as enterprise app usage.",
        "operationId": "activity",
        "x-codegen-request-body-name": "payload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Activity"
              }
            }
          },
          "required": true,
          "x-exportParamName": "Activity"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/ca": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Report client events such as clicks, views, impressions or any other product interactions.",
        "description": "Reporting for events that happen within the client UI, such as result views and clicks and impressions for product usage.",
        "operationId": "ca",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientAnalyticsRequest"
              }
            }
          },
          "x-exportParamName": "CA"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "202": {
            "description": "Accepted."
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/custom_feedback": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Reports arbitrary customer-defined feedback",
        "description": "Reporting from customers, usually for bugs or search quality",
        "operationId": "customfeedback",
        "x-codegen-request-body-name": "payload",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {},
              "example": {
                "arbitrary": "jsonData",
                "for": "myCompany",
                "comment": "Glean is awesome!"
              }
            }
          },
          "description": "Arbitrary customer-defined JSON",
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request. Handler for custom feedback may not have been implemented."
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/feedback": {
      "post": {
        "tags": [
          "Activity"
        ],
        "summary": "Report user events such as clicks or views",
        "description": "Reporting for events that happen within the client UI, such as result views and clicks.",
        "operationId": "feedback",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "name": "feedback",
            "in": "query",
            "description": "A URL encoded versions of Feedback. This is useful for requests.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Feedback"
              }
            }
          },
          "x-exportParamName": "Feedback"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Create announcement",
        "description": "Creates a textual announcement visible to some set of users based on department and location.",
        "operationId": "createannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnnouncementRequest"
              }
            }
          },
          "description": "Announcement content",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createdraftannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Create a draft announcement",
        "description": "Creates a draft of a textual announcement visible to some set of users based on department and location.",
        "operationId": "createdraftannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDraftAnnouncementRequest"
              }
            }
          },
          "description": "Draft announcement content",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deleteannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Delete announcement",
        "description": "Deletes an existing user-generated announcement.",
        "operationId": "deleteannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAnnouncementRequest"
              }
            }
          },
          "description": "Delete announcement request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deletedraftannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Delete draft announcement",
        "description": "Deletes an existing user-generated draft announcement.",
        "operationId": "deletedraftannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAnnouncementRequest"
              }
            }
          },
          "description": "Delete draft announcement request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Read announcement details.",
        "description": "Gets a announcement given its ID.",
        "operationId": "getannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAnnouncementRequest"
              }
            }
          },
          "description": "GetAnnouncement request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnnouncementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getdraftannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Get draft announcement",
        "description": "Gets an existing user-generated draft announcement.",
        "operationId": "getdraftannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAnnouncementRequest"
              }
            }
          },
          "description": "Get draft announcement request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDraftAnnouncementResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listannouncements": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "List announcements",
        "description": "Returns the information to be rendered in announcements dashboard. Includes information for each annoucement asked.",
        "operationId": "listannouncements",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListAnnouncementsRequest"
              }
            }
          },
          "description": "Includes request params for querying announcements.",
          "required": true,
          "x-exportParamName": "ListAnnouncementsRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAnnouncementsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/previewannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Preview announcement",
        "description": "Generates a preview for a user-generated announcement from structured text.",
        "operationId": "previewannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewStructuredTextRequest"
              }
            }
          },
          "description": "preview structured text request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewStructuredTextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/previewannouncementdraft": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Preview announcement",
        "description": "Generates a preview for a user-generated announcement from a draft.",
        "operationId": "previewannouncementdraft",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewUgcRequest"
              }
            }
          },
          "description": "preview announcement request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewUgcResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/publishdraftannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Publish a draft announcement",
        "description": "Promotes a draft announcement to be visible to others.",
        "operationId": "publishdraftannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublishDraftAnnouncementRequest"
              }
            }
          },
          "description": "Publish draft announcement content.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/unpublishannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Unpublishes an announcement",
        "description": "Unpublishes an announcement and hides it from users",
        "operationId": "unpublishannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnpublishAnnouncementRequest"
              }
            }
          },
          "description": "Unpublish announcement content.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/updateannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Update announcement",
        "description": "Updates a textual announcement visible to some set of users based on department and location.",
        "operationId": "updateannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnnouncementRequest"
              }
            }
          },
          "description": "Announcement content. Id need to be specified for the announcement.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/updatedraftannouncement": {
      "post": {
        "tags": [
          "Announcements"
        ],
        "summary": "Update draft announcement",
        "description": "Updates a textual announcement visible to some set of users based on department and location.",
        "operationId": "updatedraftannouncement",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDraftAnnouncementRequest"
              }
            }
          },
          "description": "Draft announcement content. DraftId needs to be specified.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Announcement"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createanswer": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Create answer",
        "description": "Creates a user-generated answer that contains a question and answer.",
        "operationId": "createanswer",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnswerRequest"
              }
            }
          },
          "description": "CreateAnswer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deleteanswer": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Delete answer",
        "description": "Deletes an existing user-generated answer.",
        "operationId": "deleteanswer",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAnswerRequest"
              }
            }
          },
          "description": "DeleteAnswer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/editanswer": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Edit answer",
        "description": "Edits an existing user-generated answer.",
        "operationId": "editanswer",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditAnswerRequest"
              }
            }
          },
          "description": "EditAnswer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Answer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getanswer": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Read answer details",
        "description": "Gets a particular answer given its ID.",
        "operationId": "getanswer",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAnswerRequest"
              }
            }
          },
          "description": "GetAnswer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnswerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listanswers": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "List answers created by the authed user",
        "description": "Lists answers created by the authed user.",
        "operationId": "listanswers",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListAnswersRequest"
              }
            }
          },
          "description": "ListAnswers request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAnswersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/previewanswer": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Preview answer",
        "description": "Creates a user-generated answer that contains a question and answer.",
        "operationId": "previewanswer",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewStructuredTextRequest"
              }
            }
          },
          "description": "PreviewAnswer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewStructuredTextResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/previewanswerdraft": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Preview Answer",
        "description": "Generates a preview for a user-generated answer from a draft.",
        "operationId": "previewanswerdraft",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PreviewUgcRequest"
              }
            }
          },
          "description": "preview answer request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewUgcResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/updateanswerlikes": {
      "post": {
        "tags": [
          "Answers"
        ],
        "summary": "Update answer likes",
        "description": "Updates the likes for an existing user-generated answer. Examples are liking or unliking the answer.",
        "operationId": "updateanswerlikes",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAnswerLikesRequest"
              }
            }
          },
          "description": "UpdateAnswerLikes request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateAnswerLikesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createanswerboard": {
      "post": {
        "tags": [
          "Answer Boards"
        ],
        "summary": "Create an Answer Board",
        "description": "Creates a board of answers.",
        "operationId": "createanswerboard",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAnswerBoardRequest"
              }
            }
          },
          "description": "Answer Board content plus any additional metadata for the request.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAnswerBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deleteanswerboards": {
      "post": {
        "tags": [
          "Answer Boards"
        ],
        "summary": "Delete an Answer Board",
        "description": "Deletes an Answer Board given the Answer Board's ID. Multi-delete is not currently supported.",
        "operationId": "deleteanswerboards",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteAnswerBoardsRequest"
              }
            }
          },
          "description": "DeleteAnswerBoards request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteAnswerBoardsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/editanswerboard": {
      "post": {
        "tags": [
          "Answer Boards"
        ],
        "summary": "Edit an Answer Board",
        "description": "Modifies the properties of an existing Answer Board.",
        "operationId": "editanswerboard",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditAnswerBoardRequest"
              }
            }
          },
          "description": "Answer Board content plus any additional metadata for the request.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditAnswerBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getanswerboard": {
      "post": {
        "tags": [
          "Answer Boards"
        ],
        "summary": "Read Answer Board details, except the Answers in this Answer Board.",
        "description": "Gets an Answer Board given its ID. Does not fetch items in this Answer Board, use /listanswers instead.",
        "operationId": "getanswerboard",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAnswerBoardRequest"
              }
            }
          },
          "description": "GetAnswerBoard request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAnswerBoardResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listanswerboards": {
      "post": {
        "tags": [
          "Answer Boards"
        ],
        "summary": "List Answer Boards",
        "description": "Lists all existing Answer Boards",
        "operationId": "listanswerboards",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListAnswerBoardsRequest"
              }
            }
          },
          "description": "ListAnswerBoards request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListAnswerBoardsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/checkactasauth": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Check authentication status",
        "description": "Check if the client's actas auth token is valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckActasAuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/checkauth": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Check authentication status",
        "description": "Check if the client's auth cookie is valid",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CheckAuthResponse"
                }
              }
            }
          }
        }
      }
    },
    "/createanonymoustoken": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Creates an authentication token for an anonymous user of external search",
        "description": "Creates an authentication token for an anonymous user of external search",
        "operationId": "createanonymoustoken",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "403": {
            "description": "Forbidden. This can be returned if external search for anonymous users is not enabled."
          }
        }
      }
    },
    "/createauthtoken": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Creates an authentication token for authenticated user",
        "description": "Creates an authentication token for the authenticated user",
        "operationId": "createauthtoken",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAuthTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/addcollectionitems": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Add items to a Collection.",
        "description": "Add items to a Collection.",
        "operationId": "addcollectionitems",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCollectionItemsRequest"
              }
            }
          },
          "description": "Data describing the add operation.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddCollectionItemsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createcollection": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Create a collection",
        "description": "Creates a publicly visible (empty) collection of documents.",
        "operationId": "createcollection",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCollectionRequest"
              }
            }
          },
          "description": "Collection content plus any additional metadata for the request.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "422": {
            "description": "Semantic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionError"
                }
              }
            }
          }
        }
      }
    },
    "/deletecollection": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Delete a collection",
        "description": "Deletes a collection given the collection's ID.",
        "operationId": "deletecollection",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCollectionRequest"
              }
            }
          },
          "description": "DeleteCollection request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "422": {
            "description": "Semantic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionError"
                }
              }
            }
          }
        }
      }
    },
    "/deletecollectionitem": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Delete a single item from a Collection.",
        "description": "Delete a single item from a Collection.",
        "operationId": "deletecollectionitem",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCollectionItemRequest"
              }
            }
          },
          "description": "Data describing the delete operation.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteCollectionItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "422": {
            "description": "Failed to save deletion"
          }
        }
      }
    },
    "/editcollection": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Edit a collection",
        "description": "Modifies the properties of an existing collection.",
        "operationId": "editcollection",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCollectionRequest"
              }
            }
          },
          "description": "Collection content plus any additional metadata for the request.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "422": {
            "description": "Semantic error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectionError"
                }
              }
            }
          }
        }
      }
    },
    "/editcollectionitem": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Edit an item in a Collection.",
        "description": "Edit the url, documentId, description of an item within a Collection given its ID.",
        "operationId": "editcollectionitem",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCollectionItemRequest"
              }
            }
          },
          "description": "Edit Collection Items request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditCollectionItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/editdocumentcollections": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Edit document collections.",
        "description": "Edit the collections that a document belongs to.",
        "operationId": "editdocumentcollections",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditDocumentCollectionsRequest"
              }
            }
          },
          "description": "Data describing the edit operation.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditDocumentCollectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getcollection": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Read collection details, except the items in this Collection.",
        "description": "Gets a collection given its ID. Does not fetch items in this Collection.",
        "operationId": "getcollection",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetCollectionRequest"
              }
            }
          },
          "description": "GetCollection request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listcollections": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "List collections",
        "description": "Lists all existing collections",
        "operationId": "listcollections",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListCollectionsRequest"
              }
            }
          },
          "description": "ListCollections request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCollectionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/movecollectionitem": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Change the order of CollecitonItems in a Collection.",
        "description": "Move a CollectionItem below another CollectionItem.",
        "operationId": "movecollectionitem",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MoveCollectionItemRequest"
              }
            }
          },
          "description": "MoveCollectionItems request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MoveCollectionItemResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "422": {
            "description": "Failed to save modifications"
          }
        }
      }
    },
    "/pincollection": {
      "post": {
        "tags": [
          "Collections"
        ],
        "summary": "Pins collection to NTP for the given category.",
        "description": "Given the collection id and category, pins the collection for all company users in NTP.",
        "operationId": "pincollection",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinCollectionRequest"
              }
            }
          },
          "description": "PinCollection request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCollectionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createdisplayablelists": {
      "post": {
        "tags": [
          "Displayable Lists"
        ],
        "summary": "Create new displayable lists",
        "description": "Create displayable list configurations by provided ids",
        "operationId": "createdisplayablelists",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDisplayableListsRequest"
              }
            }
          },
          "description": "Create new displayable lists",
          "required": true,
          "x-exportParamName": "Update"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateDisplayableListsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden from creating displayable list configs"
          }
        }
      }
    },
    "/deletedisplayablelists": {
      "post": {
        "tags": [
          "Displayable Lists"
        ],
        "summary": "Delete displayable lists",
        "description": "Delete displayable list configurations by provided ids",
        "operationId": "deletedisplayablelists",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteDisplayableListsRequest"
              }
            }
          },
          "description": "Updated version of the displayable list configs.",
          "required": true,
          "x-exportParamName": "Update"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden from deleting displayable list configs"
          }
        }
      }
    },
    "/getdisplayablelists": {
      "post": {
        "tags": [
          "Displayable Lists"
        ],
        "summary": "Get displayable lists",
        "description": "Get displayable lists configurations by provided ids",
        "operationId": "getdisplayablelists",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          },
          {
            "$ref": "#/components/parameters/actas"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDisplayableListsRequest"
              }
            }
          },
          "required": true,
          "x-exportParamName": "Get"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDisplayableListsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden from seeing configs"
          }
        }
      }
    },
    "/updatedisplayablelists": {
      "post": {
        "tags": [
          "Displayable Lists"
        ],
        "summary": "Update displayable lists",
        "description": "Update displayable list configurations with all fields from request fields",
        "operationId": "updatedisplayablelists",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDisplayableListsRequest"
              }
            }
          },
          "description": "Updated version of the displayable list configs.",
          "required": true,
          "x-exportParamName": "Update"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateDisplayableListsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden from updating displayable list configs"
          }
        }
      }
    },
    "/images": {
      "get": {
        "tags": [
          "Images"
        ],
        "summary": "Get images",
        "description": "Serves images of various types (profile pic, background, UGC thumnail/content, etc).",
        "operationId": "images",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "in": "query",
            "name": "key",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Primary key for the image being asked. The key is returned by the API when an image is uploaded. If key is used, other parameters should not be used."
          },
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ImageType"
            },
            "required": false,
            "description": "The type of image requested. Supported values are listed in ImageMetadata.type enum."
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "ID, if a specific entity/type is requested. The id may have different meaning for each type. for user, it is user id, for UGC, it is the id of the content, and so on."
          },
          {
            "in": "query",
            "name": "ds",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some."
          },
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty."
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/uploadimage": {
      "post": {
        "tags": [
          "Images"
        ],
        "summary": "upload images",
        "description": "Uploads images for various types (profile pic, background, UGC thumnail/content, etc) with additional metadata.",
        "operationId": "uploadimage",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "schema": {
              "$ref": "#/components/schemas/ImageType"
            },
            "required": false,
            "description": "The type of image requested. Supported values are listed in ImageMetadata.type enum."
          },
          {
            "in": "query",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype."
          },
          {
            "in": "query",
            "name": "ds",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for."
          },
          {
            "in": "query",
            "name": "cid",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty."
          },
          {
            "$ref": "#/components/parameters/eids"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/actas"
          }
        ],
        "requestBody": {
          "content": {
            "image/*": {
              "schema": {
                "type": "string",
                "format": "binary"
              }
            }
          },
          "description": "Content and metadata for the image. Content is in post body, metada is in url.",
          "required": true,
          "x-exportParamName": "UploadImage"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UploadImageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/insights": {
      "post": {
        "tags": [
          "Insights"
        ],
        "summary": "Read insights",
        "description": "Returns the information to be rendered in insights dashboards. Includes information for each user, query, content in aggregations.",
        "operationId": "insights",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InsightsRequest"
              }
            }
          },
          "description": "Includes request params for insights dashboard data.",
          "required": true,
          "x-exportParamName": "InsightsRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InsightsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/editpermissions": {
      "post": {
        "tags": [
          "Permissions"
        ],
        "summary": "Edit permissions",
        "description": "Modifies the permissions for a given user",
        "operationId": "editpermissions",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPermissionsRequest"
              }
            }
          },
          "description": "Permissions",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditPermissionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not authorized"
          }
        }
      }
    },
    "/editpin": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "Edit a pin",
        "description": "Edit an existing user-generated pin.",
        "operationId": "editpin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPinRequest"
              }
            }
          },
          "description": "Edit pins request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinDocument"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getpin": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "Read pin details.",
        "description": "Gets a pin given its ID.",
        "operationId": "getpin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetPinRequest"
              }
            }
          },
          "description": "Get pin request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPinResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listpins": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "List all pins.",
        "description": "Lists all pins.",
        "operationId": "listpins",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "description": "List pins request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListPinsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/pin": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "Create pin",
        "description": "Pin a document as a result for a given search query.Pin results that are known to be a good match.",
        "operationId": "pin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinRequest"
              }
            }
          },
          "description": "Details about the document and query for the pin.",
          "required": true,
          "x-exportParamName": "PinDocument"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinDocument"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/unpin": {
      "post": {
        "tags": [
          "Pins"
        ],
        "summary": "Delete pin",
        "description": "Unpin a previously pinned result.",
        "operationId": "unpin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Unpin"
              }
            }
          },
          "description": "Details about the pin being unpinned.",
          "required": true,
          "x-exportParamName": "Unpin"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden from unpinning someone else's pin"
          }
        }
      }
    },
    "/adminsearch": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search the index (admin)",
        "description": "Retrieves results for search query without respect for permissions. This is available only to privileged users.",
        "operationId": "adminsearch",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "description": "Admin search request",
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "422": {
            "description": "Invalid Query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/ask": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Detect and answer question",
        "description": "Classify as information-seeking and return high-confidence results.",
        "operationId": "ask",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AskRequest"
              }
            }
          },
          "description": "Ask request",
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AskResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "422": {
            "description": "Invalid Query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/autocomplete": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Autocomplete a query",
        "description": "Retrieves query suggestions, operators and documents for the given partially typed query.",
        "operationId": "autocomplete",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AutocompleteRequest"
              }
            }
          },
          "description": "Autocomplete request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutocompleteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createcustomentity": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Create custom entity",
        "description": "Creates new custom entity and store into UserGeneratedEntityStore.",
        "operationId": "createcustomentity",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCustomEntityRequest"
              }
            }
          },
          "description": "New custom entity to be created with user permissions.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createteams": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Create team",
        "description": "Creates the given teams",
        "operationId": "createteams",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTeamsRequest"
              }
            }
          },
          "description": "Teams to be created",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTeamsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/customentities": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read details for one or more custom entities",
        "description": "Retrieves custom entity details for given ids",
        "operationId": "customentities",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomEntitiesRequest"
              }
            }
          },
          "description": "Custom entities request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntitiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deletecustomentity": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Delete custom entity",
        "description": "Deletes an existing user generated custom entity.",
        "operationId": "deletecustomentity",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteCustomEntityRequest"
              }
            }
          },
          "description": "DeleteCustomEntity request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deletequeryhistory": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Remove queries from query history.",
        "description": "Remove one or more queries from a user's query history.",
        "operationId": "deletequeryhistory",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteQueryHistoryRequest"
              }
            }
          },
          "description": "Delete query history request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteQueryHistoryResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deleteteams": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Delete team",
        "description": "Deletes the given teams",
        "operationId": "deleteteams",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteTeamsRequest"
              }
            }
          },
          "description": "Teams to be deleted",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteTeamsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/documentmetadata": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read document details",
        "description": "Returns the document metadata (with specified fields populated) for the ids specified in the request",
        "operationId": "documentmetadata",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocumentMetadataRequest"
              }
            }
          },
          "description": "Document metadata request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentMetadataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/editcustomentity": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Edit custom entity",
        "description": "Edit custom entity and store into UserGeneratedEntityStore.",
        "operationId": "editcustomentity",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCustomEntityRequest"
              }
            }
          },
          "description": "Custom entity to be edited with user permissions.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomEntity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/feed": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Suggest a feed of documents and events",
        "description": "The personalized feed/home includes different types of contents including suggestions, recents, calendar events and many more.",
        "operationId": "feed",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FeedRequest"
              }
            }
          },
          "description": "Includes request params, client data and more for making user's feed.",
          "required": true,
          "x-exportParamName": "FeedRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getdocuments": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read document details for a list of document ids and/or urls.",
        "description": "Returns the documents including metadata (does not include enhanced metadata via /documentmetadata) for the given list of id/url specified in the request",
        "operationId": "getdocuments",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDocumentsRequest"
              }
            }
          },
          "description": "Information about documents requested."
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDocumentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Documents does not exist, or user cannot access documents."
          }
        }
      }
    },
    "/getdocumentanalytics": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read document analytics for a list of document ids and/or urls.",
        "description": "Returns the document analytics information for the given list of id/url specified in the request",
        "operationId": "getdocumentanalytics",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDocumentAnalyticsRequest"
              }
            }
          },
          "description": "Information about analytics requested."
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDocumentAnalyticsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getevents": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read event details",
        "description": "Gets detailed information about events that might not be present in the feed request.",
        "operationId": "getevents",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetEventsRequest"
              }
            }
          },
          "description": "GetEvents request",
          "required": true,
          "x-exportParamName": "GetEventsRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getgeneratedqna": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Get generated qna.",
        "description": "Get a generated qna result, if any, corresponding to an opaque cursor.",
        "operationId": "getgeneratedqna",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetGeneratedQnaRequest"
              }
            }
          },
          "description": "Includes request params such as the cursor for the generated qna.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetGeneratedQnaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listentities": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "List entities",
        "description": "Retrieves some set of details for all entities that fit the given criteria and return in the requested order. Does not support negation in filters, assumes relation type EQUALS.",
        "operationId": "listentities",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListEntitiesRequest"
              }
            }
          },
          "description": "List people request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListEntitiesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/messages": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read messages",
        "description": "Retrieves list of messages from messaging/chat datasources like slack.",
        "operationId": "messages",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagesRequest"
              }
            }
          },
          "description": "Includes request params such as the id for channel/message and direction.",
          "required": true,
          "x-exportParamName": "MessagesRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/people": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read people details",
        "description": "Retrieves people details for given ids",
        "operationId": "people",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PeopleRequest"
              }
            }
          },
          "description": "People request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/peoplesuggest": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Suggest people",
        "description": "Retrieves a list of suggested people for given type. Includes information about the persons.",
        "operationId": "peoplesuggest",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PeopleSuggestRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleSuggestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/peoplesuggestadmin": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Suggest people (admin)",
        "description": "Returns a list of suggested people for given type for admin's view. Includes information about the persons.",
        "operationId": "peoplesuggestadmin",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PeopleSuggestRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PeopleSuggestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/recommendations": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Recommend related results",
        "description": "Retrieves recommendations for the URL specified",
        "operationId": "recommendations",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RecommendationsRequest"
              }
            }
          },
          "description": "Recommendations request",
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecommendationsResponse"
                }
              }
            }
          },
          "202": {
            "description": "Accepted. The Retry-After header has a hint about when the response will be available"
          },
          "204": {
            "description": "There are no recommendations for this URL"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Document does not exist or user cannot access document"
          }
        }
      }
    },
    "/savestructuredresult": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Update entity",
        "description": "Saves structured result as entity into UserGeneratedEntityStore, on retrieval merged with ProcessedEntity.",
        "operationId": "savestructuredresult",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StructuredResult"
              }
            }
          },
          "description": "structured result to be converted to entity.",
          "required": true,
          "x-exportParamName": "StructuredResult"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/search": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search the index",
        "description": "Retrieves results for the query",
        "operationId": "search",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequest"
              }
            }
          },
          "description": "Search request",
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          },
          "422": {
            "description": "Invalid Query",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInfo"
                }
              }
            }
          }
        }
      }
    },
    "/summarize": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Get AI generated summary",
        "description": "Get a summary of the requested documents.",
        "operationId": "summary",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SummarizeRequest"
              }
            }
          },
          "description": "Includes request params such as the query and specs of the documents to summarize.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SummarizeResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/teams": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Read team details",
        "description": "Retrieves team details for given ids",
        "operationId": "teams",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamsRequest"
              }
            }
          },
          "description": "Teams request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/createshortcut": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "Create shortcut",
        "description": "Creates a user-generated shortcut that contains a alias and destination url.",
        "operationId": "createshortcut",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateShortcutRequest"
              }
            }
          },
          "description": "CreateShortcut request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateShortcutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/deleteshortcut": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "Delete shortcut",
        "description": "Deletes an existing user-generated shortcut.",
        "operationId": "deleteshortcut",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteShortcutRequest"
              }
            }
          },
          "description": "DeleteShortcut request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getshortcut": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "Read shortcut details",
        "description": "Gets a particular shortcut given its id.",
        "operationId": "getshortcut",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetShortcutRequest"
              }
            }
          },
          "description": "GetShortcut request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetShortcutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/getsimilarshortcuts": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "Gets similar alias shortcuts.",
        "description": "Gets shortcuts with similar aliases to a given alias.",
        "operationId": "getsimilarshortcuts",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetSimilarShortcutsRequest"
              }
            }
          },
          "description": "GetSimilarShortcuts request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSimilarShortcutsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listshortcuts": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "List shortcuts editable/owned by the authed user.",
        "description": "Lists shortcuts editable/owned by the authed user.",
        "operationId": "listshortcuts",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListShortcutsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listshortcutspaginated": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "List shortcuts with pagination.",
        "description": "Lists shortcuts with offset pagination.",
        "x-internal": true,
        "operationId": "listshortcutspaginated",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListShortcutsPaginatedRequest"
              }
            }
          },
          "description": "Filters, sorters, paging params required for pagination",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListShortcutsPaginatedResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/previewshortcut": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "Preview shortcut",
        "description": "Previews a shortcut that contains a alias and destination url.",
        "operationId": "previewshortcut",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ShortcutMutableProperties"
              }
            }
          },
          "description": "CreateShortcut request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviewShortcutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/updateshortcut": {
      "post": {
        "tags": [
          "Shortcuts"
        ],
        "summary": "Update shortcut",
        "description": "Updates shortcut.",
        "operationId": "updateshortcut",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateShortcutRequest"
              }
            }
          },
          "description": "Shortcut content. Id need to be specified for the shortcut.",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateShortcutResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/addcredential": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create credentials",
        "description": "API to save a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example",
        "operationId": "addcredential",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCredentialRequest"
              }
            }
          },
          "description": "Credential content",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/config": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Read client configuration",
        "description": "Retrieves configuration information such as the intended display of results, settings, etc.",
        "operationId": "config",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConfigRequest"
              }
            }
          },
          "description": "Config request",
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/invite": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Send email invitation",
        "description": "Invites people to Glean via email",
        "operationId": "invite",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRequest"
              }
            }
          },
          "description": "Invite request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/listusersettings": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Read user settings",
        "description": "Returns the complete list of user settings for the requestor.",
        "operationId": "listusersettings",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "501": {
            "description": "not implemented"
          }
        }
      }
    },
    "/publicclientconfig": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Reads the client configuration that is public, no PII.",
        "description": "Retrieves configuration information such as the company name, logo and etc that is public and is not considered as PII.",
        "operationId": "publicconfig",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicConfigRequest"
              }
            }
          },
          "description": "Public Config request",
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientConfig"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/removecredential": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Delete credentials",
        "description": "API to remove a user's credentials. Used for Confluence restricted pages and Tableau per-user auth, for example",
        "operationId": "removecredential",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveCredentialRequest"
              }
            }
          },
          "description": "Credential content",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/saveusersettings": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Update user settings",
        "description": "Saves the user settings included in the payload, can be partial, does not need to be all settings.",
        "operationId": "saveusersettings",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSettings"
              }
            }
          },
          "description": "Set of user settings.",
          "required": true,
          "x-exportParamName": "UserSettings"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/support": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Send support email to Glean support team",
        "description": "Sends a support email based on a template to the Glean support team",
        "operationId": "support_email",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRequest"
              }
            }
          },
          "description": "Support request",
          "required": true,
          "x-exportParamName": "Request"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/addverificationreminder": {
      "post": {
        "tags": [
          "Verification"
        ],
        "summary": "Create verification reminder",
        "description": "Creates a verification reminder for the document. Users can create verification reminders from different product surfaces.",
        "operationId": "addverificationreminder",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReminderRequest"
              }
            }
          },
          "description": "Details about the reminder.",
          "required": true,
          "x-exportParamName": "ReminderRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verification"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Document does not exist, does not support verification or user cannot access document"
          }
        }
      }
    },
    "/listverifications": {
      "post": {
        "tags": [
          "Verification"
        ],
        "summary": "List verifications",
        "description": "Returns the information to be rendered in verification dashboard. Includes information for each document owned by user regarding their verifications.",
        "operationId": "listverifications",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "in": "query",
            "name": "count",
            "description": "Maximum number of documents to return",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "$ref": "#/components/parameters/actas"
          },
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationFeed"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          }
        }
      }
    },
    "/verify": {
      "post": {
        "tags": [
          "Verification"
        ],
        "summary": "Update verification",
        "description": "Verify documents to keep the knowledge up to date within customer corpus.",
        "operationId": "verify",
        "x-codegen-request-body-name": "payload",
        "parameters": [
          {
            "$ref": "#/components/parameters/clientVersion"
          },
          {
            "$ref": "#/components/parameters/domain"
          },
          {
            "$ref": "#/components/parameters/eids"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyRequest"
              }
            }
          },
          "description": "Details about the verification request.",
          "required": true,
          "x-exportParamName": "VerifyRequest"
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Verification"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Document does not exist, does not support verification or user cannot access document"
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://{domain}-be.glean.com/api/v1",
      "variables": {
        "domain": {
          "default": "domain",
          "description": "Email domain (without extension) that determines the deployment backend."
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "ProfileSettingsKey": {
        "type": "string",
        "enum": [
          "ENABLE_RELATED_PEOPLE_WIDGET",
          "ENABLE_RECENT_ACTIVITY_WIDGET",
          "ENABLE_WORKED_TOGETHER_ON_WIDGET",
          "ENABLE_CALENDAR_WIDGET"
        ]
      },
      "FeatureVisibilityKey": {
        "type": "string",
        "enum": [
          "ENABLED",
          "DISABLED",
          "UNLISTED"
        ]
      },
      "CelebrationBadgeKeyEnum": {
        "type": "string",
        "description": "The set of possible keys for Glean people celebration badges",
        "enum": [
          "new_hire",
          "anniversary"
        ]
      },
      "ReadPermission": {
        "description": "Describes the read permission level that a user has for a specific feature",
        "properties": {
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          }
        }
      },
      "GrantPermission": {
        "description": "Describes the grant permission level that a user has for a specific feature",
        "properties": {
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          }
        }
      },
      "Datasource": {
        "description": "A datasource. Idea: only place fields that belong to a datasource and not any of its particular instances here.\n",
        "properties": {
          "id": {
            "description": "The required id of the datasource. Example: zendesk",
            "type": "string",
            "example": "zendesk"
          },
          "capabilities": {
            "description": "The functionality provided by the datasource, such as providing searchable content or SSO access.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasourceCapability"
            }
          }
        }
      },
      "DeleteCollectionResponse": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/CollectionError"
          }
        }
      },
      "CustomDatasourceConfig": {
        "description": "Structure describing config properties of a custom datasource",
        "allOf": [
          {
            "$ref": "#/components/schemas/SharedDatasourceConfigNoInstance"
          },
          {
            "type": "object",
            "properties": {
              "identityDatasourceName": {
                "type": "string",
                "description": "If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already."
              },
              "productAccessGroup": {
                "type": "string",
                "description": "If the datasource uses a specific product access group, then the name of that group."
              },
              "isUserReferencedByEmail": {
                "type": "boolean",
                "description": "whether email is used to reference users in document ACLs and in group memberships."
              },
              "isEntityDatasource": {
                "type": "boolean",
                "default": false,
                "description": "True if this datasource is used to push custom entities."
              },
              "isTestDatasource": {
                "type": "boolean",
                "default": false,
                "description": "True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings."
              }
            }
          }
        ]
      },
      "SharedDatasourceConfigList": {
        "description": "List of datasource configurations.",
        "required": [
          "datasourceConfig"
        ],
        "properties": {
          "datasourceConfig": {
            "type": "array",
            "description": "Datasource configuration.",
            "items": {
              "$ref": "#/components/schemas/SharedDatasourceConfig"
            }
          }
        }
      },
      "PermissionedFeatureOrObject": {
        "type": "string",
        "description": "A feature or object type with restricted access",
        "enum": [
          "ADMIN_SEARCH",
          "ANNOUNCEMENTS",
          "ANSWERS",
          "COLLECTIONS",
          "COLLECTION_ITEMS",
          "INSIGHTS_COLLECTIONS",
          "INSIGHTS_CONTENT",
          "INSIGHTS_INVITE",
          "INSIGHTS_SEARCHES",
          "INSIGHTS_TEAMMATES",
          "PINS",
          "SENSITIVE_CONTENT_REPORTS",
          "SHORTCUTS",
          "TEAMS",
          "VERIFICATIONS",
          "WORKSPACE_APPS",
          "WORKSPACE_PERMISSIONS"
        ]
      },
      "SearchRequestGleanbotUIElementEnum": {
        "type": "string",
        "description": "UI element within Gleanbot from which the search request was sent.",
        "enum": [
          "DM",
          "MENTION",
          "COMMAND",
          "LEADERBOARD",
          "RETRY"
        ]
      },
      "ExternalDocumentProxy": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DocumentDefinition"
          }
        ],
        "description": "A representation of a document that is stored in an external system, likely a customer's server. This document is not stored in Glean's databases, but is instead fetched from the external system when the document is requested."
      },
      "GetExternalDocumentsProxyInternalRequest": {
        "description": "Request from QE to JQE to retrieve the external documents."
      },
      "GetExternalDocumentsProxyRequest": {
        "description": "Request from JQE to the external system to retrieve the external documents.",
        "properties": {
          "query": {
            "properties": {
              "owner": {
                "type": "string",
                "description": "Email address of the owner of the document"
              },
              "requestType": {
                "type": "string",
                "description": "Type of documents to retrieve"
              }
            },
            "required": [
              "owner",
              "requestType"
            ],
            "type": "object"
          }
        },
        "required": [
          "query"
        ]
      },
      "GetExternalDocumentsProxyResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExternalDocumentsProxyResponse"
          }
        ],
        "description": "Response from JQE to QE with the external documents."
      },
      "ObjectTargetingSurfaceEnum": {
        "type": "string",
        "description": "The set of possible surfaces that an object can be targeted on",
        "enum": [
          "FEED_SURFACE",
          "NAV_SURFACE",
          "TEAM_SURFACE"
        ]
      },
      "ActivityEventParams": {
        "properties": {
          "bodyContent": {
            "description": "The HTML content of the page body.",
            "type": "string"
          },
          "datasourceInstance": {
            "type": "string",
            "description": "The full datasource instance name inferred from the URL of the event"
          },
          "datasource": {
            "type": "string",
            "description": "The datasource without the instance inferred from the URL of the event"
          },
          "instanceOnlyName": {
            "type": "string",
            "description": "The instance only name of the datasource instance, e.g. 1 for jira_1, inferred from the URL of the event"
          },
          "duration": {
            "description": "Length in seconds of the activity. For VIEWS, this represents the amount the page was visible in the foreground.",
            "type": "integer"
          },
          "query": {
            "description": "The user's search query associated with a SEARCH.",
            "type": "string"
          },
          "referrer": {
            "description": "The referring URL of the VIEW or SEARCH.",
            "type": "string"
          },
          "title": {
            "description": "The page title associated with the URL of the event",
            "type": "string"
          },
          "truncated": {
            "description": "Indicates that the params are incomplete and more params may be sent with the same action+timestamp+url in the future. This is used for sending the duration when a VIEW is finished.",
            "type": "boolean"
          }
        }
      },
      "ActivityEvent": {
        "required": [
          "action",
          "source",
          "timestamp",
          "url"
        ],
        "properties": {
          "action": {
            "type": "string",
            "description": "The type of activity this represents.\nCRAWL - Represents an explicit request to index the given `url` along with associated attributes in this payload. HISTORICAL_SEARCH - Represents a search performed at the given `url` as indicated by the user's history. HISTORICAL_VIEW - Represents a visit to the given `url` as indicated by the user's history. SEARCH - Represents a search performed at the given `url`. VIEW - Represents a visit to the given `url`. EDIT - Represents an edit of the document represented by the `url`. COMMENT - Represents a comment on the document represented by the `url`.",
            "enum": [
              "CRAWL",
              "HISTORICAL_SEARCH",
              "HISTORICAL_VIEW",
              "SEARCH",
              "VIEW",
              "EDIT",
              "COMMENT"
            ]
          },
          "params": {
            "$ref": "#/components/schemas/ActivityEventParams"
          },
          "source": {
            "type": "string",
            "description": "Identifies the type of client that is reporting the activity.",
            "enum": [
              "EMBEDDED_SEARCH",
              "EXTENSION",
              "REST_ENDPOINT"
            ]
          },
          "timestamp": {
            "type": "string",
            "description": "The ISO 8601 timestamp when the activity began.",
            "format": "date-time"
          },
          "url": {
            "description": "The url of the activity.",
            "type": "string"
          }
        }
      },
      "User": {
        "properties": {
          "userID": {
            "description": "An opaque user ID for the claimed authority (i.e., the actas param, or the origid if actas is not specified).",
            "type": "string"
          },
          "origID": {
            "description": "An opaque user ID for the authenticated user (ignores actas).",
            "type": "string"
          }
        }
      },
      "Activity": {
        "required": [
          "events"
        ],
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityEvent"
            }
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "example": {
          "events": [
            {
              "url": "https://example.com/",
              "action": "HISTORICAL_VIEW",
              "timestamp": "2000-01-23T04:56:07.000Z"
            },
            {
              "url": "https://example.com/search?q=query",
              "action": "SEARCH",
              "timestamp": "2000-01-23T04:56:07.000Z",
              "params": {
                "query": "query"
              }
            },
            {
              "url": "https://example.com/",
              "action": "VIEW",
              "timestamp": "2000-01-23T04:56:07.000Z",
              "params": {
                "duration": 20,
                "referrer": "https://example.com/document"
              }
            }
          ]
        }
      },
      "ClientAnalyticsCommonParams": {
        "properties": {
          "debugMode": {
            "type": "boolean"
          },
          "extensionVersion": {
            "type": "string"
          },
          "pageReferrer": {
            "type": "string"
          },
          "theme": {
            "type": "string"
          },
          "webAppVersion": {
            "type": "string"
          },
          "modality": {
            "type": "string"
          }
        }
      },
      "ClientAnalyticsEventTrackingParams": {
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp in millis for the client event."
          },
          "eventName": {
            "type": "string"
          },
          "attribution": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "datasource": {
            "type": "string"
          },
          "docType": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "pagePath": {
            "type": "string"
          },
          "uiElement": {
            "type": "string"
          },
          "utmSource": {
            "type": "string"
          },
          "rate": {
            "type": "number",
            "description": "Sample rate applicable for this event."
          },
          "stt": {
            "type": "string",
            "description": "Session identifier."
          }
        }
      },
      "ClientAnalyticsEvent": {
        "properties": {
          "trackingParams": {
            "$ref": "#/components/schemas/ClientAnalyticsEventTrackingParams"
          },
          "stringParams": {
            "type": "object",
            "description": "Additional string parameters associated with the analytics event, contents will depend on event category and type.",
            "additionalProperties": {
              "type": "string"
            }
          },
          "numberParams": {
            "type": "object",
            "description": "Additional numerical parameters associated with the analytics event, contents will depend on event category and type.",
            "additionalProperties": {
              "type": "number"
            }
          },
          "boolParams": {
            "type": "object",
            "description": "Additional boolean parameters associated with the analytics event, contents will depend on event category and type.",
            "additionalProperties": {
              "type": "boolean"
            }
          }
        }
      },
      "ClientAnalyticsRequest": {
        "properties": {
          "commonParams": {
            "$ref": "#/components/schemas/ClientAnalyticsCommonParams"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientAnalyticsEvent"
            }
          }
        }
      },
      "SessionInfo": {
        "properties": {
          "sessionTrackingToken": {
            "type": "string",
            "description": "A unique token for this session. A new session (and token) is created when the user issues a request from a new tab or when our server hasn't seen activity for more than 10 minutes from a tab."
          },
          "tabId": {
            "type": "string",
            "description": "A unique id for all requests a user makes from a given tab, no matter how far apart. A new tab id is only generated when a user issues a request from a new tab."
          },
          "lastSeen": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the server saw this token."
          },
          "lastQuery": {
            "type": "string",
            "description": "The last query seen by the server."
          }
        }
      },
      "ManualFeedbackInfo": {
        "properties": {
          "email": {
            "type": "string",
            "description": "The email address of the user who submitted the Feedback.event.MANUAL_FEEDBACK event."
          },
          "source": {
            "type": "string",
            "description": "The source associated with the Feedback.event.MANUAL_FEEDBACK event.",
            "enum": [
              "SEARCH",
              "FEED",
              "Q_AND_A",
              "GENERATED_Q_AND_A",
              "SUMMARY",
              "EXPERT_DETECTION"
            ]
          },
          "issue": {
            "type": "string",
            "description": "The issue the user indicated in the feedback."
          },
          "query": {
            "type": "string",
            "description": "The query associated with the Feedback.event.MANUAL_FEEDBACK event."
          },
          "obscuredQuery": {
            "type": "string",
            "description": "The query associated with the Feedback.event.MANUAL_FEEDBACK event, but obscured such that the vowels are replaced with special characters. For search feedback events only."
          },
          "activeTab": {
            "type": "string",
            "description": "Which tabs the user had chosen at the time of the Feedback.event.MANUAL_FEEDBACK event. For search feedback events only."
          },
          "comments": {
            "type": "string",
            "description": "The comments users can optionally add to the Feedback.event.MANUAL_FEEDBACK events."
          },
          "searchResults": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The array of search result docIds, ordered by top to bottom result."
          },
          "numQueriesFromFirstRun": {
            "type": "integer",
            "description": "How many times this query has been run in the past."
          }
        }
      },
      "SeenFeedbackInfo": {
        "properties": {
          "isExplicit": {
            "type": "boolean",
            "description": "The confidence of the user seeing the object is high because they explicitly interacted with it e.g. answer impression in SERP with additional user interaction."
          }
        }
      },
      "UserViewInfo": {
        "properties": {
          "docId": {
            "type": "string",
            "description": "Unique identifier of associated document"
          },
          "docTitle": {
            "type": "string",
            "description": "Title of associated document"
          },
          "docUrl": {
            "type": "string",
            "description": "URL of associated document"
          }
        }
      },
      "Feedback": {
        "required": [
          "event",
          "trackingTokens"
        ],
        "properties": {
          "category": {
            "type": "string",
            "description": "The feature category to which the feedback applies. These should be broad product areas such as Announcements, Answers, Search, etc. rather than specific components or UI treatments within those areas.",
            "enum": [
              "ANNOUNCEMENT",
              "AUTOCOMPLETE",
              "COLLECTIONS",
              "FEED",
              "SEARCH",
              "CHAT"
            ]
          },
          "trackingTokens": {
            "type": "array",
            "description": "A list of server-generated trackingTokens to which this event applies.",
            "items": {
              "type": "string"
            }
          },
          "event": {
            "type": "string",
            "description": "The action the user took within a Glean client with respect to the object referred to by the given `trackingToken``.\nCLICK - The object's primary link was clicked with the intent to view its full representation. Depending on the object type, this may imply an external navigation or navigating to a new page or view within the Glean app. CONTAINER_CLICK - A link to the object's parent container (e.g. the folder in which it's located) was clicked. COPY_LINK - The user copied a link to the primary link. CREATE - The user creates a document. DISMISS - The user dismissed the object such that it was hidden from view. DOWNVOTE - The user gave feedback that the object was not useful. EMAIL - The user attempted to send an email. FOCUS_IN - The user clicked into an interactive element, e.g. the search box. MANUAL_FEEDBACK - The user submitted textual manual feedback regarding the object. MESSAGE - The user attempted to send a message using their default messaing app. MIDDLE_CLICK - The user middle clicked the object's primary link with the intent to open its full representation in a new tab. PREVIEW - The user clicked the object's inline preview affordance. RIGHT_CLICK - The user right clicked the object's primary link. This may indicate an intent to open it in a new tab or copy it. SECTION_CLICK - The user clicked a link to a subsection of the primary object. SEEN - The user has likely seen the object (e.g. took action to make the object visible within the user's viewport). SHARE - The user shared the object with another user. SHOW_MORE - The user clicked the object's show more affordance. UPVOTE - The user gave feedback that the object was useful. VIEW - The object was visible within the user's viewport. VISIBLE - The object was visible within the user's viewport.",
            "enum": [
              "CLICK",
              "CONTAINER_CLICK",
              "COPY_LINK",
              "CREATE",
              "DISMISS",
              "DOWNVOTE",
              "EMAIL",
              "FOCUS_IN",
              "MANUAL_FEEDBACK",
              "MESSAGE",
              "MIDDLE_CLICK",
              "PREVIEW",
              "RELATED_CLICK",
              "RIGHT_CLICK",
              "SECTION_CLICK",
              "SEEN",
              "SHARE",
              "SHOW_MORE",
              "UPVOTE",
              "VIEW",
              "VISIBLE"
            ]
          },
          "position": {
            "type": "integer",
            "description": "Position of the element in the case that the client controls order (such as feed and autocomplete)."
          },
          "payload": {
            "type": "string",
            "description": "For type MANUAL_FEEDBACK, contains string of user feedback. For autocomplete, partial query string. For feed, string of user feedback in addition to manual feedback signals extracted from all suggested content."
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          },
          "timestamp": {
            "type": "string",
            "description": "The ISO 8601 timestamp when the event occured.",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "pathname": {
            "type": "string",
            "description": "The path the client was at when the feedback event triggered."
          },
          "channels": {
            "type": "array",
            "description": "Where the feedback will be sent, e.g. to Glean, the user's company, or both. If no channels are specified, feedback will go only to Glean.",
            "items": {
              "type": "string",
              "enum": [
                "COMPANY",
                "GLEAN"
              ]
            }
          },
          "url": {
            "type": "string",
            "description": "The url the client was at when the feedback event triggered."
          },
          "uiElement": {
            "type": "string",
            "description": "The UI element associated with the event, if any."
          },
          "manualFeedbackInfo": {
            "$ref": "#/components/schemas/ManualFeedbackInfo"
          },
          "seenFeedbackInfo": {
            "$ref": "#/components/schemas/SeenFeedbackInfo"
          },
          "userViewInfo": {
            "$ref": "#/components/schemas/UserViewInfo"
          }
        },
        "example": {
          "trackingTokens": [
            "trackingTokens"
          ],
          "event": "VIEW"
        }
      },
      "StructuredTextMutableProperties": {
        "required": [
          "text"
        ],
        "properties": {
          "text": {
            "type": "string",
            "example": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."
          }
        }
      },
      "ConnectorType": {
        "type": "string",
        "description": "The source from which document content was pulled, e.g. an API crawl or browser history",
        "enum": [
          "API_CRAWL",
          "BROWSER_CRAWL",
          "BROWSER_HISTORY",
          "BUILTIN",
          "FEDERATED_SEARCH",
          "PUSH_API",
          "WEB_CRAWL",
          "NATIVE_HISTORY"
        ]
      },
      "DocumentContent": {
        "properties": {
          "fullTextList": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The plaintext content of the document."
          }
        }
      },
      "Document": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The document id."
          },
          "datasource": {
            "type": "string",
            "description": "The app or other repository type from which the document was extracted"
          },
          "connectorType": {
            "$ref": "#/components/schemas/ConnectorType"
          },
          "docType": {
            "type": "string",
            "description": "The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request)."
          },
          "content": {
            "$ref": "#/components/schemas/DocumentContent"
          },
          "containerDocument": {
            "$ref": "#/components/schemas/Document"
          },
          "parentDocument": {
            "$ref": "#/components/schemas/Document"
          },
          "title": {
            "type": "string",
            "description": "The title of the document."
          },
          "url": {
            "type": "string",
            "description": "A permalink for the document."
          },
          "metadata": {
            "$ref": "#/components/schemas/DocumentMetadata"
          },
          "sections": {
            "type": "array",
            "description": "A list of content sub-sections in the document, e.g. text blocks with different headings in a Drive doc or Confluence page.",
            "items": {
              "$ref": "#/components/schemas/DocumentSection"
            }
          }
        }
      },
      "SearchDebugOptions": {
        "properties": {
          "forceParseQuery": {
            "type": "string",
            "description": "Debug only. When present, uses this parsed query JSON string instead of the query in the request. Requires elevated permission."
          }
        }
      },
      "FacetFilterValue": {
        "properties": {
          "value": {
            "type": "string",
            "example": "Spreadsheet"
          },
          "relationType": {
            "type": "string",
            "enum": [
              "EQUALS",
              "LT",
              "GT"
            ],
            "example": "EQUALS"
          },
          "isNegated": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "FacetFilter": {
        "properties": {
          "fieldName": {
            "type": "string",
            "example": "owner"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilterValue"
            },
            "description": "Within a single FacetFilter, the values are to be treated like an OR. For example, fieldName doc_type with values [EQUALS Presentation, EQUALS Spreadsheet] means we want to show a document if it's a Presentation OR a Spreadsheet."
          },
          "groupName": {
            "type": "string",
            "example": "Spreadsheet",
            "description": "Indicates the value of a facet, if any, that the given facet is grouped under. This is only used for nested facets, for example, fieldName could be owner and groupName would be Spreadsheet if showing all owners for spreadsheets as a nested facet."
          }
        },
        "example": {
          "fieldName": "doc_type",
          "values": [
            {
              "value": "Spreadsheet",
              "relationType": "EQUALS",
              "isNegated": false
            },
            {
              "value": "Presentation",
              "relationType": "EQUALS",
              "isNegated": false
            }
          ]
        }
      },
      "FacetBucketFilter": {
        "properties": {
          "facet": {
            "type": "string",
            "description": "The facet whose buckets should be filtered."
          },
          "prefix": {
            "type": "string",
            "description": "The per-term prefix that facet buckets should be filtered on."
          }
        }
      },
      "AuthToken": {
        "required": [
          "accessToken",
          "datasource"
        ],
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "datasource": {
            "type": "string"
          },
          "scope": {
            "type": "string"
          },
          "tokenType": {
            "type": "string"
          },
          "authUser": {
            "description": "Used by Google to indicate the index of the logged in user. Useful for generating hyperlinks that support multilogin.",
            "type": "string"
          },
          "expiration": {
            "description": "Unix timestamp when this token expires (in seconds since epoch UTC).",
            "type": "integer",
            "format": "int64"
          }
        },
        "example": {
          "accessToken": "123abc",
          "datasource": "gmail",
          "scope": "email profile https://www.googleapis.com/auth/gmail.readonly",
          "tokenType": "Bearer",
          "authUser": "1"
        }
      },
      "SearchRequestOptions": {
        "required": [
          "facetBucketSize"
        ],
        "properties": {
          "debugOptions": {
            "$ref": "#/components/schemas/SearchDebugOptions"
          },
          "datasourceFilter": {
            "type": "string",
            "description": "Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing."
          },
          "datasourcesFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter results to one or more datasources (e.g. gmail, slack). All results are returned if missing."
          },
          "queryOverridesFacetFilters": {
            "type": "boolean",
            "description": "If true, the operators in the query are taken to override any operators in facetFilters in the case of conflict. This is used to correctly set rewrittenFacetFilters and rewrittenQuery."
          },
          "facetFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            },
            "description": "A list of filters for the query. An AND is assumed between different facetFilters. For example, owner Sumeet and doc_type Spreadsheet shows documents that are by Sumeet AND are Spreadsheets."
          },
          "facetBucketFilter": {
            "$ref": "#/components/schemas/FacetBucketFilter"
          },
          "facetBucketSize": {
            "type": "integer",
            "description": "The maximum number of FacetBuckets to return in each FacetResult."
          },
          "authTokens": {
            "type": "array",
            "description": "Auth tokens which may be used for non-indexed, federated results (e.g. Gmail).",
            "items": {
              "$ref": "#/components/schemas/AuthToken"
            }
          },
          "fetchAllDatasourceCounts": {
            "type": "boolean",
            "description": "Hints that the QE should return result counts (via the datasource facet result) for all supported datasources, rather than just those specified in the datasource[s]Filter"
          },
          "responseHints": {
            "type": "array",
            "description": "Array of hints containing what QE should return back to FE.",
            "items": {
              "type": "string",
              "enum": [
                "RESULTS",
                "QUERY_METADATA"
              ]
            }
          },
          "timezoneOffset": {
            "type": "integer",
            "description": "The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."
          },
          "forceNegation": {
            "type": "boolean",
            "description": "Whether or not to force not ignoring of negation, i.e. force negated terms to be negated."
          },
          "disableSpellcheck": {
            "type": "boolean",
            "description": "Whether or not to disable spellcheck."
          },
          "disableQueryAutocorrect": {
            "type": "boolean",
            "description": "Disables automatic adjustment of the input query for spelling corrections or other reasons."
          },
          "expandedSnippetSize": {
            "type": "integer",
            "description": "The number of characters to include in the expanded snippet."
          }
        },
        "example": {
          "debugOptions": {
            "enableDebugging": true
          },
          "datasourceFilter": "JIRA",
          "datasourcesFilter": [
            "JIRA"
          ],
          "queryOverridesFacetFilters": true,
          "facetFilters": [
            {
              "fieldName": "fieldName",
              "fieldValues": [
                "fieldValues",
                "fieldValues"
              ]
            },
            {
              "fieldName": "fieldName",
              "fieldValues": [
                "fieldValues",
                "fieldValues"
              ]
            }
          ]
        }
      },
      "TextRange": {
        "required": [
          "startIndex"
        ],
        "description": "A subsection of a given string to which some special formatting should be applied.",
        "properties": {
          "startIndex": {
            "type": "integer",
            "description": "The inclusive start index of the range."
          },
          "endIndex": {
            "type": "integer",
            "description": "The exclusive end index of the range."
          },
          "type": {
            "type": "string",
            "enum": [
              "BOLD",
              "CITATION",
              "LINK"
            ]
          },
          "document": {
            "$ref": "#/components/schemas/Document",
            "description": "A document corresponding to the range, if applicable. For example, the cited document for a CITATION range."
          }
        }
      },
      "QuerySuggestion": {
        "required": [
          "query"
        ],
        "properties": {
          "missingTerm": {
            "type": "string",
            "description": "A query term missing from the original query on which this suggestion is based"
          },
          "query": {
            "type": "string",
            "description": "The query being suggested (e.g. enforcing the missing term from the original query)"
          },
          "label": {
            "type": "string",
            "description": "A user-facing description to display for the suggestion"
          },
          "datasource": {
            "type": "string",
            "description": "The datasource associated with the suggestion"
          },
          "requestOptions": {
            "$ref": "#/components/schemas/SearchRequestOptions"
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "The bolded ranges within the query of the QuerySuggestion."
          }
        },
        "example": {
          "query": "app:github type:pull author:mortimer",
          "label": "Mortimer's PRs",
          "datasource": "github"
        }
      },
      "SearchResultSnippet": {
        "required": [
          "snippet"
        ],
        "properties": {
          "snippet": {
            "type": "string",
            "description": "A matching snippet from the document. Query term matches are marked by the unicode characters uE006 and uE007."
          },
          "mimeType": {
            "type": "string",
            "description": "The mime type of the snippets, currently either text/plain or text/html."
          },
          "text": {
            "type": "string",
            "description": "A matching snippet from the document with no highlights."
          },
          "snippetTextOrdering": {
            "type": "integer",
            "description": "Used for sorting based off the snippet's location within all_snippetable_text"
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "The bolded ranges within text."
          }
        },
        "example": {
          "snippet": "snippet",
          "mimeType": "mimeType"
        }
      },
      "RelatedDocuments": {
        "properties": {
          "relation": {
            "type": "string",
            "description": "How this document relates to the including entity.",
            "enum": [
              "CASE",
              "CONTACT",
              "CONVERSATION_MESSAGES",
              "FROM",
              "OPPORTUNITY",
              "RECENT",
              "SOURCE",
              "TICKET",
              "WITH",
              "EXPERT"
            ]
          },
          "associatedEntityId": {
            "type": "string",
            "description": "Which entity in the response that this entity relates to. Relevant when there are multiple entities associated with the response (such as merged customers)"
          },
          "querySuggestion": {
            "$ref": "#/components/schemas/QuerySuggestion"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "description": "A truncated list of documents with this relation. TO BE DEPRECATED.",
            "deprecated": true
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            },
            "description": "A truncated list of documents associated with this relation. To be used in favor of `documents` because it contains a trackingToken."
          }
        }
      },
      "SearchResult": {
        "required": [
          "snippets",
          "url"
        ],
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "nativeAppUrl": {
            "type": "string",
            "description": "A deep link, if available, into the datasource's native application for the user's platform (e.g. slack://...)."
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular result in this particular query. To be used for /feedback reporting."
          },
          "snippets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultSnippet"
            }
          },
          "expandedSnippets": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The expanded snippets for this result. This is only populated if the query has the expand_snippets parameter set to true."
          },
          "fullText": {
            "type": "string",
            "description": "The full body text of the result if not already contained in the snippets"
          },
          "fullTextList": {
            "type": "array",
            "description": "The full body text of the result if not already contained in the snippets; each item in the array represents a separate line in the original text",
            "items": {
              "type": "string"
            }
          },
          "relatedResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocuments"
            },
            "description": "A list of results related to this search result. Eg. for conversation results it contains individual messages from the conversation document which will be shown on SERP."
          },
          "clusteredResults": {
            "type": "array",
            "description": "A list of results that should be displayed as associated with this result.",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "allClusteredResults": {
            "type": "array",
            "description": "A list of results that should be displayed as associated with this result.",
            "items": {
              "$ref": "#/components/schemas/ClusterGroup"
            }
          },
          "attachmentCount": {
            "type": "integer",
            "description": "The total number of attachments."
          },
          "attachments": {
            "type": "array",
            "description": "A (potentially partial) list of results representing documents attached to the main result document.",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "backlinkResults": {
            "type": "array",
            "description": "A list of results that should be displayed as backlinks of this result in reverse chronological order.",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "clusterType": {
            "$ref": "#/components/schemas/ClusterTypeEnum"
          },
          "mustIncludeSuggestions": {
            "$ref": "#/components/schemas/QuerySuggestionList"
          },
          "querySuggestion": {
            "$ref": "#/components/schemas/QuerySuggestion"
          },
          "debugInfo": {
            "$ref": "#/components/schemas/SearchResultDebugInfo"
          },
          "structuredResults": {
            "type": "array",
            "description": "When present, this list of `StructuredResult`s will supercede a `Document` in this `SearchResult`.",
            "items": {
              "$ref": "#/components/schemas/StructuredResult"
            }
          },
          "prominence": {
            "$ref": "#/components/schemas/SearchResultProminenceEnum"
          },
          "attachmentContext": {
            "type": "string",
            "description": "Additional context for the relationship between the result and the document it's attached to."
          },
          "pins": {
            "type": "array",
            "description": "A list of pins associated with this search result.",
            "items": {
              "$ref": "#/components/schemas/PinDocument"
            }
          }
        },
        "example": {
          "snippets": [
            {
              "snippet": "snippet",
              "mimeType": "mimeType"
            }
          ],
          "metadata": {
            "container": "container",
            "createTime": "2000-01-23T04:56:07.000Z",
            "datasource": "datasource",
            "author": {
              "name": "name"
            },
            "documentId": "documentId",
            "updateTime": "2000-01-23T04:56:07.000Z",
            "mimeType": "mimeType",
            "objectType": "objectType"
          },
          "debugInfo": {
            "formattedDebugInfo": "formattedDebugInfo"
          },
          "title": "title",
          "url": "https://example.com/foo/bar",
          "nativeAppUrl": "slack://foo/bar",
          "mustIncludeSuggestions": [
            {
              "missingTerm": "container",
              "query": "container"
            }
          ]
        }
      },
      "ClusterTypeEnum": {
        "type": "string",
        "description": "The reason for inclusion of clusteredResults.",
        "enum": [
          "SIMILAR",
          "FRESHNESS",
          "TITLE",
          "CONTENT",
          "NONE",
          "THREAD_REPLY",
          "THREAD_ROOT"
        ]
      },
      "ClusterGroup": {
        "required": [
          "visibleCountHint"
        ],
        "properties": {
          "clusteredResults": {
            "type": "array",
            "description": "A list of results that should be displayed as associated with this result.",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "clusterType": {
            "$ref": "#/components/schemas/ClusterTypeEnum"
          },
          "visibleCountHint": {
            "type": "integer",
            "description": "The default number of results to display before truncating and showing a \"see more\" link"
          }
        }
      },
      "Person": {
        "required": [
          "name",
          "obfuscatedId"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name."
          },
          "obfuscatedId": {
            "type": "string",
            "description": "An opaque identifier that can be used to request metadata for a Person."
          },
          "relatedDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocuments"
            },
            "description": "A list of documents related to this person."
          },
          "metadata": {
            "$ref": "#/components/schemas/PersonMetadata"
          }
        },
        "example": {
          "name": "George Clooney",
          "obfuscatedId": "abc123"
        }
      },
      "QuerySuggestionList": {
        "required": [
          "suggestions"
        ],
        "properties": {
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuerySuggestion"
            }
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "SearchResultDebugInfo": {
        "properties": {
          "finalScore": {
            "type": "number",
            "format": "double"
          },
          "scholasticScore": {
            "type": "number",
            "format": "double"
          },
          "scholasticContent": {
            "type": "string"
          },
          "scholasticRetrievalOnly": {
            "type": "boolean"
          },
          "explanation": {
            "type": "string"
          },
          "snippetScore": {
            "type": "number",
            "format": "double"
          },
          "position": {
            "type": "integer",
            "format": "int64"
          },
          "evalDocumentDescriptorEncoded": {
            "type": "string",
            "description": "Information about boundaries / endpoints of documents, e.g., messages in a conversation - only used for evals and always scrubbed + without PII."
          },
          "id_hash": {
            "type": "string",
            "description": "The document id hash."
          }
        }
      },
      "Company": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "User-friendly display name."
          },
          "profileUrl": {
            "type": "string",
            "description": "Link to internal company company profile."
          },
          "websiteUrls": {
            "type": "array",
            "description": "Link to company's associated websites.",
            "items": {
              "type": "string"
            }
          },
          "logoUrl": {
            "type": "string",
            "description": "The URL of the company's logo. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."
          },
          "location": {
            "type": "string",
            "description": "User facing string representing the company's location.",
            "example": "New York City"
          },
          "phone": {
            "type": "string",
            "description": "Phone number as a number string."
          },
          "fax": {
            "type": "string",
            "description": "Fax number as a number string."
          },
          "industry": {
            "type": "string",
            "description": "User facing string representing the company's industry.",
            "example": "Finances"
          },
          "annualRevenue": {
            "type": "number",
            "format": "double",
            "description": "Average company's annual revenue for reference."
          },
          "numberOfEmployees": {
            "type": "integer",
            "format": "int64",
            "description": "Average company's number of employees for reference."
          },
          "stockSymbol": {
            "type": "string",
            "description": "Company's stock symbol if company is public."
          },
          "foundedDate": {
            "type": "string",
            "format": "date",
            "description": "The date when the company was founded."
          },
          "about": {
            "type": "string",
            "description": "User facing description of company.",
            "example": "Financial, software, data, and media company headquartered in Midtown Manhattan, New York City"
          }
        }
      },
      "DocumentCounts": {
        "type": "object",
        "description": "A map of {string, int} pairs representing counts of each document type associated with this customer.",
        "additionalProperties": {
          "type": "integer"
        }
      },
      "CustomerMetadata": {
        "properties": {
          "datasourceId": {
            "type": "string",
            "description": "The user visible id of the salesforce customer account."
          }
        }
      },
      "Customer": {
        "required": [
          "id",
          "company"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier."
          },
          "domains": {
            "type": "array",
            "description": "Link to company's associated website domains.",
            "items": {
              "type": "string"
            }
          },
          "company": {
            "$ref": "#/components/schemas/Company"
          },
          "documentCounts": {
            "$ref": "#/components/schemas/DocumentCounts"
          },
          "poc": {
            "type": "array",
            "description": "A list of POC for company.",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/CustomerMetadata"
          },
          "mergedCustomers": {
            "type": "array",
            "description": "A list of Customers.",
            "items": {
              "$ref": "#/components/schemas/Customer"
            }
          },
          "startDate": {
            "type": "string",
            "format": "date",
            "description": "The date when the interaction with customer started."
          },
          "contractAnnualRevenue": {
            "type": "number",
            "format": "double",
            "description": "Average contract annual revenue with that customer."
          },
          "notes": {
            "type": "string",
            "description": "User facing (potentially generated) notes about company.",
            "example": "CIO is interested in trying out the product."
          }
        }
      },
      "RelatedObject": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the related object"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata to help FE show a loading state, while not having the actual object",
            "properties": {
              "name": {
                "type": "string",
                "description": "placeholder name of the object, not the relationship"
              }
            }
          }
        }
      },
      "RelatedObjectEdge": {
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedObject"
            }
          }
        }
      },
      "RelatedObjects": {
        "properties": {
          "relatedObjects": {
            "type": "object",
            "description": "A list of objects related to a source object.",
            "additionalProperties": {
              "$ref": "#/components/schemas/RelatedObjectEdge"
            }
          }
        }
      },
      "PersonToTeamRelationship": {
        "required": [
          "person"
        ],
        "type": "object",
        "description": "Metadata about the relationship of a person to a team.",
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "relationship": {
            "type": "string",
            "description": "The team member's relationship to the team. This defaults to MEMBER if not set.",
            "default": "MEMBER",
            "enum": [
              "MEMBER",
              "MANAGER",
              "LEAD",
              "POINT_OF_CONTACT",
              "OTHER"
            ]
          },
          "customRelationshipStr": {
            "type": "string",
            "description": "Displayed name for the relationship if relationship is set to `OTHER`."
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "description": "The team member's start date"
          }
        }
      },
      "TeamEmail": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "An email address"
          },
          "type": {
            "type": "string",
            "enum": [
              "PRIMARY",
              "SECONDARY",
              "ONCALL",
              "OTHER"
            ],
            "default": "OTHER"
          },
          "isUserGenerated": {
            "type": "boolean",
            "description": "true iff the email was manually added by a user from within Glean (aka not from the original data source)"
          }
        }
      },
      "DatasourceProfile": {
        "required": [
          "datasource",
          "handle"
        ],
        "properties": {
          "datasource": {
            "type": "string",
            "example": "github",
            "description": "The datasource the profile is of."
          },
          "handle": {
            "type": "string",
            "description": "The display name of the person in the given datasource."
          },
          "url": {
            "type": "string",
            "description": "URL to view the user's profile."
          },
          "nativeAppUrl": {
            "type": "string",
            "description": "A deep link, if available, into the datasource's native application for the user's platform (i.e. slack://...)."
          },
          "isUserGenerated": {
            "type": "boolean",
            "description": "For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)"
          }
        }
      },
      "Team": {
        "allOf": [
          {
            "$ref": "#/components/schemas/RelatedObjects"
          },
          {
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier"
              },
              "name": {
                "type": "string",
                "description": "Team name"
              },
              "description": {
                "type": "string",
                "description": "A description of the team"
              },
              "businessUnit": {
                "type": "string",
                "description": "Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."
              },
              "department": {
                "type": "string",
                "description": "An organizational unit where everyone has a similar task, e.g. `Engineering`."
              },
              "photoUrl": {
                "type": "string",
                "description": "A link to the team's photo"
              },
              "bannerUrl": {
                "type": "string",
                "description": "A link to the team's banner photo"
              },
              "externalLink": {
                "type": "string",
                "format": "uri",
                "description": "Link to a team page on the internet or your company's intranet"
              },
              "members": {
                "type": "array",
                "description": "The members on this team",
                "items": {
                  "$ref": "#/components/schemas/PersonToTeamRelationship"
                }
              },
              "memberCount": {
                "type": "integer",
                "description": "Number of members on this team (recursive; includes all individuals that belong to this team, and all individuals that belong to a subteam within this team)"
              },
              "emails": {
                "type": "array",
                "description": "The emails for this team",
                "items": {
                  "$ref": "#/components/schemas/TeamEmail"
                }
              },
              "datasourceProfiles": {
                "type": "array",
                "description": "The datasource profiles of the team",
                "items": {
                  "$ref": "#/components/schemas/DatasourceProfile"
                }
              },
              "datasource": {
                "type": "string",
                "description": "the data source of the team, e.g. GDRIVE"
              },
              "createdFrom": {
                "type": "string",
                "description": "For teams created from docs, the doc title. Otherwise empty."
              },
              "lastUpdatedAt": {
                "type": "string",
                "format": "date-time",
                "description": "when this team was last updated."
              },
              "status": {
                "type": "string",
                "description": "whether this team is fully processed or there are still unprocessed operations that'll affect it",
                "default": "PROCESSED",
                "enum": [
                  "PROCESSED",
                  "QUEUED_FOR_CREATION",
                  "QUEUED_FOR_DELETION"
                ]
              },
              "canBeDeleted": {
                "type": "boolean",
                "description": "can this team be deleted. Some manually ingested teams like GCS_CSV or PUSH_API cannot",
                "default": true
              },
              "loggingId": {
                "type": "string",
                "description": "The logging id of the team used in scrubbed logs, client analytics, and metrics."
              }
            }
          }
        ]
      },
      "ScopeType": {
        "type": "string",
        "description": "Describes the scope for a ReadPermission, WritePermission, or GrantPermission object",
        "enum": [
          "GLOBAL",
          "OWN"
        ]
      },
      "WritePermission": {
        "description": "Describes the write permissions levels that a user has for a specific feature",
        "properties": {
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          },
          "create": {
            "type": "boolean",
            "description": "True if user has create permission for this feature and scope"
          },
          "update": {
            "type": "boolean",
            "description": "True if user has update permission for this feature and scope"
          },
          "delete": {
            "type": "boolean",
            "description": "True if user has delete permission for this feature and scope"
          }
        }
      },
      "ObjectPermissions": {
        "properties": {
          "write": {
            "$ref": "#/components/schemas/WritePermission"
          }
        }
      },
      "PermissionedObject": {
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/ObjectPermissions",
            "description": "The permissions the current viewer has with respect to a particular object."
          }
        }
      },
      "CustomDataValue": {
        "properties": {
          "displayLabel": {
            "type": "string"
          },
          "stringValue": {
            "type": "string"
          },
          "stringListValue": {
            "type": "array",
            "description": "list of strings for multi-value properties",
            "items": {
              "type": "string"
            }
          },
          "numberValue": {
            "type": "number"
          }
        }
      },
      "CustomData": {
        "type": "object",
        "description": "Custom fields specific to individual datasources",
        "additionalProperties": {
          "$ref": "#/components/schemas/CustomDataValue"
        }
      },
      "CustomEntityMetadata": {
        "properties": {
          "customData": {
            "$ref": "#/components/schemas/CustomData"
          }
        }
      },
      "DocumentSpec": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string",
                "description": "The url for document."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The id for document."
              }
            }
          },
          {
            "type": "object",
            "required": [
              "ugcType",
              "contentId"
            ],
            "properties": {
              "ugcType": {
                "type": "string",
                "enum": [
                  "ANNOUNCEMENTS",
                  "ANSWERS",
                  "COLLECTIONS",
                  "SHORTCUTS"
                ],
                "description": "The type of the user generated content (UGC datasource)."
              },
              "contentId": {
                "type": "integer",
                "description": "The id for user generated content."
              },
              "docType": {
                "type": "string",
                "description": "The specific type of the user generated content type."
              }
            }
          }
        ]
      },
      "GroupType": {
        "type": "string",
        "description": "The type of user group",
        "enum": [
          "DEPARTMENT",
          "ALL",
          "TEAM",
          "JOB_TITLE",
          "ROLE_TYPE",
          "LOCATION",
          "REGION",
          "EXTERNAL_GROUP"
        ]
      },
      "Group": {
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/GroupType"
          },
          "id": {
            "type": "string",
            "description": "A unique identifier for the group. May be the same as name."
          },
          "name": {
            "type": "string",
            "description": "Name of the group."
          }
        }
      },
      "UserRole": {
        "type": "string",
        "description": "A user's role with respect to a specific document.",
        "enum": [
          "OWNER",
          "VIEWER",
          "ANSWER_MODERATOR",
          "EDITOR",
          "VERIFIER"
        ]
      },
      "UserRoleSpecification": {
        "required": [
          "role"
        ],
        "properties": {
          "sourceDocumentSpec": {
            "$ref": "#/components/schemas/DocumentSpec",
            "description": "The document spec of the object this role originates from. The object this role is included with will usually have the same information as this document spec, but if the role is inherited, then the document spec refers to the parent document that the role came from."
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "role": {
            "$ref": "#/components/schemas/UserRole"
          }
        }
      },
      "CustomEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier."
              },
              "title": {
                "type": "string",
                "description": "Title or name of the custom entity."
              },
              "datasource": {
                "type": "string",
                "description": "The datasource the custom entity is from."
              },
              "objectType": {
                "type": "string",
                "description": "The type of the entity. Interpretation is specific to each datasource"
              },
              "metadata": {
                "$ref": "#/components/schemas/CustomEntityMetadata"
              },
              "roles": {
                "type": "array",
                "description": "A list of user roles for the custom entity explicitly granted by the owner.",
                "items": {
                  "$ref": "#/components/schemas/UserRoleSpecification"
                }
              }
            }
          }
        ]
      },
      "AnswerId": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "The opaque id of the answer.",
            "example": 3
          }
        }
      },
      "AnswerDocId": {
        "properties": {
          "docId": {
            "type": "string",
            "description": "Internal document id of the answer. We support using the document id for cases where the client doesn't have the integer id available. If both are available, using the integer id is preferred.",
            "example": "ANSWERS_answer_3"
          }
        }
      },
      "AnswerMutableProperties": {
        "properties": {
          "question": {
            "type": "string",
            "example": "Why is the sky blue?"
          },
          "questionVariations": {
            "type": "array",
            "description": "Additional ways of phrasing this question.",
            "items": {
              "type": "string"
            }
          },
          "bodyText": {
            "type": "string",
            "description": "The plain text answer to the question.",
            "example": "From https://en.wikipedia.org/wiki/Diffuse_sky_radiation, the sky is blue because blue light is more strongly scattered than longer-wavelength light."
          },
          "boardId": {
            "type": "integer",
            "description": "The parent board ID of this Answer, or 0 if it's a floating Answer."
          },
          "audienceFilters": {
            "type": "array",
            "description": "Filters which restrict who should see the answer. Values are taken from the corresponding filters in people search.",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          },
          "addedRoles": {
            "type": "array",
            "description": "A list of user roles for the answer added by the owner.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "removedRoles": {
            "type": "array",
            "description": "A list of user roles for the answer removed by the owner.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "roles": {
            "type": "array",
            "description": "A list of roles for this answer explicitly granted by an owner, editor, or admin.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "sourceDocumentSpec": {
            "$ref": "#/components/schemas/DocumentSpec"
          }
        }
      },
      "StructuredText": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StructuredTextMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "structuredList": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/StructuredTextItem"
                },
                "description": "An array of objects each of which contains either a string or a link which optionally corresponds to a document."
              }
            }
          }
        ]
      },
      "AnswerLike": {
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Person"
          },
          "createTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time the user liked the answer in ISO format (ISO 8601)."
          }
        }
      },
      "AnswerLikes": {
        "required": [
          "likedBy",
          "likedByUser",
          "numLikes"
        ],
        "properties": {
          "likedBy": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerLike"
            }
          },
          "likedByUser": {
            "type": "boolean",
            "description": "Whether the user in context liked the answer."
          },
          "numLikes": {
            "type": "integer",
            "description": "The total number of likes for the answer."
          }
        }
      },
      "Reminder": {
        "required": [
          "assignee",
          "remindAt"
        ],
        "properties": {
          "assignee": {
            "$ref": "#/components/schemas/Person"
          },
          "requestor": {
            "$ref": "#/components/schemas/Person"
          },
          "remindAt": {
            "type": "integer",
            "description": "Unix timestamp for when the reminder should trigger (in seconds since epoch UTC)."
          },
          "createdAt": {
            "type": "integer",
            "description": "Unix timestamp for when the reminder was first created (in seconds since epoch UTC)."
          },
          "reason": {
            "type": "string",
            "description": "An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, \"Duplicate\", \"Incomplete\", \"Incorrect\")."
          }
        }
      },
      "TimePoint": {
        "properties": {
          "epochSeconds": {
            "type": "integer",
            "description": "Epoch seconds. Has precedence over daysFromNow."
          },
          "daysFromNow": {
            "type": "integer",
            "description": "The number of days from now. Specification relative to current time. Can be negative."
          }
        }
      },
      "Period": {
        "properties": {
          "minDaysFromNow": {
            "type": "integer",
            "description": "DEPRECATED - The number of days from now in the past to define upper boundary of time period.",
            "deprecated": true
          },
          "maxDaysFromNow": {
            "type": "integer",
            "description": "DEPRECATED - The number of days from now in the past to define lower boundary of time period.",
            "deprecated": true
          },
          "start": {
            "$ref": "#/components/schemas/TimePoint"
          },
          "end": {
            "$ref": "#/components/schemas/TimePoint"
          }
        }
      },
      "CountInfo": {
        "required": [
          "count"
        ],
        "properties": {
          "count": {
            "type": "integer",
            "description": "The counter value"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "org": {
            "type": "string",
            "description": "The unit of organization over which we did the count aggregation, e.g. org (department) or company"
          }
        }
      },
      "VerificationMetadata": {
        "required": [
          "documentId"
        ],
        "properties": {
          "lastVerifier": {
            "$ref": "#/components/schemas/Person"
          },
          "lastVerificationTs": {
            "type": "integer",
            "description": "The unix timestamp of the verification (in seconds since epoch UTC)."
          },
          "expirationTs": {
            "type": "integer",
            "description": "The unix timestamp of the verification expiration if applicable (in seconds since epoch UTC)."
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "reminders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reminder"
            },
            "description": "Info about all outstanding verification reminders for the document if exists."
          },
          "lastReminder": {
            "$ref": "#/components/schemas/Reminder"
          },
          "visitorCount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountInfo"
            },
            "description": "Number of visitors to the document during included time periods."
          },
          "candidateVerifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "List of potential verifiers for the document e.g. old verifiers and/or users with view/edit permissions."
          }
        }
      },
      "Verification": {
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "enum": [
              "UNVERIFIED",
              "VERIFIED",
              "DEPRECATED"
            ],
            "description": "The verification state for the document."
          },
          "metadata": {
            "$ref": "#/components/schemas/VerificationMetadata"
          }
        }
      },
      "CollectionBaseMutableProperties": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique name of the Collection."
          },
          "description": {
            "type": "string",
            "description": "A brief summary of the Collection's contents."
          },
          "addedRoles": {
            "type": "array",
            "description": "A list of added user roles for the collection.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "removedRoles": {
            "type": "array",
            "description": "A list of removed user roles for the collection.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "audienceFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            },
            "description": "Filters which restrict who should see this collection. Values are taken from the corresponding filters in people search."
          }
        }
      },
      "AnswerBoardMutableProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionBaseMutableProperties"
          }
        ]
      },
      "AnswerBoard": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerBoardMutableProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "required": [
              "id",
              "description"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique ID of the Answer Board."
              },
              "createTime": {
                "type": "string",
                "format": "date-time"
              },
              "updateTime": {
                "type": "string",
                "format": "date-time"
              },
              "creator": {
                "$ref": "#/components/schemas/Person"
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "itemCount": {
                "type": "integer",
                "description": "The number of items currently in the Answer Board. Separated from the actual items so we can grab the count without items."
              },
              "roles": {
                "type": "array",
                "description": "A list of user roles for the Answer Board.",
                "items": {
                  "$ref": "#/components/schemas/UserRoleSpecification"
                }
              }
            }
          }
        ]
      },
      "Thumbnail": {
        "properties": {
          "photoId": {
            "type": "string",
            "description": "Photo id if the thumbnail is from splash."
          },
          "url": {
            "type": "string",
            "description": "Thumbnail url. This can be user provided image and/or from downloaded images hosted by glean."
          }
        }
      },
      "CollectionMutableProperties": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionBaseMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "icon": {
                "type": "string",
                "description": "The emoji icon of this Collection."
              },
              "adminLocked": {
                "type": "boolean",
                "description": "Indicates whether edits are allowed for everyone or only admins."
              },
              "parentId": {
                "type": "integer",
                "description": "The parent of this Collection, or 0 if it's a top-level Collection."
              },
              "thumbnail": {
                "$ref": "#/components/schemas/Thumbnail"
              },
              "allowedDatasource": {
                "type": "string",
                "description": "The datasource type this collection can hold."
              }
            }
          }
        ]
      },
      "CollectionItemMutableProperties": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The optional name of the collection item."
          },
          "description": {
            "type": "string",
            "description": "A helpful description of why this CollectionItem is in the Collection that it's in."
          },
          "icon": {
            "type": "string",
            "description": "The emoji icon for this CollectionItem. Only used for Text type items."
          }
        }
      },
      "UserGeneratedContentId": {
        "properties": {
          "id": {
            "type": "integer",
            "description": "The opaque id of the user generated content."
          }
        }
      },
      "ShortcutMutableProperties": {
        "properties": {
          "inputAlias": {
            "type": "string",
            "description": "link text following go/ prefix as entered by the user."
          },
          "destinationUrl": {
            "type": "string",
            "description": "destination URL for the shortcut."
          },
          "destinationDocumentId": {
            "type": "string",
            "description": "document id for the url, if known."
          },
          "description": {
            "type": "string",
            "description": "A short, plain text blurb to help people understand the intent of the shortcut."
          },
          "unlisted": {
            "type": "boolean",
            "description": "Whether this shortcut is unlisted or not. Unlisted shortcuts are visible to author + admins only."
          },
          "urlTemplate": {
            "type": "string",
            "description": "For variable shortcuts, contains the url template; note, destinationUrl contains default url"
          },
          "addedRoles": {
            "type": "array",
            "description": "A list of user roles added for the Shortcut.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "removedRoles": {
            "type": "array",
            "description": "A list of user roles removed for the Shortcut.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          }
        }
      },
      "ShortcutMetadata": {
        "properties": {
          "createdBy": {
            "$ref": "#/components/schemas/Person"
          },
          "createTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time the shortcut was created in ISO format (ISO 8601)."
          },
          "updatedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time the shortcut was updated in ISO format (ISO 8601)."
          },
          "destinationDocument": {
            "$ref": "#/components/schemas/Document",
            "description": "Document that corresponds to the destination url, if applicable."
          },
          "intermediateUrl": {
            "type": "string",
            "description": "The URL from which the user is then redirected to the destination URL. Full replacement for https://go/<inputAlias>."
          },
          "viewPrefix": {
            "type": "string",
            "description": "The part of the shortcut preceding the input alias when used for showing shortcuts to users. Should end with \"/\". e.g. \"go/\" for native shortcuts."
          },
          "isExternal": {
            "type": "boolean",
            "description": "Indicates whether a shortcut is native or external."
          },
          "editUrl": {
            "type": "string",
            "description": "The URL using which the user can access the edit page of the shortcut."
          }
        }
      },
      "Shortcut": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserGeneratedContentId"
          },
          {
            "$ref": "#/components/schemas/ShortcutMutableProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "$ref": "#/components/schemas/ShortcutMetadata"
          },
          {
            "type": "object",
            "required": [
              "inputAlias"
            ],
            "properties": {
              "alias": {
                "type": "string",
                "description": "canonical link text following go/ prefix where hyphen/underscore is removed."
              },
              "title": {
                "type": "string",
                "description": "Title for the Go Link"
              },
              "roles": {
                "type": "array",
                "description": "A list of user roles for the Go Link.",
                "items": {
                  "$ref": "#/components/schemas/UserRoleSpecification"
                }
              }
            }
          }
        ]
      },
      "Collection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionMutableProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "required": [
              "id",
              "description"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The unique ID of the collection."
              },
              "createTime": {
                "type": "string",
                "format": "date-time"
              },
              "updateTime": {
                "type": "string",
                "format": "date-time"
              },
              "creator": {
                "$ref": "#/components/schemas/Person"
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "itemCount": {
                "type": "integer",
                "description": "The number of items currently in the Collection. Separated from the actual items so we can grab the count without items."
              },
              "childCount": {
                "type": "integer",
                "description": "The number of children Collections. Separated from the actual children so we can grab the count without children."
              },
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CollectionItem"
                },
                "description": "The items in this Collection."
              },
              "pinMetadata": {
                "$ref": "#/components/schemas/CollectionPinnedMetadata",
                "description": "Metadata having what categories this collection is pinned to and the eligible categories to pin to"
              },
              "shortcuts": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The names of the shortcuts (Go Links) that point to this Collection."
              },
              "children": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Collection"
                },
                "description": "The children Collections of this Collection."
              },
              "roles": {
                "type": "array",
                "description": "A list of user roles for the collection.",
                "items": {
                  "$ref": "#/components/schemas/UserRoleSpecification"
                }
              }
            }
          }
        ]
      },
      "CollectionItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionItemMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "collectionId",
              "itemType"
            ],
            "properties": {
              "collectionId": {
                "type": "integer",
                "description": "The Collection ID of the Collection that this CollectionItem belongs in."
              },
              "documentId": {
                "type": "string",
                "description": "If this CollectionItem is a Glean-indexed document, the document ID of that document."
              },
              "url": {
                "type": "string",
                "description": "The URL of this CollectionItem."
              },
              "itemId": {
                "type": "string",
                "description": "Unique identifier for the item within the collection it belongs to."
              },
              "createdBy": {
                "$ref": "#/components/schemas/Person",
                "description": "The person who added this collection item."
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Unix timestamp for when the item was first added (in seconds since epoch UTC)."
              },
              "document": {
                "$ref": "#/components/schemas/Document",
                "description": "The Document this CollectionItem corresponds to (omitted if item is a non-indexed URL)."
              },
              "shortcut": {
                "$ref": "#/components/schemas/Shortcut",
                "description": "The Shortcut this CollectionItem corresponds to (only included if item URL is for a Go Link)."
              },
              "collection": {
                "$ref": "#/components/schemas/Collection",
                "description": "The Collection this CollectionItem corresponds to (only included if item type is COLLECTION)."
              },
              "itemType": {
                "type": "string",
                "enum": [
                  "DOCUMENT",
                  "TEXT",
                  "URL",
                  "COLLECTION"
                ]
              }
            }
          }
        ]
      },
      "CollectionPinnableCategories": {
        "type": "string",
        "description": "Categories a collection can be pinned to",
        "enum": [
          "COMPANY_RESOURCE",
          "DEPARTMENT_RESOURCE",
          "TEAM_RESOURCE"
        ]
      },
      "CollectionPinnableTargets": {
        "type": "string",
        "description": "What targets can a collection be pinned to",
        "enum": [
          "RESOURCE_CARD",
          "TEAM_PROFILE_PAGE"
        ]
      },
      "CollectionPinTarget": {
        "required": [
          "category"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/CollectionPinnableCategories"
          },
          "value": {
            "type": "string",
            "description": "Optional. If category supports values, then the additional value for the category e.g. department name for DEPARTMENT_RESOURCE, team name/id for TEAM_RESOURCE and so on."
          },
          "target": {
            "$ref": "#/components/schemas/CollectionPinnableTargets"
          }
        }
      },
      "CollectionPinMetadata": {
        "required": [
          "id",
          "target"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the collection."
          },
          "target": {
            "$ref": "#/components/schemas/CollectionPinTarget"
          }
        }
      },
      "CollectionPinnedMetadata": {
        "required": [
          "pinnedCategories",
          "eligibleCategoriesForPinning"
        ],
        "properties": {
          "existingPins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionPinTarget"
            },
            "description": "List of targets this collection is pinned to"
          },
          "eligiblePins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionPinMetadata"
            },
            "description": "List of targets this collection can be pinned to, excluding the targets this collection is already pinned to. We also include collection id already is pinned to each eligible target, which will be 0 if the target has no pinned collection."
          },
          "pinnedCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionPinnableCategories"
            },
            "description": "DEPRECATED - List of categories this collection is pinned to. Use existingPins instead.",
            "deprecated": true
          },
          "eligibleCategoriesForPinning": {
            "type": "object",
            "additionalProperties": {
              "type": "integer"
            },
            "description": "DEPRECATED - A map of {category, collectionId to bump out} pairs of eligible categories to pin. We exclude categories the collection is already pinned to. CollectionId will be 0 if the the cateogry has no pinned collection. Use eligiblePins instead.",
            "deprecated": true
          }
        }
      },
      "Answer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerId"
          },
          {
            "$ref": "#/components/schemas/AnswerDocId"
          },
          {
            "$ref": "#/components/schemas/AnswerMutableProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "combinedAnswerText": {
                "$ref": "#/components/schemas/StructuredText"
              },
              "likes": {
                "$ref": "#/components/schemas/AnswerLikes"
              },
              "userRole": {
                "type": "string",
                "enum": [
                  "OWNER",
                  "VIEWER",
                  "ANSWER_MODERATOR"
                ],
                "description": "DEPRECATED - use roles instead. User's role on the specific answer.",
                "deprecated": true
              },
              "author": {
                "$ref": "#/components/schemas/Person"
              },
              "createTime": {
                "type": "string",
                "format": "date-time",
                "description": "The time the answer was created in ISO format (ISO 8601)."
              },
              "updateTime": {
                "type": "string",
                "format": "date-time",
                "description": "The time the answer was last updated in ISO format (ISO 8601)."
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "verification": {
                "$ref": "#/components/schemas/Verification"
              },
              "board": {
                "$ref": "#/components/schemas/AnswerBoard",
                "description": "The parent board this answer is in."
              },
              "collections": {
                "type": "array",
                "description": "The collections to which the answer belongs.",
                "items": {
                  "$ref": "#/components/schemas/Collection"
                }
              },
              "documentCategory": {
                "type": "string",
                "description": "The document's document_category(.proto)."
              },
              "sourceDocument": {
                "$ref": "#/components/schemas/Document"
              }
            }
          }
        ]
      },
      "ExtractedQnA": {
        "properties": {
          "heading": {
            "type": "string",
            "description": "Heading text that was matched to produce this result."
          },
          "question": {
            "type": "string",
            "description": "Question text that was matched to produce this result."
          },
          "questionResult": {
            "$ref": "#/components/schemas/SearchResult"
          }
        }
      },
      "AppResult": {
        "required": [
          "datasource"
        ],
        "properties": {
          "datasource": {
            "type": "string",
            "description": "The app or other repository type this represents"
          },
          "docType": {
            "type": "string",
            "description": "The datasource-specific type of the document (e.g. for Jira issues, this is the issue type such as Bug or Feature Request)."
          },
          "mimeType": {
            "type": "string",
            "description": "Mimetype is used to differentiate between sub applications from a datasource (e.g. Sheets, Docs from Gdrive)"
          },
          "iconUrl": {
            "type": "string",
            "description": "If there is available icon url."
          }
        }
      },
      "CodeLine": {
        "properties": {
          "lineNumber": {
            "type": "integer"
          },
          "content": {
            "type": "string"
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "Index ranges depicting matched sections of the line"
          }
        }
      },
      "Code": {
        "properties": {
          "repoName": {
            "type": "string"
          },
          "fileName": {
            "type": "string"
          },
          "fileUrl": {
            "type": "string"
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CodeLine"
            }
          },
          "isLastMatch": {
            "type": "boolean",
            "description": "Last file match for a repo"
          }
        },
        "example": {
          "repoName": "scio",
          "fileName": "README.md",
          "matches": [
            {
              "lineNumber": 1,
              "content": "Welcome to the beginning",
              "ranges": []
            },
            {
              "lineNumber": 2,
              "content": "Second line of the file",
              "ranges": []
            },
            {
              "lineNumber": 3,
              "content": "hello world hello world",
              "ranges": [
                {
                  "startindex": 0,
                  "endIndex": 5
                },
                {
                  "startIndex": 12,
                  "endIndex": 17
                }
              ]
            }
          ]
        }
      },
      "StructuredResult": {
        "properties": {
          "snippets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultSnippet"
            }
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "customer": {
            "$ref": "#/components/schemas/Customer"
          },
          "team": {
            "$ref": "#/components/schemas/Team"
          },
          "customEntity": {
            "$ref": "#/components/schemas/CustomEntity"
          },
          "answer": {
            "$ref": "#/components/schemas/Answer"
          },
          "extractedQnA": {
            "$ref": "#/components/schemas/ExtractedQnA"
          },
          "app": {
            "$ref": "#/components/schemas/AppResult"
          },
          "collection": {
            "$ref": "#/components/schemas/Collection"
          },
          "answerBoard": {
            "$ref": "#/components/schemas/AnswerBoard"
          },
          "code": {
            "$ref": "#/components/schemas/Code"
          },
          "shortcut": {
            "$ref": "#/components/schemas/Shortcut"
          },
          "querySuggestions": {
            "$ref": "#/components/schemas/QuerySuggestionList"
          },
          "relatedDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocuments"
            },
            "description": "A list of documents related to this structured result."
          },
          "debugInfo": {
            "type": "string",
            "description": "Debug details for this result if debug is enabled."
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular result in this particular query. To be used for /feedback reporting."
          },
          "prominence": {
            "type": "string",
            "description": "The level of visual distinction that should be given to a result.\nHERO - A high-confidence result that should feature prominently on the page.\nPROMOTED - May not be the best result but should be given additional visual distinction.\nSTANDARD - Should not be distinct from any other results.\nTODO: Deprecate and use prominence field only in SearchResult.\n",
            "enum": [
              "HERO",
              "PROMOTED",
              "STANDARD"
            ]
          },
          "source": {
            "type": "string",
            "description": "Source context for this result. Possible values depend on the result type.",
            "enum": [
              "EXPERT_DETECTION"
            ]
          }
        }
      },
      "SearchResultProminenceEnum": {
        "type": "string",
        "description": "The level of visual distinction that should be given to a result.\nHERO - A high-confidence result that should feature prominently on the page.\nPROMOTED - May not be the best result but should be given additional visual distinction.\nSTANDARD - Should not be distinct from any other results.\n",
        "enum": [
          "HERO",
          "PROMOTED",
          "STANDARD"
        ]
      },
      "PinDocumentMutableProperties": {
        "properties": {
          "query": {
            "type": "string",
            "description": "DEPRECATED - The query string to be set for the pin"
          },
          "queries": {
            "type": "array",
            "description": "The query strings for which the pinned result will show.",
            "items": {
              "type": "string"
            }
          },
          "audienceFilters": {
            "type": "array",
            "description": "Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          }
        }
      },
      "PinDocument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PinDocumentMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "documentId"
            ],
            "properties": {
              "id": {
                "type": "string",
                "description": "The opaque id of the pin."
              },
              "pinId": {
                "type": "integer",
                "description": "DEPRECATED - Prefer use of `id` string field instead"
              },
              "documentId": {
                "type": "string",
                "description": "The document which should be a pinned result."
              },
              "query": {
                "type": "string",
                "description": "DEPRECATED - The query string for which the result was generated."
              },
              "audienceFilters": {
                "type": "array",
                "description": "Filters which restrict who should see the pinned document. Values are taken from the corresponding filters in people search.",
                "items": {
                  "$ref": "#/components/schemas/FacetFilter"
                }
              },
              "attribution": {
                "$ref": "#/components/schemas/Person"
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "createTime": {
                "type": "string",
                "format": "date-time"
              },
              "updateTime": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "PersonTeam": {
        "description": "Use `id` if you index teams via Glean, and use `name` and `externalLink` if you want to use your own team pages",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Team name"
          },
          "externalLink": {
            "type": "string",
            "format": "uri",
            "description": "Link to a team page on the internet or your company's intranet"
          },
          "relationship": {
            "type": "string",
            "description": "The team member's relationship to the team. This defaults to MEMBER if not set.",
            "default": "MEMBER",
            "enum": [
              "MEMBER",
              "MANAGER",
              "LEAD",
              "POINT_OF_CONTACT",
              "OTHER"
            ]
          },
          "joinDate": {
            "type": "string",
            "format": "date-time",
            "description": "The team member's start date"
          }
        }
      },
      "StructuredLocation": {
        "type": "object",
        "description": "Detailed location with information about country, state, city etc.",
        "properties": {
          "deskLocation": {
            "type": "string",
            "description": "Desk number."
          },
          "timezone": {
            "type": "string",
            "description": "Location's timezone, e.g. UTC, PST."
          },
          "address": {
            "type": "string",
            "description": "Office address or name."
          },
          "city": {
            "type": "string",
            "description": "Name of the city."
          },
          "state": {
            "type": "string",
            "description": "State code."
          },
          "region": {
            "type": "string",
            "description": "Region information, e.g. NORAM, APAC."
          },
          "zipCode": {
            "type": "string",
            "description": "ZIP Code for the address."
          },
          "country": {
            "type": "string",
            "description": "Country name."
          },
          "countryCode": {
            "type": "string",
            "description": "Alpha-2 or Alpha-3 ISO 3166 country code, e.g. US or USA."
          }
        }
      },
      "SocialNetwork": {
        "required": [
          "name",
          "profileUrl"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Possible values are \"twitter\", \"linkedin\"."
          },
          "profileName": {
            "type": "string",
            "description": "Human-readable profile name."
          },
          "profileUrl": {
            "type": "string",
            "description": "Link to profile."
          }
        }
      },
      "PersonDistance": {
        "required": [
          "name",
          "obfuscatedId",
          "distance"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "The display name."
          },
          "obfuscatedId": {
            "type": "string",
            "description": "An opaque identifier that can be used to request metadata for a Person."
          },
          "distance": {
            "type": "number",
            "format": "float",
            "description": "Distance to person, refer to PeopleDistance pipeline on interpretation of the value."
          }
        }
      },
      "InviteInfo": {
        "description": "Information regarding the invite status of a person.",
        "properties": {
          "inviter": {
            "description": "The person that invited this person.",
            "$ref": "#/components/schemas/Person"
          },
          "inviteTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time this person was invited in ISO format (ISO 8601)."
          },
          "signUpTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time this person signed up in ISO format (ISO 8601)."
          },
          "reminderTime": {
            "type": "string",
            "format": "date-time",
            "description": "The time this person was reminded in ISO format (ISO 8601) if a reminder was sent."
          }
        }
      },
      "schemas-ReadPermission": {
        "description": "Describes the read permission level that a user has for a specific feature",
        "properties": {
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          }
        }
      },
      "ReadPermissions": {
        "description": "Describes the read permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject",
        "additionalProperties": {
          "type": "array",
          "description": "List of read permissions (for different scopes but same feature)",
          "items": {
            "$ref": "#/components/schemas/schemas-ReadPermission"
          }
        }
      },
      "WritePermissions": {
        "description": "Describes the write permissions levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject",
        "additionalProperties": {
          "type": "array",
          "description": "List of write permissions (for different scopes but same feature)",
          "items": {
            "$ref": "#/components/schemas/WritePermission"
          }
        }
      },
      "schemas-GrantPermission": {
        "description": "Describes the grant permission level that a user has for a specific feature",
        "properties": {
          "scopeType": {
            "$ref": "#/components/schemas/ScopeType"
          }
        }
      },
      "GrantPermissions": {
        "description": "Describes the grant permission levels that a user has for permissioned features. Key must be PermissionedFeatureOrObject",
        "additionalProperties": {
          "type": "array",
          "description": "List of grant permissions (for different scopes but same feature)",
          "items": {
            "$ref": "#/components/schemas/schemas-GrantPermission"
          }
        }
      },
      "Permissions": {
        "description": "Describes the permissions levels that a user has for permissioned features. When the client sends this, Permissions.read and Permissions.write are the additional permissions granted to a user on top of what they have via their roles. When the server sends this, Permissions.read and Permissions.write are the complete (merged) set of permissions the user has, and Permissions.roles is just for display purposes (along with Permisisons.isModified)",
        "required": [
          "canInsightsDashboard",
          "canAdminSearch",
          "canAdminClientAPIGlobalTokens",
          "createUgcTags",
          "editDocumentTags",
          "canCreateAnnoucements"
        ],
        "properties": {
          "canInsightsDashboard": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user has access to the insights dashboard"
          },
          "canAdminSearch": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user has access to /adminsearch"
          },
          "canAdminClientApiGlobalTokens": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user can administrate client API tokens with global scope"
          },
          "canDlp": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user has access to data loss prevention (DLP) features"
          },
          "createUgcTags": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. Define new UGC tags."
          },
          "editDocumentTags": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. Add and remove existing UGC tags on any document."
          },
          "canCreateAnnoucements": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True is the user can create/update/delete announcements."
          },
          "canAccessGeneratedQna": {
            "type": "boolean",
            "description": "TODO--deprecate in favor of the read and write properties. True if the user has access to the Generated Qna feature on SERP"
          },
          "read": {
            "$ref": "#/components/schemas/ReadPermissions"
          },
          "write": {
            "$ref": "#/components/schemas/WritePermissions"
          },
          "grant": {
            "$ref": "#/components/schemas/GrantPermissions"
          },
          "role": {
            "type": "string",
            "description": "DEPRECATED - The role for the user",
            "deprecated": true
          },
          "roles": {
            "type": "array",
            "description": "The roles a user has.",
            "items": {
              "type": "string"
            }
          },
          "isModified": {
            "type": "boolean",
            "description": "True if this user was given additional permissions beyond what they're granted via their permission role"
          }
        }
      },
      "CustomFieldValueStr": {
        "required": [
          "strText"
        ],
        "properties": {
          "strText": {
            "type": "string",
            "description": "Text field for string value."
          }
        }
      },
      "CustomFieldValueHyperlink": {
        "required": [
          "urlAnchor",
          "urlLink"
        ],
        "properties": {
          "urlAnchor": {
            "type": "string",
            "description": "Anchor text for hyperlink."
          },
          "urlLink": {
            "type": "string",
            "description": "Link for this URL."
          }
        }
      },
      "CustomFieldValuePerson": {
        "properties": {
          "person": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "CustomFieldValue": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/CustomFieldValueStr"
          },
          {
            "$ref": "#/components/schemas/CustomFieldValueHyperlink"
          },
          {
            "$ref": "#/components/schemas/CustomFieldValuePerson"
          }
        ]
      },
      "CustomFieldData": {
        "required": [
          "label",
          "values",
          "displayable"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "A user-facing label for this field."
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomFieldValue"
            }
          },
          "displayable": {
            "type": "boolean",
            "description": "Determines whether the client should display this custom field",
            "default": true
          }
        }
      },
      "TimeInterval": {
        "required": [
          "start",
          "end"
        ],
        "properties": {
          "start": {
            "type": "string",
            "description": "The RFC3339 timestamp formatted start time of this event."
          },
          "end": {
            "type": "string",
            "description": "The RFC3339 timestamp formatted end time of this event."
          }
        }
      },
      "AnonymousEvent": {
        "description": "A generic, light-weight calendar event.",
        "type": "object",
        "properties": {
          "time": {
            "$ref": "#/components/schemas/TimeInterval"
          },
          "eventType": {
            "description": "The nature of the event, for example \"out of office\".",
            "type": "string",
            "enum": [
              "DEFAULT",
              "OUT_OF_OFFICE"
            ]
          }
        }
      },
      "IconConfig": {
        "description": "Defines how to render an icon",
        "properties": {
          "generatedBackgroundColorKey": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "iconType": {
            "enum": [
              "COLLECTION",
              "CUSTOM",
              "DATASOURCE",
              "DATASOURCE_INSTANCE",
              "FAVICON",
              "FILE_TYPE",
              "GENERATED_BACKGROUND",
              "GLYPH",
              "MIME_TYPE",
              "NO_ICON",
              "PERSON",
              "REACTIONS",
              "URL"
            ]
          },
          "name": {
            "type": "string",
            "description": "The name of the icon if applicable, e.g. the glyph name for IconType.GLYPH icons"
          },
          "url": {
            "type": "string",
            "description": "The URL to an image to be displayed if applicable, e.g. the url for iconType.URL icons"
          }
        },
        "example": {
          "color": "#343CED",
          "key": "person_icon",
          "iconType": "GLYPH",
          "name": "user"
        }
      },
      "Badge": {
        "type": "object",
        "description": "Displays a user's accomplishment or milestone",
        "properties": {
          "key": {
            "type": "string",
            "description": "An auto generated unique identifier."
          },
          "displayName": {
            "type": "string",
            "description": "The badge name displayed to users"
          },
          "iconConfig": {
            "$ref": "#/components/schemas/IconConfig"
          },
          "pinned": {
            "type": "boolean",
            "description": "The badge should be shown on the PersonAttribution"
          }
        },
        "example": {
          "key": "deployment_name_new_hire",
          "displayName": "New hire",
          "iconConfig": [
            {
              "$ref": "../../shared/common.yaml#/components/schemas/IconConfig/example"
            }
          ]
        }
      },
      "PersonMetadata": {
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "FULL_TIME",
              "CONTRACTOR",
              "NON_EMPLOYEE"
            ],
            "example": "FULL_TIME"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the person"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the person"
          },
          "title": {
            "type": "string",
            "description": "Job title."
          },
          "businessUnit": {
            "type": "string",
            "description": "Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses."
          },
          "department": {
            "type": "string",
            "description": "An organizational unit where everyone has a similar task, e.g. `Engineering`."
          },
          "teams": {
            "description": "Info about the employee's team(s).",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonTeam"
            }
          },
          "departmentCount": {
            "type": "integer",
            "description": "The number of people in this person's department."
          },
          "email": {
            "type": "string",
            "description": "The user's primary email address"
          },
          "aliasEmails": {
            "type": "array",
            "description": "Additional email addresses of this user beyond the primary, if any.",
            "items": {
              "type": "string"
            }
          },
          "location": {
            "type": "string",
            "description": "User facing string representing the person's location."
          },
          "structuredLocation": {
            "$ref": "#/components/schemas/StructuredLocation"
          },
          "externalProfileLink": {
            "type": "string",
            "description": "Link to a customer's internal profile page. This is set to '#' when no link is desired."
          },
          "manager": {
            "$ref": "#/components/schemas/Person"
          },
          "managementChain": {
            "description": "The chain of reporting in the company as far up as it goes. The last entry is this person's direct manager.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "phone": {
            "type": "string",
            "description": "Phone number as a number string."
          },
          "photoUrl": {
            "type": "string",
            "description": "The URL of the person's avatar. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."
          },
          "uneditedPhotoUrl": {
            "type": "string",
            "description": "The original photo URL of the person's avatar before any edits they made are applied"
          },
          "bannerUrl": {
            "type": "string",
            "description": "The URL of the person's banner photo."
          },
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date when the employee started.",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date",
            "description": "If a former employee, the last date of employment."
          },
          "bio": {
            "type": "string",
            "description": "Short biography or mission statement of the employee."
          },
          "pronoun": {
            "type": "string",
            "description": "She/her, He/his or other pronoun."
          },
          "orgSizeCount": {
            "type": "integer",
            "description": "The total recursive size of the people reporting to this person, or 1"
          },
          "directReportsCount": {
            "type": "integer",
            "description": "The total number of people who directly report to this person, or 0"
          },
          "preferredName": {
            "type": "string",
            "description": "The preferred name of the person, or a nickname."
          },
          "socialNetwork": {
            "description": "List of social network profiles.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialNetwork"
            }
          },
          "datasourceProfile": {
            "type": "array",
            "description": "List of profiles this user has in different datasources / tools that they use.",
            "items": {
              "$ref": "#/components/schemas/DatasourceProfile"
            }
          },
          "querySuggestions": {
            "$ref": "#/components/schemas/QuerySuggestionList"
          },
          "peopleDistance": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonDistance"
            },
            "description": "List of people and distances to those people from this person. Optionally with metadata."
          },
          "inviteInfo": {
            "$ref": "#/components/schemas/InviteInfo"
          },
          "isSignedUp": {
            "type": "boolean",
            "description": "Whether the user has signed into Glean at least once."
          },
          "lastExtensionUse": {
            "type": "string",
            "format": "date-time",
            "description": "The last time the user has used the Glean extension in ISO 8601 format."
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          },
          "customFields": {
            "type": "array",
            "description": "User customizable fields for additional people information.",
            "items": {
              "$ref": "#/components/schemas/CustomFieldData"
            }
          },
          "loggingId": {
            "type": "string",
            "description": "The logging id of the person used in scrubbed logs, tracking GA metrics."
          },
          "startDatePercentile": {
            "type": "number",
            "format": "float",
            "description": "Percentage of the company that started strictly after this person. Between [0,100)."
          },
          "busyEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnonymousEvent"
            },
            "description": "Intervals of busy time for this person, along with the type of event they're busy with."
          },
          "profileBoolSettings": {
            "type": "object",
            "additionalProperties": {
              "type": "boolean"
            },
            "description": "flag settings to indicate user profile settings for certain items"
          },
          "badges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Badge"
            },
            "description": "The badges that a user has earned over their lifetime."
          }
        },
        "example": {
          "department": "Movies",
          "email": "george@example.com",
          "location": "Hollywood, CA",
          "phone": 6505551234,
          "photoUrl": "https://example.com/george.jpg",
          "startDate": "2000-01-23",
          "title": "Actor"
        }
      },
      "DocumentVisibility": {
        "type": "string",
        "description": "The level of visibility of the document as understood by our system. PRIVATE - Only one person is able to see the document SPECIFIC_PEOPLE_AND_GROUPS - Only specific people and/or groups can see the document DOMAIN_LINK - Anyone in the domain with the link can see the document DOMAIN_VISIBLE - Anyone in the domain can search for the document PUBLIC_LINK - Anyone with the link can see the document PUBLIC_VISIBLE - Anyone on the internet can search for the document",
        "enum": [
          "PRIVATE",
          "SPECIFIC_PEOPLE_AND_GROUPS",
          "DOMAIN_LINK",
          "DOMAIN_VISIBLE",
          "PUBLIC_LINK",
          "PUBLIC_VISIBLE"
        ]
      },
      "Reaction": {
        "properties": {
          "type": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "description": "The count of the reaction type on the document."
          },
          "reactors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "reactedByViewer": {
            "type": "boolean",
            "description": "Whether the user in context reacted with this type to the document."
          }
        }
      },
      "Share": {
        "description": "Search endpoint will only fill out numDays ago since that's all we need to display shared badge; docmetadata endpoint will fill out all the fields so that we can display shared badge tooltip",
        "required": [
          "numDaysAgo"
        ],
        "properties": {
          "numDaysAgo": {
            "type": "integer",
            "description": "The number of days that has passed since the share happened"
          },
          "sharer": {
            "$ref": "#/components/schemas/Person"
          },
          "sharingDocument": {
            "$ref": "#/components/schemas/Document"
          }
        }
      },
      "DocumentInteractions": {
        "properties": {
          "numComments": {
            "type": "integer",
            "description": "The count of comments (thread replies in the case of slack)."
          },
          "numReactions": {
            "type": "integer",
            "description": "The count of reactions on the document."
          },
          "reactions": {
            "type": "array",
            "description": "To be deprecated in favor of reacts. A (potentially non-exhaustive) list of reactions for the document.",
            "deprecated": true,
            "items": {
              "type": "string"
            }
          },
          "reacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reaction"
            }
          },
          "shares": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Share"
            },
            "description": "Describes instances of someone posting a link to this document in one of our indexed datasources."
          },
          "visitorCount": {
            "$ref": "#/components/schemas/CountInfo"
          }
        }
      },
      "ViewerInfo": {
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "ANSWER_MODERATOR",
              "OWNER",
              "VIEWER"
            ],
            "description": "DEPRECATED - use permissions instead. Viewer's role on the specific document.",
            "deprecated": true
          },
          "lastViewedTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "IndexStatus": {
        "properties": {
          "lastCrawledTime": {
            "description": "When the document was last crawled",
            "type": "string",
            "format": "date-time"
          },
          "lastIndexedTime": {
            "description": "When the document was last indexed",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DocumentMetadata": {
        "properties": {
          "datasource": {
            "type": "string"
          },
          "datasourceInstance": {
            "type": "string",
            "description": "The datasource instance from which the document was extracted."
          },
          "objectType": {
            "type": "string",
            "description": "The type of the result. Interpretation is specific to each datasource. (e.g. for Jira issues, this is the issue type such as Bug or Feature Request)."
          },
          "container": {
            "type": "string",
            "description": "The name of the container (higher level parent, not direct parent) of the result. Interpretation is specific to each datasource (e.g. Channels for Slack, Project for Jira). cf. parentId"
          },
          "parentId": {
            "type": "string",
            "description": "The id of the direct parent of the result. Interpretation is specific to each datasource (e.g. parent issue for Jira). cf. container"
          },
          "mimeType": {
            "type": "string"
          },
          "documentId": {
            "type": "string",
            "description": "The index-wide unique identifier."
          },
          "documentIdHash": {
            "type": "string",
            "description": "Hash of documentId."
          },
          "createTime": {
            "type": "string",
            "format": "date-time"
          },
          "updateTime": {
            "type": "string",
            "format": "date-time"
          },
          "author": {
            "$ref": "#/components/schemas/Person"
          },
          "owner": {
            "$ref": "#/components/schemas/Person"
          },
          "visibility": {
            "$ref": "#/components/schemas/DocumentVisibility"
          },
          "components": {
            "type": "array",
            "description": "A list of components this result is associated with. Interpretation is specific to each datasource. (e.g. for Jira issues, these are [components](https://confluence.atlassian.com/jirasoftwarecloud/organizing-work-with-components-764478279.html).)",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "The status or disposition of the result. Interpretation is specific to each datasource. (e.g. for Jira issues, this is the issue status such as Done, In Progress or Will Not Fix)."
          },
          "statusCategory": {
            "type": "string",
            "description": "The status category of the result. Meant to be more general than status. Interpretation is specific to each datasource."
          },
          "pins": {
            "type": "array",
            "description": "A list of stars associated with this result.  \"Pin\" is an older name.",
            "items": {
              "$ref": "#/components/schemas/PinDocument"
            }
          },
          "priority": {
            "type": "string",
            "description": "The document priority. Interpretation is datasource specific."
          },
          "assignedTo": {
            "$ref": "#/components/schemas/Person"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/Person"
          },
          "labels": {
            "type": "array",
            "description": "A list of tags for the document. Interpretation is datasource specific.",
            "items": {
              "type": "string"
            }
          },
          "collections": {
            "type": "array",
            "description": "A list of collections that the document belongs to.",
            "items": {
              "$ref": "#/components/schemas/Collection"
            }
          },
          "datasourceId": {
            "type": "string",
            "description": "The user-visible datasource specific id (e.g. Salesforce case number for example, GitHub PR number)."
          },
          "interactions": {
            "$ref": "#/components/schemas/DocumentInteractions"
          },
          "verification": {
            "$ref": "#/components/schemas/Verification"
          },
          "viewerInfo": {
            "$ref": "#/components/schemas/ViewerInfo"
          },
          "permissions": {
            "$ref": "#/components/schemas/ObjectPermissions"
          },
          "visitCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "shortcuts": {
            "type": "array",
            "description": "A list of shortcuts of which destination url is for the document.",
            "items": {
              "$ref": "#/components/schemas/Shortcut"
            }
          },
          "path": {
            "type": "string",
            "description": "For file datasources like onedrive/github etc this has the path to the file"
          },
          "customData": {
            "$ref": "#/components/schemas/CustomData"
          },
          "documentCategory": {
            "type": "string",
            "description": "The document's document_category(.proto)."
          },
          "contactPerson": {
            "$ref": "#/components/schemas/Person"
          },
          "thumbnail": {
            "$ref": "#/components/schemas/Thumbnail",
            "description": "A thumbnail image representing this document."
          },
          "indexStatus": {
            "$ref": "#/components/schemas/IndexStatus"
          }
        },
        "example": {
          "container": "container",
          "parentId": "JIRA_EN-1337",
          "createTime": "2000-01-23T04:56:07.000Z",
          "datasource": "datasource",
          "author": {
            "name": "name"
          },
          "documentId": "documentId",
          "updateTime": "2000-01-23T04:56:07.000Z",
          "mimeType": "mimeType",
          "objectType": "Feature Request",
          "components": [
            "Backend",
            "Networking"
          ],
          "status": [
            "Done"
          ],
          "customData": {
            "someCustomField": "someCustomValue"
          }
        }
      },
      "DocumentSection": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the document section (e.g. the section header)."
          },
          "url": {
            "type": "string",
            "description": "The permalink of the document section."
          }
        }
      },
      "StructuredTextItem": {
        "properties": {
          "link": {
            "type": "string",
            "example": "https://en.wikipedia.org/wiki/Diffuse_sky_radiation"
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "text": {
            "type": "string",
            "example": "Because its wavelengths are shorter, blue light is more strongly scattered than the longer-wavelength lights, red or green. Hence the result that when looking at the sky away from the direct incident sunlight, the human eye perceives the sky to be blue."
          }
        }
      },
      "AnnouncementMutableProperties": {
        "properties": {
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the announcement becomes active."
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the announcement expires."
          },
          "title": {
            "type": "string",
            "description": "The headline of the announcement."
          },
          "body": {
            "$ref": "#/components/schemas/StructuredText"
          },
          "emoji": {
            "type": "string",
            "description": "An emoji used to indicate the nature of the announcement."
          },
          "thumbnail": {
            "$ref": "#/components/schemas/Thumbnail"
          },
          "banner": {
            "$ref": "#/components/schemas/Thumbnail",
            "description": "Optional variant of thumbnail cropped for header background."
          },
          "audienceFilters": {
            "type": "array",
            "description": "Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          },
          "sourceDocumentId": {
            "type": "string",
            "description": "The Document ID of the Source Document this Announcement was created from (e.g. Slack thread)."
          },
          "hideAttribution": {
            "type": "boolean",
            "description": "Whether or not to hide an author attribution."
          },
          "channel": {
            "type": "string",
            "enum": [
              "MAIN",
              "SOCIAL_FEED"
            ],
            "description": "This determines whether this is a Social Feed post or a regular announcement."
          },
          "isPrioritized": {
            "type": "boolean",
            "description": "Used by the Social Feed to pin posts to the front of the feed."
          },
          "viewUrl": {
            "type": "string",
            "description": "Url for viewing the announcement. It will be set to document url for announcements from other datasources e.g. simpplr. Can only be written when channel=\"SOCIAL_FEED\"."
          }
        }
      },
      "AnnouncementCreateOrUpdateData": {
        "required": [
          "title",
          "endTime"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "If editing an existing announcement, the announcement's ID."
          },
          "title": {
            "type": "string",
            "description": "The headline of the announcement."
          },
          "structuredText": {
            "$ref": "#/components/schemas/StructuredText"
          },
          "emoji": {
            "type": "string",
            "description": "An emoji used to indicate the nature of the announcement."
          },
          "startTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the announcement becomes active. If omitted, the announement will become active immediately."
          },
          "endTime": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the announcement expires."
          },
          "audienceFilters": {
            "type": "array",
            "description": "Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          }
        }
      },
      "CreateAnnouncementRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "title",
              "startTime",
              "endTime"
            ],
            "properties": {
              "data": {
                "$ref": "#/components/schemas/AnnouncementCreateOrUpdateData",
                "description": "DEPRECATED - use AnnouncementMutableProperties instead.",
                "deprecated": true
              }
            }
          }
        ]
      },
      "DraftProperties": {
        "properties": {
          "draftId": {
            "type": "integer",
            "description": "The opaque id of the associated draft."
          }
        },
        "example": {
          "draftId": 342
        }
      },
      "UserActivity": {
        "properties": {
          "actor": {
            "$ref": "#/components/schemas/Person"
          },
          "timestamp": {
            "type": "integer",
            "description": "Unix timestamp of the activity (in seconds since epoch UTC)."
          },
          "action": {
            "type": "string",
            "enum": [
              "ADD",
              "ADD_REMINDER",
              "CLICK",
              "COMMENT",
              "DELETE",
              "DISMISS",
              "EDIT",
              "MENTION",
              "MOVE",
              "OTHER",
              "RESTORE",
              "UNKNOWN",
              "VERIFY",
              "VIEW"
            ],
            "description": "The action for the activity"
          },
          "aggregateVisitCount": {
            "$ref": "#/components/schemas/CountInfo"
          }
        }
      },
      "Announcement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          {
            "$ref": "#/components/schemas/DraftProperties"
          },
          {
            "$ref": "#/components/schemas/PermissionedObject"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The opaque id of the announcement."
              },
              "author": {
                "$ref": "#/components/schemas/Person"
              },
              "createTimestamp": {
                "type": "integer",
                "description": "Server Unix timestamp of the creation time (in seconds since epoch UTC)."
              },
              "lastUpdateTimestamp": {
                "type": "integer",
                "description": "Server Unix timestamp of the last update time (in seconds since epoch UTC)."
              },
              "updatedBy": {
                "$ref": "#/components/schemas/Person"
              },
              "viewerInfo": {
                "type": "object",
                "properties": {
                  "isDismissed": {
                    "type": "boolean",
                    "description": "Whether the viewer has dismissed the announcement."
                  },
                  "isRead": {
                    "type": "boolean",
                    "description": "Whether the viewer has read the announcement."
                  },
                  "userActivity": {
                    "type": "array",
                    "deprecated": true,
                    "description": "A list of actions the viewer has taken on the announcement (e.g. view, dismiss).",
                    "items": {
                      "$ref": "#/components/schemas/UserActivity"
                    }
                  }
                }
              },
              "sourceDocument": {
                "$ref": "#/components/schemas/Document",
                "description": "The source document if the announcement is created from one."
              },
              "isPublished": {
                "type": "boolean",
                "description": "Whether or not the announcement is published."
              }
            }
          }
        ]
      },
      "CreateDraftAnnouncementRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "description": "The opaque id of the parent announcement."
              }
            }
          }
        ]
      },
      "DeleteAnnouncementRequest": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The opaque id of the announcement to be deleted."
          }
        }
      },
      "GetAnnouncementRequest": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the announcement to be retrieved."
          }
        }
      },
      "AnnouncementError": {
        "properties": {
          "errorType": {
            "type": "string",
            "enum": [
              "INVALID_ID"
            ]
          }
        }
      },
      "GetAnnouncementResponse": {
        "properties": {
          "announcement": {
            "$ref": "#/components/schemas/Announcement"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular announcement. To be used for /feedback reporting."
          },
          "error": {
            "$ref": "#/components/schemas/AnnouncementError"
          }
        }
      },
      "GetDraftAnnouncementResponse": {
        "properties": {
          "announcement": {
            "$ref": "#/components/schemas/Announcement"
          },
          "error": {
            "$ref": "#/components/schemas/AnnouncementError"
          }
        }
      },
      "AnnouncementChannel": {
        "type": "string",
        "description": "This determines whether this is a Social Feed post or a regular announcement.",
        "enum": [
          "MAIN",
          "SOCIAL_FEED"
        ]
      },
      "ListAnnouncementsRequest": {
        "properties": {
          "channel": {
            "$ref": "#/components/schemas/AnnouncementChannel",
            "default": "MAIN",
            "description": "Determines the type of Announcement to retrieve. Defaults to MAIN."
          }
        }
      },
      "ListAnnouncementsResponse": {
        "properties": {
          "announcements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Announcement"
            },
            "description": "List of announcements."
          }
        }
      },
      "PreviewStructuredTextRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StructuredTextMutableProperties"
          }
        ]
      },
      "PreviewStructuredTextResponse": {
        "required": [
          "structuredText",
          "combinedAnswerText"
        ],
        "properties": {
          "structuredText": {
            "$ref": "#/components/schemas/StructuredText"
          },
          "docsInaccessibleToUser": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of links the user doesn't have access to."
          },
          "combinedAnswerText": {
            "$ref": "#/components/schemas/StructuredText"
          }
        }
      },
      "UgcDraft": {
        "type": "object",
        "properties": {
          "announcement": {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          "answer": {
            "$ref": "#/components/schemas/AnswerMutableProperties"
          }
        }
      },
      "UgcType": {
        "enum": [
          "ANNOUNCEMENTS_TYPE",
          "ANSWERS_TYPE",
          "COLLECTIONS_TYPE",
          "SHORTCUTS_TYPE"
        ]
      },
      "PreviewUgcRequest": {
        "type": "object",
        "properties": {
          "draft": {
            "$ref": "#/components/schemas/UgcDraft"
          },
          "draftSpec": {
            "$ref": "#/components/schemas/DocumentSpec"
          },
          "type": {
            "$ref": "#/components/schemas/UgcType"
          }
        }
      },
      "PreviewUgcResponse": {
        "properties": {
          "announcement": {
            "$ref": "#/components/schemas/Announcement"
          },
          "answer": {
            "$ref": "#/components/schemas/Answer"
          }
        }
      },
      "PublishDraftAnnouncementRequest": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The opaque id of the draft announcement to be published."
          }
        }
      },
      "UnpublishAnnouncementRequest": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The opaque id of the announcement to be unpublished."
          }
        }
      },
      "UpdateAnnouncementRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "id",
              "title",
              "startTime",
              "endTime"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The opaque id of the announcement."
              },
              "data": {
                "$ref": "#/components/schemas/AnnouncementCreateOrUpdateData",
                "description": "DEPRECATED - use AnnouncementMutableProperties instead.",
                "deprecated": true
              }
            }
          }
        ]
      },
      "UpdateDraftAnnouncementRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnnouncementMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "draftId"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The opaque id of the announcement."
              },
              "draftId": {
                "type": "integer",
                "description": "The opaque id of the draft."
              }
            }
          }
        ]
      },
      "AddedCollections": {
        "properties": {
          "addedCollections": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "IDs of collections to which a document is added."
          }
        }
      },
      "AnswerCreationData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerMutableProperties"
          },
          {
            "$ref": "#/components/schemas/AddedCollections"
          },
          {
            "type": "object",
            "properties": {
              "combinedAnswerText": {
                "$ref": "#/components/schemas/StructuredTextMutableProperties"
              }
            }
          }
        ]
      },
      "CreateAnswerRequest": {
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AnswerCreationData"
          }
        }
      },
      "DeleteAnswerRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerId"
          },
          {
            "$ref": "#/components/schemas/AnswerDocId"
          },
          {
            "type": "object",
            "required": [
              "id"
            ]
          }
        ]
      },
      "RemovedCollections": {
        "properties": {
          "removedCollections": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "IDs of collections from which a document is removed."
          }
        }
      },
      "EditAnswerRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerId"
          },
          {
            "$ref": "#/components/schemas/AnswerDocId"
          },
          {
            "$ref": "#/components/schemas/AnswerMutableProperties"
          },
          {
            "$ref": "#/components/schemas/AddedCollections"
          },
          {
            "$ref": "#/components/schemas/RemovedCollections"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "combinedAnswerText": {
                "$ref": "#/components/schemas/StructuredTextMutableProperties"
              }
            }
          }
        ]
      },
      "GetAnswerRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerId"
          },
          {
            "$ref": "#/components/schemas/AnswerDocId"
          }
        ]
      },
      "AnswerResult": {
        "required": [
          "answer"
        ],
        "properties": {
          "answer": {
            "$ref": "#/components/schemas/Answer"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular answer. To be used for /feedback reporting."
          }
        }
      },
      "GetAnswerError": {
        "properties": {
          "errorType": {
            "type": "string",
            "enum": [
              "NO_PERMISSION",
              "INVALID_ID"
            ]
          },
          "answerAuthor": {
            "$ref": "#/components/schemas/Person"
          }
        }
      },
      "GetAnswerResponse": {
        "properties": {
          "answerResult": {
            "$ref": "#/components/schemas/AnswerResult"
          },
          "error": {
            "$ref": "#/components/schemas/GetAnswerError"
          },
          "answer": {
            "$ref": "#/components/schemas/Answer",
            "deprecated": true
          },
          "trackingToken": {
            "type": "string",
            "description": "DEPRECATED - use answerResult tracking token instead. An opaque token that represents this particular answer. To be used for /feedback reporting.",
            "deprecated": true
          }
        }
      },
      "ListAnswersRequest": {
        "properties": {
          "boardId": {
            "type": "integer",
            "description": "The Answer Board Id to list answers on."
          }
        }
      },
      "ListAnswersResponse": {
        "required": [
          "answers",
          "answerResults"
        ],
        "properties": {
          "answerResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerResult"
            },
            "description": "List of answers with tracking tokens."
          },
          "userRole": {
            "type": "string",
            "enum": [
              "REGULAR",
              "ANSWER_MODERATOR"
            ],
            "description": "DEPRECATED - use permissions instead. User's role for Answers in their workplace.",
            "deprecated": true
          }
        }
      },
      "UpdateAnswerLikesRequest": {
        "required": [
          "answerId",
          "action"
        ],
        "properties": {
          "answerId": {
            "type": "integer",
            "description": "The opaque id of the answer to like.",
            "example": 3
          },
          "answerDocId": {
            "type": "string",
            "description": "Internal document id of the answer. We support using the document id for cases where the client doesn't have the integer id available. If both are available, using the integer id is preferred.",
            "example": "ANSWERS_answer_3"
          },
          "action": {
            "type": "string",
            "enum": [
              "LIKE",
              "UNLIKE"
            ]
          }
        }
      },
      "UpdateAnswerLikesResponse": {
        "required": [
          "likes"
        ],
        "properties": {
          "likes": {
            "$ref": "#/components/schemas/AnswerLikes"
          }
        }
      },
      "CreateAnswerBoardRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerBoardMutableProperties"
          }
        ]
      },
      "AnswerBoardResult": {
        "required": [
          "board"
        ],
        "properties": {
          "board": {
            "$ref": "#/components/schemas/AnswerBoard"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular Answer Board. To be used for /feedback reporting."
          }
        }
      },
      "AnswerBoardError": {
        "required": [
          "errorCode"
        ],
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "NAME_EXISTS",
              "NOT_FOUND",
              "NO_PERMISSIONS"
            ]
          }
        }
      },
      "CreateAnswerBoardResponse": {
        "properties": {
          "boardResult": {
            "$ref": "#/components/schemas/AnswerBoardResult"
          },
          "error": {
            "$ref": "#/components/schemas/AnswerBoardError"
          }
        }
      },
      "DeleteAnswerBoardsRequest": {
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The IDs of the Answer Boards to delete."
          }
        }
      },
      "DeleteAnswerBoardsResponse": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/AnswerBoardError"
          }
        }
      },
      "EditAnswerBoardRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AnswerBoardMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The ID of the Answer Board to modify."
              }
            }
          }
        ]
      },
      "EditAnswerBoardResponse": {
        "properties": {
          "boardResult": {
            "$ref": "#/components/schemas/AnswerBoardResult"
          },
          "error": {
            "$ref": "#/components/schemas/AnswerBoardError"
          }
        }
      },
      "GetAnswerBoardRequest": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the Answer Board to be retrieved."
          }
        }
      },
      "GetAnswerBoardResponse": {
        "properties": {
          "boardResult": {
            "$ref": "#/components/schemas/AnswerBoardResult"
          },
          "error": {
            "$ref": "#/components/schemas/AnswerBoardError"
          }
        }
      },
      "ListAnswerBoardsRequest": {
        "properties": {
          "withAudience": {
            "type": "boolean",
            "description": "Whether to include the audience filters with the listed Answer Boards."
          },
          "withRoles": {
            "type": "boolean",
            "description": "Whether to include the editor roles with the listed Answer Boards."
          }
        }
      },
      "ListAnswerBoardsResponse": {
        "required": [
          "boardResults"
        ],
        "properties": {
          "boardResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnswerBoardResult"
            },
            "description": "List of all Answer Boards, no Answers are included."
          }
        }
      },
      "CheckActasAuthResponse": {
        "required": [
          "isValid"
        ],
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Whether the request supplied a valid actas auth token."
          },
          "errMsg": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "CheckAuthResponse": {
        "required": [
          "isValid"
        ],
        "properties": {
          "isValid": {
            "type": "boolean",
            "description": "Whether the request supplied a valid auth cookie"
          }
        }
      },
      "CreateAuthTokenResponse": {
        "required": [
          "token",
          "expirationTime"
        ],
        "properties": {
          "token": {
            "type": "string",
            "description": "An authentication token that can be passed to any endpoint via Bearer Authentication"
          },
          "expirationTime": {
            "description": "Unix timestamp for when this token expires (in seconds since epoch UTC).",
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "CollectionItemDescriptor": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionItemMutableProperties"
          }
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL of the item being added."
          },
          "documentId": {
            "type": "string",
            "description": "The document ID of the item being added if it's a Glean-indexed document."
          },
          "newNextItemId": {
            "type": "string",
            "description": "The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection"
          },
          "itemType": {
            "type": "string",
            "enum": [
              "DOCUMENT",
              "TEXT",
              "URL"
            ]
          }
        }
      },
      "AddCollectionItemsRequest": {
        "required": [
          "collectionId"
        ],
        "properties": {
          "collectionId": {
            "type": "number",
            "description": "The ID of the Collection to add items to."
          },
          "addedCollectionItemDescriptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectionItemDescriptor"
            },
            "description": "The CollectionItemDescriptors of the items being added."
          }
        }
      },
      "AddCollectionItemsError": {
        "properties": {
          "errorType": {
            "type": "string",
            "enum": [
              "EXISTING_ITEM"
            ]
          }
        }
      },
      "AddCollectionItemsResponse": {
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/Collection",
            "description": "The modified Collection. Only CollectionItemMutableProperties are set for each item."
          },
          "error": {
            "$ref": "#/components/schemas/AddCollectionItemsError"
          }
        }
      },
      "CreateCollectionRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "newNextItemId": {
                "type": "string",
                "description": "The (optional) ItemId of the next CollectionItem in sequence. If omitted, will be added to the end of the Collection. Only used if parentId is specified."
              }
            }
          }
        ]
      },
      "CollectionError": {
        "required": [
          "errorCode"
        ],
        "properties": {
          "errorCode": {
            "type": "string",
            "enum": [
              "NAME_EXISTS",
              "NOT_FOUND",
              "COLLECTION_PINNED",
              "CONCURRENT_HIERARCHY_EDIT",
              "HEIGHT_VIOLATION",
              "WIDTH_VIOLATION",
              "NO_PERMISSIONS"
            ]
          }
        }
      },
      "CreateCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Collection"
          },
          {
            "$ref": "#/components/schemas/CollectionError"
          },
          {
            "type": "object",
            "properties": {
              "collection": {
                "$ref": "#/components/schemas/Collection"
              },
              "error": {
                "$ref": "#/components/schemas/CollectionError"
              }
            }
          }
        ]
      },
      "DeleteCollectionRequest": {
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "description": "The IDs of the collections to delete."
          },
          "allowedDatasource": {
            "type": "string",
            "description": "The datasource allowed in the collection to be deleted."
          }
        }
      },
      "DeleteCollectionItemRequest": {
        "required": [
          "collectionId",
          "itemId"
        ],
        "properties": {
          "collectionId": {
            "type": "number",
            "description": "The ID of the Collection to remove an item in."
          },
          "itemId": {
            "type": "string",
            "description": "The item ID of the CollectionItem to remove from this Collection."
          },
          "documentId": {
            "type": "string",
            "description": "The (optional) document ID of the CollectionItem to remove from this Collection if this is a Glean-indexed document."
          }
        }
      },
      "DeleteCollectionItemResponse": {
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/Collection",
            "description": "The modified Collection. Only CollectionItemMutableProperties are set for each item."
          }
        }
      },
      "EditCollectionRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "id"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "description": "The ID of the collection to modify."
              }
            }
          }
        ]
      },
      "EditCollectionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Collection"
          },
          {
            "$ref": "#/components/schemas/CollectionError"
          },
          {
            "type": "object",
            "properties": {
              "collection": {
                "$ref": "#/components/schemas/Collection"
              },
              "error": {
                "$ref": "#/components/schemas/CollectionError"
              }
            }
          }
        ]
      },
      "EditCollectionItemRequest": {
        "required": [
          "collectionId",
          "itemId"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/CollectionItemMutableProperties"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "collectionId": {
            "type": "integer",
            "description": "The ID of the Collection to edit CollectionItems in."
          },
          "itemId": {
            "type": "string",
            "description": "The ID of the CollectionItem to edit."
          }
        }
      },
      "EditCollectionItemResponse": {
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/Collection",
            "description": "The modified Collection. Only CollectionItemMutableProperties are set for each item."
          }
        }
      },
      "EditDocumentCollectionsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AddedCollections"
          },
          {
            "$ref": "#/components/schemas/RemovedCollections"
          },
          {
            "type": "object",
            "properties": {
              "documentId": {
                "type": "string",
                "description": "The document ID of the item being added to or removed from collections if it's a Glean-indexed document."
              },
              "url": {
                "type": "string",
                "description": "The url of the item being added to or removed from collections."
              },
              "name": {
                "type": "string",
                "description": "Custom title of the document if adding a non-indexed URL."
              },
              "description": {
                "type": "string",
                "description": "The description of this CollectionItem."
              }
            }
          }
        ]
      },
      "EditDocumentCollectionsResponse": {
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document",
            "description": "The modified document. Some fields may be empty but it should at least contain the full updated list of collections."
          }
        }
      },
      "GetCollectionRequest": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the collection to be retrieved."
          },
          "withItems": {
            "type": "boolean",
            "description": "Whether or not to include the Collection Items in this Collection. Only request if absolutely required, as this is expensive."
          },
          "withHierarchy": {
            "type": "boolean",
            "description": "Whether or not to include the top level Collection in this Collection's hierarchy."
          },
          "allowedDatasource": {
            "type": "string",
            "description": "The datasource allowed in the collection returned."
          }
        }
      },
      "GetCollectionResponse": {
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/Collection"
          },
          "rootCollection": {
            "$ref": "#/components/schemas/Collection"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular collection. To be used for /feedback reporting."
          },
          "error": {
            "$ref": "#/components/schemas/CollectionError"
          }
        }
      },
      "ListCollectionsRequest": {
        "properties": {
          "includeAudience": {
            "type": "boolean",
            "description": "Whether to include the audience filters with the listed collections."
          },
          "includeRoles": {
            "type": "boolean",
            "description": "Whether to include the editor roles with the listed collections."
          },
          "allowedDatasource": {
            "type": "string",
            "description": "The datasource type this collection can hold.\nANSWERS - for collections representing answer boards"
          }
        }
      },
      "ListCollectionsResponse": {
        "required": [
          "collections"
        ],
        "properties": {
          "collections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Collection"
            },
            "description": "List of all collections, no collection items are fetched."
          }
        }
      },
      "MoveCollectionItemRequest": {
        "required": [
          "collectionId",
          "itemId"
        ],
        "properties": {
          "collectionId": {
            "type": "integer",
            "description": "The ID of the Collection to move items in."
          },
          "itemId": {
            "type": "string",
            "description": "The item ID of the item being moved."
          },
          "newNextItemId": {
            "type": "string",
            "description": "The (optional) item ID of the item that is the new next of itemId, or empty if this is now the last item. This item does not move, it's used as a reference position to put the itemId in the right position."
          }
        }
      },
      "MoveCollectionItemResponse": {
        "properties": {
          "collection": {
            "$ref": "#/components/schemas/Collection",
            "description": "The modified Collection. Only CollectionItemMutableProperties are set for each item."
          }
        }
      },
      "PinCollectionRequest": {
        "required": [
          "action",
          "id",
          "category"
        ],
        "properties": {
          "action": {
            "type": "string",
            "default": "PIN",
            "enum": [
              "PIN",
              "UNPIN"
            ],
            "description": "Whether to pin or unpin"
          },
          "data": {
            "$ref": "#/components/schemas/CollectionPinMetadata"
          },
          "id": {
            "type": "integer",
            "description": "DEPRECTED - The id of the collection to be pinned. Insted use data.id."
          },
          "category": {
            "$ref": "#/components/schemas/CollectionPinnableCategories",
            "description": "DEPRECATED - use data.target instead.",
            "deprecated": true
          }
        }
      },
      "DisplayableListSource": {
        "properties": {
          "source": {
            "type": "string",
            "enum": [
              "SAVED_SEARCH",
              "COLLECTION"
            ],
            "description": "The type of data that backs this displayable list"
          }
        }
      },
      "DisplayableListFormat": {
        "properties": {
          "format": {
            "type": "string",
            "enum": [
              "LIST"
            ],
            "description": "defines how to render this particular displayable list card"
          }
        }
      },
      "DisplayableListItemUIConfig": {
        "type": "object",
        "description": "UI configurations for each item of the list",
        "properties": {
          "showNewIndicator": {
            "type": "boolean",
            "description": "show a \"New\" pill next to the item"
          }
        }
      },
      "DisplayableListConfig": {
        "type": "object",
        "description": "UI specific configurations for a displayable list",
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayableListFormat"
          },
          {
            "properties": {
              "title": {
                "type": "string",
                "description": "Primary title for the list"
              },
              "enabled": {
                "type": "boolean",
                "description": "Whether the list should be shown to the user"
              },
              "audienceFilters": {
                "type": "array",
                "description": "Filters which restrict who should should see displayable list",
                "items": {
                  "$ref": "#/components/schemas/FacetFilter"
                }
              },
              "itemUIConfig": {
                "$ref": "#/components/schemas/DisplayableListItemUIConfig"
              }
            }
          }
        ]
      },
      "DisplayableList": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DisplayableListSource"
          },
          {
            "type": "object",
            "description": "All configurations for a list that can be displayed in FE",
            "properties": {
              "id": {
                "type": "integer",
                "description": "unique identifier for a list, not unique amongst all objects"
              },
              "sourceId": {
                "type": "string",
                "description": "unstructured identifier for the source to render (id, url, query)"
              },
              "config": {
                "$ref": "#/components/schemas/DisplayableListConfig"
              }
            }
          }
        ]
      },
      "CreateDisplayableListsRequest": {
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayableList"
            }
          }
        }
      },
      "CreateDisplayableListsResponse": {
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayableList"
            }
          }
        }
      },
      "DeleteDisplayableListsRequest": {
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "GetDisplayableListsRequest": {
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "GetDisplayableListsResponse": {
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayableList"
            }
          }
        }
      },
      "UpdateDisplayableListsRequest": {
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayableList"
            }
          }
        }
      },
      "UpdateDisplayableListsResponse": {
        "required": [
          "items"
        ],
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DisplayableList"
            }
          }
        }
      },
      "ImageType": {
        "type": "string",
        "description": "The type of the image",
        "enum": [
          "USER",
          "BACKGROUND",
          "UGC",
          "LOGO",
          "HEADER",
          "ICON"
        ]
      },
      "ImageMetadata": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ImageType"
          },
          "id": {
            "type": "string",
            "description": "ID, if a specific entity/type is requested. The id may have different meaning for each type. For USER, it is user id For UGC, it is the id of the content For ICON, the doctype."
          },
          "ds": {
            "type": "string",
            "description": "A specific datasource for which an image is requested for. The ds may have different meaning for each type and can also be empty for some. For USER, it is empty or datasource the icon is asked for. For UGC, it is the UGC datasource. For ICON, it is datasource instance the icon is asked for."
          },
          "cid": {
            "type": "string",
            "description": "Content id to differentitate multiple images that can have the same type and datasource e.g. thumnail or image from content of UGC. It can also be empty."
          },
          "ext": {
            "type": "string",
            "description": "Extension the image is saved with. The extension data is deduced from content type for image uploads."
          }
        }
      },
      "UploadImageResponse": {
        "required": [
          "url"
        ],
        "properties": {
          "url": {
            "type": "string",
            "description": "Url of the uploaded image."
          },
          "metadata": {
            "$ref": "#/components/schemas/ImageMetadata"
          }
        }
      },
      "InsightsRequest": {
        "required": [
          "categories"
        ],
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "ANNOUNCEMENTS",
                "ANSWERS",
                "COLLECTIONS",
                "CONTENT",
                "QUERIES",
                "SHORTCUTS",
                "USERS"
              ]
            },
            "description": "Categories of data requested. Request can include single or multiple types."
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Departments that the data is requested for. If the empty, corresponds to whole company."
          },
          "dayRange": {
            "$ref": "#/components/schemas/Period"
          }
        }
      },
      "LabeledCountInfo": {
        "required": [
          "label"
        ],
        "properties": {
          "label": {
            "type": "string",
            "description": "Label for the included count information."
          },
          "countInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CountInfo"
            },
            "description": "List of data points for counts for a given date period."
          }
        }
      },
      "UserActivityInsight": {
        "required": [
          "user",
          "activity"
        ],
        "properties": {
          "user": {
            "$ref": "#/components/schemas/Person"
          },
          "activity": {
            "type": "string",
            "enum": [
              "ALL",
              "SEARCH"
            ],
            "description": "Activity e.g. search, home page visit or all."
          },
          "lastActivityTimestamp": {
            "type": "integer",
            "description": "Unix timestamp of the last activity (in seconds since epoch UTC)."
          },
          "activityCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "activeDayCount": {
            "$ref": "#/components/schemas/CountInfo"
          }
        }
      },
      "UserInsightsResponse": {
        "properties": {
          "lastLogTimestamp": {
            "type": "integer",
            "description": "Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."
          },
          "activityInsights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserActivityInsight"
            },
            "description": "Insights for all active users with respect to set of actions."
          },
          "inactiveInsights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserActivityInsight"
            },
            "description": "Insights for all in inactive users with respect to set of actions and time period. Activity count will be set to 0."
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "list of departments applicable for users tab."
          }
        }
      },
      "DocumentInsight": {
        "required": [
          "document"
        ],
        "properties": {
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "viewCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "visitorCount": {
            "$ref": "#/components/schemas/CountInfo"
          }
        }
      },
      "ContentInsightsResponse": {
        "properties": {
          "lastLogTimestamp": {
            "type": "integer",
            "description": "Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."
          },
          "documentInsights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentInsight"
            },
            "description": "Insights for documents."
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "list of departments applicable for contents tab."
          },
          "minDepartmentSizeThreshold": {
            "type": "integer",
            "description": "Min threshold in size of departments while populating results, otherwise 0."
          },
          "minVisitorThreshold": {
            "type": "integer",
            "description": "Minimum number of visitors to a document required to be included in insights."
          }
        }
      },
      "QueryInsight": {
        "required": [
          "query"
        ],
        "properties": {
          "query": {
            "type": "string",
            "description": "The query string the information is about."
          },
          "searchCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "searchorCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "searchWithClickCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "clickCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "similarQueries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryInsight"
            },
            "description": "list of similar queries to current one."
          }
        }
      },
      "QueryInsightsResponse": {
        "properties": {
          "lastLogTimestamp": {
            "type": "integer",
            "description": "Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."
          },
          "queryInsights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryInsight"
            },
            "description": "Insights for queries."
          },
          "lowPerformingQueryInsights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QueryInsight"
            },
            "description": "Insights for low performing queries without good results."
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "list of departments applicable for queries tab."
          },
          "minVisitorThreshold": {
            "type": "integer",
            "description": "Min threshold in number of visitors while populating results, otherwise 0."
          }
        }
      },
      "ShortcutInsight": {
        "required": [
          "shortcut"
        ],
        "properties": {
          "shortcut": {
            "$ref": "#/components/schemas/Shortcut"
          },
          "visitCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "visitorCount": {
            "$ref": "#/components/schemas/CountInfo"
          }
        }
      },
      "ShortcutInsightsResponse": {
        "properties": {
          "lastLogTimestamp": {
            "type": "integer",
            "description": "Unix timestamp of the last activity processed to make the response (in seconds since epoch UTC)."
          },
          "shortcutInsights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortcutInsight"
            },
            "description": "Insights for shortcuts."
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "list of departments applicable for shortcuts tab."
          },
          "minVisitorThreshold": {
            "type": "integer",
            "description": "Min threshold in number of visitors while populating results, otherwise 0."
          }
        }
      },
      "InsightsResponse": {
        "properties": {
          "timeseries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabeledCountInfo"
            },
            "description": "List of timeseries to make charts (if applicable)."
          },
          "users": {
            "$ref": "#/components/schemas/UserInsightsResponse"
          },
          "content": {
            "$ref": "#/components/schemas/ContentInsightsResponse"
          },
          "queries": {
            "$ref": "#/components/schemas/QueryInsightsResponse"
          },
          "collections": {
            "$ref": "#/components/schemas/ContentInsightsResponse"
          },
          "collectionsV2": {
            "$ref": "#/components/schemas/ContentInsightsResponse"
          },
          "shortcuts": {
            "$ref": "#/components/schemas/ShortcutInsightsResponse"
          },
          "announcements": {
            "$ref": "#/components/schemas/ContentInsightsResponse"
          },
          "answers": {
            "$ref": "#/components/schemas/ContentInsightsResponse"
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "list of all departments."
          }
        }
      },
      "EditPermissionsRequest": {
        "required": [
          "permissions"
        ],
        "properties": {
          "userIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ids of the users whose permissions will be edited"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          }
        }
      },
      "EditPermissionsResponse": {
        "required": [
          "permissions"
        ],
        "properties": {
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          }
        }
      },
      "EditPinRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PinDocumentMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "pinId": {
                "type": "integer",
                "description": "DEPRECATED - Prefer use of `id`"
              },
              "id": {
                "type": "string",
                "description": "The opaque id of the pin to be edited"
              }
            }
          }
        ]
      },
      "GetPinRequest": {
        "properties": {
          "pinId": {
            "type": "integer",
            "description": "DEPRECATED - Prefer use of `id`"
          },
          "id": {
            "type": "string",
            "description": "The opaque id of the pin to be fetched"
          }
        }
      },
      "GetPinResponse": {
        "properties": {
          "pin": {
            "$ref": "#/components/schemas/PinDocument"
          }
        }
      },
      "ListPinsResponse": {
        "required": [
          "pins"
        ],
        "properties": {
          "pins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PinDocument"
            },
            "description": "List of pinned documents."
          }
        }
      },
      "PinRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PinDocumentMutableProperties"
          },
          {
            "type": "object",
            "properties": {
              "documentId": {
                "type": "string",
                "description": "The document to be pinned."
              }
            }
          }
        ]
      },
      "Unpin": {
        "properties": {
          "pinId": {
            "type": "integer",
            "description": "DEPRECATED - Prefer use of `id`"
          },
          "id": {
            "type": "string",
            "description": "The opaque id of the pin to be unpinned."
          }
        }
      },
      "SearchRequestSourceInfo": {
        "required": [
          "modality"
        ],
        "properties": {
          "initiator": {
            "type": "string",
            "description": "The means by which the search request was initiated. EVAL - Internal usage for automated evaluation FACETS - A background request to get bucket counts for facets following a user search request MORE - The infinite scroll requested more results for an existing search ONBOARDING - A demo query was issued as part of the onboarding flow ONBOARDING_CHECKLIST - The user performed a search from the search step of the new user onboarding checklist PAGE_LOAD - A SERP was visited without going through regular product UI, e.g. from a bookmark, page refresh, or hitting the browser back button DISCARDED_PAGE_LOAD - as PAGE_LOAD but the page was previously discarded by the browser PREFETCH - Results for a non-active tab were requested, e.g. gmail USER - The user initiated a search by manually typing a query, clicking a suggestion, etc. RECOMMENDATION - A query intent is detected from the user's activity and a search request is issued proactively AUTOMATION - Initiated from an API used for automation by an external developer or integration.",
            "enum": [
              "EVAL",
              "FACETS",
              "MORE",
              "ONBOARDING",
              "ONBOARDING_CHECKLIST",
              "PAGE_LOAD",
              "DISCARDED_PAGE_LOAD",
              "PREFETCH",
              "USER",
              "RECOMMENDATION",
              "AUTOMATION"
            ]
          },
          "modality": {
            "type": "string",
            "description": "The UI paradigm from which the search request was sent. FULLPAGE - The standard web app (including mobile) OVERLAY - An iframe that's not Embedded Search / NSR (No such frame type as of now) OMNIBOX - The browser omnibox CONTEXT_MENU - The browser right-click context menu (powered by the browser extension) EMBEDDED_SEARCH - The embedded search added as an iframe NSR - Native search replacement provided by extension injected iframe SIDEBAR - The extension sidebar GLEANBOT - Gleanbot in Slack, MS Teams, Discord, etc.",
            "enum": [
              "FULLPAGE",
              "OVERLAY",
              "OMNIBOX",
              "CONTEXT_MENU",
              "EMBEDDED_SEARCH",
              "NSR",
              "SIDEBAR",
              "GLEANBOT"
            ]
          },
          "domain": {
            "type": "string",
            "description": "The domain from/on behalf of which the request is being issued. Currently only being used for tracking / logging purposes."
          },
          "platform": {
            "type": "string",
            "description": "Platform from which the search request was sent. Optional field.",
            "enum": [
              "SLACK",
              "DISCORD",
              "MS_TEAMS"
            ]
          },
          "uiElement": {
            "type": "string",
            "description": "The (optional) UI element within the paradigm from which the search request was sent. Each modality will have a dedicated uiElement enum (e.g., SearchRequestGleanbotUIElementEnum)"
          },
          "isDebug": {
            "type": "boolean",
            "description": "Whether the query is for debugging purposes and, as such, should not be included in usage metrics and quality pipelines."
          },
          "clientVersion": {
            "type": "string",
            "description": "An opaque version identifier for the client. This is meant to be used for logging and debugging purposes only."
          }
        }
      },
      "ResultsRequest": {
        "required": [
          "sourceInfo"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The ISO 8601 timestamp associated with the client request.",
            "format": "date-time"
          },
          "trackingToken": {
            "type": "string",
            "description": "A previously received trackingToken for a search associated with the same query. Useful for more requests and requests for other tabs."
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          },
          "sourceInfo": {
            "$ref": "#/components/schemas/SearchRequestSourceInfo"
          },
          "sourceDocument": {
            "$ref": "#/components/schemas/Document",
            "description": "The document from which the ResultsRequest is issued, if any."
          },
          "sc": {
            "type": "string",
            "example": "db.enable_debug=true,qp.idf_threshold=0.3",
            "description": "Debug only search params to to change the flow of control in request handling. It will be passed around service boundaries/endpoints. For more details, https://docs.google.com/document/d/1e6taTfWUL8KNUC9de8kmmG2MG2L6cTx4ulOJfAshDTM/edit. Requires sufficient permissions."
          },
          "pageSize": {
            "type": "integer",
            "example": 100,
            "description": "Hint to the server about how many results to send back. Server may return less or more. Structured results and clustered results don't count towards pageSize."
          },
          "maxSnippetSize": {
            "type": "integer",
            "description": "Hint to the server about how many characters long a snippet may be. Server may return less or more.",
            "example": 400
          }
        }
      },
      "SearchRequestInputDetails": {
        "properties": {
          "hasCopyPaste": {
            "type": "boolean",
            "description": "Whether the associated query was at least partially copy-pasted.  If subsequent requests are issued after a copy-pasted query is constructed (e.g. with facet modifications), this bit should continue to be set for those requests."
          }
        },
        "example": {
          "hasCopyPaste": true
        }
      },
      "SearchRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultsRequest"
          },
          {
            "type": "object",
            "properties": {
              "query": {
                "type": "string",
                "description": "The search terms.",
                "example": "vacation policy"
              },
              "cursor": {
                "type": "string",
                "description": "Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."
              },
              "resultTabIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The unique IDs of the result tabs for which to fetch results. This will have precedence over datasource filters if both are specified and in conflict."
              },
              "inputDetails": {
                "$ref": "#/components/schemas/SearchRequestInputDetails"
              },
              "requestOptions": {
                "$ref": "#/components/schemas/SearchRequestOptions"
              },
              "timeoutMillis": {
                "type": "integer",
                "description": "Timeout in milliseconds for the request. Backend should throw a 408 if request takes longer than this.",
                "example": 5000
              },
              "people": {
                "type": "array",
                "description": "People associated with the search request. Hints to the server to fetch additional information for these people. Note that in this request, an email may be used as a person's obfuscatedId value.",
                "items": {
                  "$ref": "#/components/schemas/Person"
                }
              },
              "disableSpellcheck": {
                "type": "boolean",
                "description": "Whether or not to disable spellcheck."
              }
            }
          }
        ],
        "example": {
          "trackingToken": "trackingToken",
          "query": "vacation policy",
          "pageSize": 10,
          "requestOptions": {
            "debugOptions": {
              "enableDebugging": true
            },
            "facetFilters": [
              {
                "fieldName": "doctype",
                "fieldValues": [
                  "article",
                  "document"
                ]
              },
              {
                "fieldName": "container",
                "fieldValues": [
                  "engineering"
                ]
              }
            ]
          }
        }
      },
      "GeneratedQna": {
        "properties": {
          "question": {
            "type": "string",
            "description": "Search query rephrased into a question."
          },
          "answer": {
            "type": "string",
            "description": "Answer generated for the given query or the generated question."
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "Answer subsections to mark with special formatting (citations, bolding etc)"
          },
          "status": {
            "type": "string",
            "enum": [
              "COMPUTING",
              "DISABLED",
              "FAILED",
              "NO_ANSWER",
              "SKIPPED",
              "SUCCEEDED",
              "TIMEOUT"
            ],
            "description": "Status of backend generating the answer"
          },
          "cursor": {
            "type": "string",
            "description": "An opaque cursor representing the search request"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular result in this particular query. To be used for /feedback reporting."
          },
          "debugInfo": {
            "type": "string",
            "description": "Debug details for this result if debug is enabled."
          }
        }
      },
      "SearchDebugInfo": {
        "properties": {
          "formattedDebugQuery": {
            "type": "string",
            "description": "A formatted string that represents the parsed query."
          },
          "searchConfigurationJson": {
            "type": "string",
            "description": "JSON of the search config"
          },
          "extraArgsJson": {
            "type": "string",
            "description": "JSON of the extra args"
          },
          "parsedQueryJson": {
            "type": "string",
            "description": "JSON for the parsed query, to be used as an override."
          },
          "debugParsedQueryJson": {
            "type": "string",
            "description": "JSON for the parsed query with debugging signals (e.g. syns and spellchecks)"
          },
          "debugScholasticJson": {
            "type": "string",
            "description": "JSON containing Scholastic data (query embeddings, doc similarities)."
          },
          "debugQPMetadataJson": {
            "type": "string",
            "description": "JSON containing QP metadata"
          },
          "debugScholasticMetadataJson": {
            "type": "string",
            "description": "JSON containing Scholastic metadata"
          },
          "debugMinedSamplesJson": {
            "type": "string",
            "description": "JSON containing mined Intelligence samples"
          },
          "debugRetrievalElasticQuery": {
            "type": "string",
            "description": "JSON containing Elastic retrieval query"
          },
          "debugSnippetsElasticQuery": {
            "type": "string",
            "description": "JSON containing Elastic snippets query"
          },
          "elasticPerformanceString": {
            "type": "string",
            "description": "A string showing performance information returned by elastic."
          },
          "scoringLegendString": {
            "type": "string",
            "description": "A legend of what the functions are when computing the backend score"
          },
          "resultsDebugString": {
            "type": "string",
            "description": "Additional debugging details associated with the request."
          },
          "debugKeywordGenerationJson": {
            "type": "string",
            "description": "JSON containing Keyword Generation data for debugging purposes."
          }
        },
        "example": {
          "formattedDebugInfo": "formattedDebugInfo"
        }
      },
      "InvalidOperatorValueError": {
        "properties": {
          "key": {
            "description": "The operator key that has an invalid value.",
            "type": "string"
          },
          "value": {
            "description": "The invalid operator value.",
            "type": "string"
          }
        }
      },
      "ErrorMessage": {
        "properties": {
          "source": {
            "description": "The datasource this message relates to.",
            "type": "string"
          },
          "errorMessage": {
            "type": "string"
          }
        }
      },
      "ErrorInfo": {
        "properties": {
          "badGmailToken": {
            "type": "boolean",
            "description": "Indicates the gmail results could not be fetched due to bad token."
          },
          "badOutlookToken": {
            "type": "boolean",
            "description": "Indicates the outlook results could not be fetched due to bad token."
          },
          "invalidOperators": {
            "type": "array",
            "description": "Indicates results could not be fetched due to invalid operators in the query.",
            "items": {
              "$ref": "#/components/schemas/InvalidOperatorValueError"
            }
          },
          "errorMessages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "ResultsResponse": {
        "properties": {
          "trackingToken": {
            "type": "string",
            "description": "A token that should be passed for additional requests related to this request (such as more results requests)."
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResult"
            }
          },
          "structuredResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StructuredResult"
            }
          },
          "generatedQnaResult": {
            "$ref": "#/components/schemas/GeneratedQna"
          },
          "debugInfo": {
            "$ref": "#/components/schemas/SearchDebugInfo"
          },
          "errorInfo": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "requestID": {
            "type": "string",
            "description": "A platform-generated request ID to correlate backend logs."
          },
          "backendTimeMillis": {
            "type": "integer",
            "format": "int64",
            "description": "Time in milliseconds the backend took to respond to the request.",
            "example": 1100
          }
        }
      },
      "BackendExperimentsContext": {
        "properties": {
          "experimentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "List of experiment ids for the corresponding request."
          }
        }
      },
      "SearchWarning": {
        "required": [
          "warningType"
        ],
        "properties": {
          "warningType": {
            "type": "string",
            "enum": [
              "LONG_QUERY",
              "QUOTED_PUNCTUATION",
              "PUNCTUATION_ONLY",
              "COPYPASTED_QUOTES"
            ],
            "description": "The type of the warning."
          },
          "lastUsedTerm": {
            "type": "string",
            "description": "The last term we considered in the user's long query."
          },
          "quotesIgnoredQuery": {
            "type": "string",
            "description": "The query after ignoring/removing quotes."
          }
        }
      },
      "SearchResponseMetadata": {
        "properties": {
          "rewrittenQuery": {
            "type": "string",
            "description": "A cleaned up or updated version of the query to be displayed in the query box. Useful for mapping visual facets to search operators."
          },
          "searchedQuery": {
            "type": "string",
            "description": "The actual query used to perform search and return results."
          },
          "searchedQueryRanges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "The bolded ranges within the searched query."
          },
          "originalQuery": {
            "type": "string",
            "description": "The query text sent by the client in the request."
          },
          "querySuggestion": {
            "$ref": "#/components/schemas/QuerySuggestion"
          },
          "negatedTerms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of terms that were negated when processing the query."
          },
          "ignoredTerms": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "DEPRECATED - A list of terms that are ignored in search. Used, for example, by negation.",
            "deprecated": true
          },
          "modifiedQueryWasUsed": {
            "type": "boolean",
            "description": "A different query was performed than the one requested."
          },
          "originalQueryHadNoResults": {
            "type": "boolean",
            "description": "No results were found for the original query. The usage of this bit in conjunction with modifiedQueryWasUsed will dictate whether the full page replacement is 0-result or few-result based."
          },
          "searchWarning": {
            "$ref": "#/components/schemas/SearchWarning"
          },
          "triggeredExpertDetection": {
            "type": "boolean",
            "description": "Whether the query triggered expert detection results in the People tab."
          }
        }
      },
      "FacetValue": {
        "properties": {
          "stringValue": {
            "type": "string",
            "example": "engineering",
            "description": "The value that should be set in the FacetFilter when applying this filter to a search request."
          },
          "integerValue": {
            "type": "integer",
            "example": 5
          },
          "displayLabel": {
            "type": "string",
            "example": "engineering",
            "description": "An optional user-friendly label to display in place of the facet value."
          },
          "iconConfig": {
            "$ref": "#/components/schemas/IconConfig"
          }
        }
      },
      "FacetBucket": {
        "properties": {
          "count": {
            "type": "integer",
            "description": "Estimated number of results in this facet.",
            "example": 1
          },
          "datasource": {
            "type": "string",
            "example": "jira",
            "description": "The datasource the value belongs to. This will be used by the all tab to show types across all datasources."
          },
          "percentage": {
            "type": "integer",
            "description": "Estimated percentage of results in this facet.",
            "example": 5
          },
          "value": {
            "$ref": "#/components/schemas/FacetValue"
          }
        }
      },
      "FacetResult": {
        "properties": {
          "sourceName": {
            "type": "string",
            "description": "The source of this facet (e.g. container_name, doc_type, last_updated_at).",
            "example": "container_name"
          },
          "operatorName": {
            "type": "string",
            "description": "How to display this facet. Currently supportes 'SelectSingle' and 'SelectMultiple'.",
            "example": "SelectMultiple"
          },
          "buckets": {
            "type": "array",
            "description": "A list of unique buckets that exist within this result set.",
            "items": {
              "$ref": "#/components/schemas/FacetBucket"
            }
          },
          "hasMoreBuckets": {
            "type": "boolean",
            "description": "Returns true if more buckets exist than those returned. Additional buckets can be retrieve by requesting again with a higher facetBucketSize.",
            "example": false
          },
          "groupName": {
            "type": "string",
            "description": "For most facets this will be the empty string, meaning the facet is high-level and applies to all documents for the datasource. When non-empty, this is used to group facets together (i.e. group facets for each doctype for a certain datasource)",
            "example": "Service Cloud"
          }
        }
      },
      "ResultTab": {
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique ID of the tab. Can be passed in a search request to get results for that tab."
          },
          "count": {
            "type": "integer",
            "description": "The number of results in this tab for the current query."
          },
          "datasource": {
            "type": "string",
            "description": "The datasource associated with the tab, if any."
          },
          "datasourceInstance": {
            "type": "string",
            "description": "The datasource instance associated with the tab, if any."
          }
        }
      },
      "ResultsDescription": {
        "properties": {
          "text": {
            "type": "string",
            "description": "Textual description of the results. Can be shown at the top of SERP, e.g. 'People who write about this topic' for experts in people tab."
          },
          "iconConfig": {
            "$ref": "#/components/schemas/IconConfig",
            "description": "The config for the icon that's displayed with this description"
          }
        }
      },
      "SearchResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultsResponse"
          },
          {
            "$ref": "#/components/schemas/BackendExperimentsContext"
          },
          {
            "type": "object",
            "properties": {
              "metadata": {
                "$ref": "#/components/schemas/SearchResponseMetadata"
              },
              "facetResults": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FacetResult"
                }
              },
              "resultTabs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ResultTab"
                },
                "description": "All result tabs available for the current query. Populated if QUERY_METADATA is specified in the request."
              },
              "resultTabIds": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "The unique IDs of the result tabs to which this response belongs."
              },
              "resultsDescription": {
                "$ref": "#/components/schemas/ResultsDescription"
              },
              "rewrittenFacetFilters": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FacetFilter"
                },
                "description": "The actual applied facet filters based on the operators and facetFilters in the query. Useful for mapping typed operators to visual facets."
              },
              "cursor": {
                "type": "string",
                "description": "Cursor that indicates the start of the next page of results. To be passed in \"more\" requests for this query."
              },
              "hasMoreResults": {
                "type": "boolean",
                "description": "Whether more results are available. Use cursor to retrieve them."
              }
            }
          }
        ],
        "example": {
          "trackingToken": "trackingToken",
          "suggestedSpellCorrectedQuery": "suggestedSpellCorrectedQuery",
          "hasMoreResults": true,
          "errorInfo": {
            "errorMessages": [
              {
                "source": "gmail",
                "errorMessage": "invalid token"
              },
              {
                "source": "slack",
                "errorMessage": "expired token"
              }
            ]
          },
          "debugInfo": {
            "formattedDebugInfo": "formattedDebugInfo"
          },
          "requestID": "5e345ae500ff0befa2b9d1a3ba0001737e7363696f312d323535323137000171756572792d656e64706f696e743a323032303031333074313830343032000100",
          "results": [
            {
              "snippets": [
                {
                  "snippet": "snippet",
                  "mimeType": "mimeType"
                }
              ],
              "metadata": {
                "container": "container",
                "createTime": "2000-01-23T04:56:07.000Z",
                "datasource": "datasource",
                "author": {
                  "name": "name"
                },
                "documentId": "documentId",
                "updateTime": "2000-01-23T04:56:07.000Z",
                "mimeType": "mimeType",
                "objectType": "objectType"
              },
              "debugInfo": {
                "formattedDebugInfo": "formattedDebugInfo"
              },
              "title": "title",
              "url": "url"
            },
            {
              "snippets": [
                {
                  "snippet": "snippet",
                  "mimeType": "mimeType"
                }
              ],
              "metadata": {
                "container": "container",
                "createTime": "2000-01-23T04:56:07.000Z",
                "datasource": "datasource",
                "author": {
                  "name": "name"
                },
                "documentId": "documentId",
                "updateTime": "2000-01-23T04:56:07.000Z",
                "mimeType": "mimeType",
                "objectType": "objectType"
              },
              "debugInfo": {
                "formattedDebugInfo": "formattedDebugInfo"
              },
              "title": "title",
              "url": "url"
            }
          ],
          "facetResults": [
            {
              "buckets": [
                {
                  "percentage": 5,
                  "count": 1,
                  "value": {
                    "stringValue": "stringValue",
                    "integerValue": 5
                  }
                },
                {
                  "percentage": 5,
                  "count": 1,
                  "value": {
                    "stringValue": "stringValue",
                    "integerValue": 5
                  }
                }
              ],
              "sourceName": "sourceName",
              "operatorName": "operatorName",
              "objectType": "objectType"
            },
            {
              "buckets": [
                {
                  "percentage": 5,
                  "count": 1,
                  "value": {
                    "stringValue": "stringValue",
                    "integerValue": 5
                  }
                },
                {
                  "percentage": 5,
                  "count": 1,
                  "value": {
                    "stringValue": "stringValue",
                    "integerValue": 5
                  }
                }
              ],
              "sourceName": "sourceName",
              "operatorName": "operatorName",
              "objectType": "objectType"
            }
          ],
          "rewrittenQuery": "rewrittenQuery",
          "rewrittenFacetFilters": [
            {
              "fieldName": "fieldName",
              "fieldValues": [
                "fieldValues",
                "fieldValues"
              ]
            },
            {
              "fieldName": "fieldName",
              "fieldValues": [
                "fieldValues",
                "fieldValues"
              ]
            }
          ]
        }
      },
      "AskRequest": {
        "required": [
          "searchRequest"
        ],
        "properties": {
          "detectOnly": {
            "type": "boolean",
            "description": "Whether to apply apply only question detection and not answering."
          },
          "searchRequest": {
            "$ref": "#/components/schemas/SearchRequest"
          },
          "operators": {
            "type": "string",
            "description": "Search operators to append to the query"
          }
        }
      },
      "AskResponse": {
        "required": [
          "isQuestion"
        ],
        "properties": {
          "isQuestion": {
            "type": "boolean",
            "description": "Whether or not the query was a question."
          },
          "question": {
            "type": "string",
            "description": "The part of the query which was used as a question for search"
          },
          "searchResponse": {
            "$ref": "#/components/schemas/SearchResponse"
          }
        }
      },
      "AutocompleteRequest": {
        "type": "object",
        "properties": {
          "trackingToken": {
            "type": "string"
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          },
          "sourceInfo": {
            "$ref": "#/components/schemas/SearchRequestSourceInfo"
          },
          "query": {
            "type": "string",
            "description": "Partially typed query.",
            "example": "San Fra"
          },
          "datasourcesFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Filter results to only those relevant to one or more datasources (e.g. jira, gdrive). Results are unfiltered if missing."
          },
          "datasource": {
            "type": "string",
            "description": "Filter to only return results relevant to the given datasource."
          },
          "resultTypes": {
            "type": "array",
            "description": "Filter to only return results of the given type(s). All types may be returned if omitted.",
            "items": {
              "type": "string",
              "enum": [
                "DOCUMENT",
                "HISTORY",
                "OPERATOR",
                "SUGGESTION",
                "ENTITY",
                "GOLINK"
              ]
            }
          },
          "resultSize": {
            "type": "integer",
            "description": "Maximum number of results to be returned. If no value is provided, the backend will cap at 200.\n",
            "example": 10
          },
          "authTokens": {
            "type": "array",
            "description": "Auth tokens which may be used for federated results.",
            "items": {
              "$ref": "#/components/schemas/AuthToken"
            }
          },
          "sc": {
            "type": "string",
            "example": "ro.pero.do_historical_simulation_for_visits=true",
            "description": "Debug only search params to to change the flow of control in request handling. It will be passed around service boundaries/endpoints. For more details,"
          }
        },
        "example": {
          "trackingToken": "trackingToken",
          "query": "what is a que",
          "datasource": "GDRIVE",
          "resultSize": 10
        }
      },
      "OperatorScope": {
        "properties": {
          "datasource": {
            "type": "string"
          },
          "docType": {
            "type": "string"
          }
        }
      },
      "OperatorMetadata": {
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "isCustom": {
            "type": "boolean",
            "description": "Whether this operator is supported by default or something that was created within a workplace app (e.g. custom jira field)."
          },
          "operatorType": {
            "type": "string",
            "enum": [
              "TEXT",
              "DOUBLE",
              "DATE"
            ]
          },
          "helpText": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OperatorScope"
            }
          }
        },
        "example": {
          "name": "Last Updated",
          "operatorType": "DATE",
          "scopes": [
            {
              "datasource": "GDRIVE",
              "docType": "Document"
            },
            {
              "datasource": "ZENDESK"
            }
          ]
        }
      },
      "Quicklink": {
        "description": "An action for a specific datasource that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira",
        "properties": {
          "name": {
            "type": "string",
            "description": "Full action name. Used in autocomplete"
          },
          "shortName": {
            "type": "string",
            "description": "Shortened name. Used in app card"
          },
          "url": {
            "type": "string",
            "description": "The URL for the action"
          },
          "iconConfig": {
            "$ref": "#/components/schemas/IconConfig",
            "description": "The config for the icon for this quicklink"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier of this quicklink"
          },
          "scopes": {
            "type": "array",
            "description": "The scopes for which this quicklink is applicable",
            "items": {
              "type": "string",
              "enum": [
                "APP_CARD",
                "AUTOCOMPLETE_EXACT_MATCH",
                "AUTOCOMPLETE_FUZZY_MATCH",
                "AUTOCOMPLETE_ZERO_QUERY",
                "NEW_TAB_PAGE"
              ]
            }
          }
        }
      },
      "AutocompleteResult": {
        "required": [
          "result",
          "result_type"
        ],
        "properties": {
          "result": {
            "type": "string"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of all possible keywords for given result."
          },
          "resultType": {
            "type": "string",
            "enum": [
              "APP",
              "DOCUMENT",
              "HISTORY",
              "OPERATOR",
              "SUGGESTION",
              "ENTITY",
              "BROWSER_HISTORY",
              "DATASOURCE",
              "QUICKLINK",
              "OPERATOR_VALUE",
              "GOLINK",
              "ADDITIONAL_DOCUMENT"
            ]
          },
          "score": {
            "type": "number",
            "description": "Higher indicates a more confident match."
          },
          "operatorMetadata": {
            "$ref": "#/components/schemas/OperatorMetadata"
          },
          "quicklink": {
            "$ref": "#/components/schemas/Quicklink"
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "url": {
            "type": "string"
          },
          "structuredResult": {
            "$ref": "#/components/schemas/StructuredResult"
          },
          "trackingToken": {
            "type": "string",
            "description": "A token to be passed in /feedback events associated with this autocomplete result."
          },
          "ranges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TextRange"
            },
            "description": "Subsections of the result string to which some special formatting should be applied (eg. bold)"
          }
        },
        "example": {
          "result": "sample result",
          "resultType": "DOCUMENT",
          "score": 4.56,
          "url": "url",
          "trackingToken": "abcd",
          "metadata": [
            {
              "datasource": "confluence"
            },
            {
              "objectType": "page"
            }
          ]
        }
      },
      "AutocompleteResultGroup": {
        "description": "A subsection of the results list from which distinct sections should be created.",
        "properties": {
          "startIndex": {
            "type": "integer",
            "description": "The inclusive start index of the range."
          },
          "endIndex": {
            "type": "integer",
            "description": "The exclusive end index of the range."
          },
          "title": {
            "type": "string",
            "description": "The title of the result group to be displayed by FE. Empty means no title."
          }
        }
      },
      "AutocompleteResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BackendExperimentsContext"
          },
          {
            "type": "object",
            "properties": {
              "trackingToken": {
                "type": "string",
                "description": "An opaque token that represents this particular set of autocomplete results. To be used for /feedback reporting."
              },
              "sessionInfo": {
                "$ref": "#/components/schemas/SessionInfo"
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutocompleteResult"
                }
              },
              "groups": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutocompleteResultGroup"
                },
                "description": "Subsections of the results list from which distinct sections should be created."
              },
              "errorInfo": {
                "$ref": "#/components/schemas/ErrorInfo"
              },
              "backendTimeMillis": {
                "type": "integer",
                "format": "int64",
                "description": "Time in milliseconds the backend took to respond to the request.",
                "example": 1100
              }
            },
            "example": {
              "trackingToken": "trackingToken"
            }
          }
        ]
      },
      "CustomEntityUserRoles": {
        "properties": {
          "addedRoles": {
            "type": "array",
            "description": "A list of user roles for the custom entity added by the owner.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          },
          "removedRoles": {
            "type": "array",
            "description": "A list of user roles for the custom entity removed by the owner.",
            "items": {
              "$ref": "#/components/schemas/UserRoleSpecification"
            }
          }
        }
      },
      "CreateCustomEntityRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomEntity"
          },
          {
            "$ref": "#/components/schemas/CustomEntityUserRoles"
          }
        ]
      },
      "TeamCreationData": {
        "properties": {
          "id": {
            "type": "string",
            "description": "For people field teams, the field value, e.g. ENGINEERING. Otherwise, a doc id used to identify the team"
          },
          "peopleField": {
            "type": "string",
            "description": "if the data source is people fields, then this is the field name (otherwise it's ignored)"
          },
          "datasource": {
            "type": "string",
            "description": "what data source this team comes from, e.g. GDRIVE"
          },
          "createdFrom": {
            "type": "string",
            "description": "If the team is from a doc (i.e. not from a people field), this is the doc title, e.g. for Slack channels, the channel name. Otherwise, it's ignored."
          }
        }
      },
      "CreateTeamsRequest": {
        "properties": {
          "teams": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TeamCreationData"
            },
            "description": "List of all teams from data sources to create"
          }
        }
      },
      "CreateTeamsResponse": {
        "properties": {
          "numErrors": {
            "type": "integer",
            "description": "Number of teams that failed to be created"
          }
        }
      },
      "CustomEntitiesRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IDs of the custom entities to retrieve."
          }
        },
        "example": {
          "ids": [
            "ce123"
          ]
        }
      },
      "CustomEntitiesResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntity"
            },
            "description": "A custom entity object"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of IDs that could not be found."
          }
        }
      },
      "DeleteCustomEntityRequest": {
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "description": "The ID of the custom entity to be deleted."
          }
        }
      },
      "DeleteQueryHistoryRequest": {
        "type": "object",
        "properties": {
          "queries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Queries to delete."
          }
        }
      },
      "DeleteQueryHistoryError": {
        "properties": {
          "errorType": {
            "type": "string",
            "enum": [
              "DELETION_FAILED"
            ]
          }
        }
      },
      "DeleteQueryHistoryResponse": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/DeleteQueryHistoryError"
          }
        }
      },
      "DeleteTeamsRequest": {
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of all team IDs to be deleted"
          }
        }
      },
      "DeleteTeamsResponse": {
        "properties": {
          "numErrors": {
            "type": "integer",
            "description": "Number of teams that failed to be deleted"
          }
        }
      },
      "DocumentMetadataRequest": {
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "description": "The IDs of the documents for which metadata is requested",
            "items": {
              "type": "string"
            }
          },
          "documentFields": {
            "type": "array",
            "description": "The requested metadata fields",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DocumentMetadataResponse": {
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentMetadata"
            },
            "description": "List of document metadata requested."
          }
        }
      },
      "EditCustomEntityRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/CustomEntity"
          },
          {
            "$ref": "#/components/schemas/CustomEntityUserRoles"
          }
        ]
      },
      "FeedRequestOptions": {
        "required": [
          "resultSize"
        ],
        "properties": {
          "resultSize": {
            "type": "integer",
            "description": "Number of results asked in response. If a result is a collection, counts as one."
          },
          "timezoneOffset": {
            "type": "integer",
            "description": "The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."
          },
          "categoryToResultSize": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "resultSize": {
                  "type": "integer"
                }
              }
            },
            "description": "Mapping from category to number of results asked for the category."
          },
          "datasourceFilter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Datasources for which content should be included. Empty is for all."
          },
          "authTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthToken"
            },
            "description": "Auth tokens which may be used for federated retrieval of Feed entries."
          }
        }
      },
      "ClientData": {
        "properties": {
          "lastRefreshTimestamp": {
            "type": "integer",
            "description": "Server unix timestamp of the last refresh/request (in seconds since epoch UTC)."
          }
        }
      },
      "FeedRequest": {
        "required": [
          "refreshType"
        ],
        "properties": {
          "refreshType": {
            "type": "string",
            "enum": [
              "MANUAL",
              "ON_OPEN",
              "BACKGROUND"
            ],
            "description": "Type of refresh requested. Intended for logging and future optimizations."
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DOCUMENT_SUGGESTION",
                "DOCUMENT_SUGGESTION_SCENARIO",
                "TRENDING_DOCUMENT",
                "VERIFICATION_REMINDER",
                "EVENT",
                "ANNOUNCEMENT",
                "MENTION",
                "DATASOURCE_AFFINITY",
                "RECENT",
                "COMPANY_RESOURCE",
                "EXPERIMENTAL",
                "PEOPLE_CELEBRATIONS",
                "DISPLAYABLE_LIST",
                "SOCIAL_LINK",
                "TASKS"
              ]
            },
            "description": "Categories of content requested. An allowlist gives flexibility to request content separately or together."
          },
          "requestOptions": {
            "$ref": "#/components/schemas/FeedRequestOptions"
          },
          "clientData": {
            "$ref": "#/components/schemas/ClientData"
          },
          "timeoutMillis": {
            "type": "integer",
            "description": "Timeout in milliseconds for the request. Backend should throw a 408 if request takes longer."
          },
          "sc": {
            "type": "string",
            "example": "fd.half_time_in_hours=72,fd.min_frequency_for_frequents=2",
            "description": "Debug only feed params to to change the flow of control in request handling."
          },
          "sessionInfo": {
            "$ref": "#/components/schemas/SessionInfo"
          }
        }
      },
      "CalendarAttendee": {
        "required": [
          "person"
        ],
        "properties": {
          "isOrganizer": {
            "type": "boolean",
            "description": "Whether or not this attendee is an organizer."
          },
          "isInGroup": {
            "type": "boolean",
            "description": "Whether or not this attendee is in a group. Needed temporarily at least to support both flat attendees and tree for compatibility."
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "groupAttendees": {
            "type": "array",
            "description": "If this attendee is a group, represents the list of individual attendees in the group.",
            "items": {
              "$ref": "#/components/schemas/CalendarAttendee"
            }
          },
          "responseStatus": {
            "type": "string",
            "enum": [
              "ACCEPTED",
              "DECLINED",
              "NO_RESPONSE",
              "TENTATIVE"
            ]
          }
        }
      },
      "CalendarAttendees": {
        "properties": {
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CalendarAttendee"
            },
            "description": "Full details of some of the attendees of this event"
          },
          "isLimit": {
            "type": "boolean",
            "description": "Whether the total count of the people returned is at the retrieval limit."
          },
          "total": {
            "type": "integer",
            "description": "Total number of attendees in this event."
          },
          "numAccepted": {
            "type": "integer",
            "description": "Total number of attendees who have accepted this event."
          },
          "numDeclined": {
            "type": "integer",
            "description": "Total number of attendees who have declined this event."
          },
          "numNoResponse": {
            "type": "integer",
            "description": "Total number of attendees who have not responded to this event."
          },
          "numTentative": {
            "type": "integer",
            "description": "Total number of attendees who have responded tentatively (i.e. responded maybe) to this event."
          }
        }
      },
      "ConferenceData": {
        "required": [
          "provider",
          "uri"
        ],
        "properties": {
          "provider": {
            "type": "string",
            "enum": [
              "ZOOM",
              "HANGOUTS"
            ]
          },
          "uri": {
            "type": "string",
            "description": "A permalink for the conference."
          },
          "source": {
            "type": "string",
            "enum": [
              "NATIVE_CONFERENCE",
              "LOCATION",
              "DESCRIPTION"
            ]
          }
        }
      },
      "CalendarEvent": {
        "required": [
          "id",
          "url"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/AnonymousEvent"
          },
          {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "The calendar event id"
              },
              "url": {
                "type": "string",
                "description": "A permalink for this calendar event"
              },
              "attendees": {
                "$ref": "#/components/schemas/CalendarAttendees"
              },
              "location": {
                "type": "string",
                "description": "The location that this event is taking place at."
              },
              "conferenceData": {
                "$ref": "#/components/schemas/ConferenceData"
              },
              "description": {
                "type": "string",
                "description": "The HTML description of the event."
              },
              "datasource": {
                "type": "string",
                "description": "The app or other repository type from which the event was extracted"
              }
            }
          }
        ]
      },
      "ClientAction": {
        "required": [
          "type"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "GO_TO_HOME",
              "CREATE",
              "EMAIL",
              "MESSAGE",
              "SHARE"
            ],
            "description": "Type of the client action."
          },
          "quicklink": {
            "$ref": "#/components/schemas/Quicklink",
            "description": "If action can be executed via quick link."
          },
          "destinationUrl": {
            "type": "string",
            "description": "Specific url if action requires a destination url to complete. Has precedence over action context."
          }
        }
      },
      "FeedManualFeedback": {
        "properties": {
          "keyvals": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "A map of {string, string} pairs regarding signals that will be helpful in debugging."
          }
        }
      },
      "FeedEntry": {
        "required": [
          "title"
        ],
        "properties": {
          "entryId": {
            "type": "string",
            "description": "optional ID associated with a single feed entry (displayable_list_id)"
          },
          "title": {
            "type": "string",
            "description": "Title for the result. Can be document title, event title and so on."
          },
          "thumbnail": {
            "$ref": "#/components/schemas/Thumbnail"
          },
          "createdBy": {
            "$ref": "#/components/schemas/Person"
          },
          "uiConfig": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DisplayableListFormat"
              },
              {
                "type": "object",
                "properties": {
                  "additionalFlags": {
                    "$ref": "#/components/schemas/DisplayableListItemUIConfig"
                  }
                }
              }
            ]
          },
          "snippet": {
            "type": "string",
            "description": "A textual snippet representing this entry, dependent on type. For example, for USER_MENTION, it may contain the sentence in which the mention occurred."
          },
          "justificationType": {
            "type": "string",
            "enum": [
              "FREQUENTLY_ACCESSED",
              "RECENTLY_ACCESSED",
              "TRENDING_DOCUMENT",
              "VERIFICATION_REMINDER",
              "SUGGESTED_DOCUMENT",
              "EMPTY_STATE_SUGGESTION",
              "FRECENCY_SCORED",
              "SERVER_GENERATED",
              "USE_CASE",
              "UPDATE_SINCE_LAST_VIEW",
              "RECENTLY_STARTED",
              "EVENT",
              "USER_MENTION",
              "ANNOUNCEMENT",
              "EXTERNAL_ANNOUNCEMENT",
              "POPULARITY_BASED_TRENDING",
              "COMPANY_RESOURCE",
              "EVENT_DOCUMENT_FROM_CONTENT",
              "EVENT_DOCUMENT_FROM_SEARCH",
              "VISIT_AFFINITY_SCORED",
              "SUGGESTED_APP",
              "SUGGESTED_PERSON",
              "ACTIVITY_HIGHLIGHT",
              "SAVED_SEARCH",
              "SUGGESTED_CHANNEL",
              "PEOPLE_CELEBRATIONS",
              "SOCIAL_LINK"
            ],
            "description": "Type of the justification."
          },
          "justification": {
            "type": "string",
            "description": "Server side generated justification string if server provides one."
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular feed entry in this particular response. To be used for /feedback reporting."
          },
          "document": {
            "$ref": "#/components/schemas/Document"
          },
          "event": {
            "$ref": "#/components/schemas/CalendarEvent"
          },
          "announcement": {
            "$ref": "#/components/schemas/Announcement"
          },
          "collection": {
            "$ref": "#/components/schemas/Collection"
          },
          "collectionItem": {
            "$ref": "#/components/schemas/CollectionItem"
          },
          "person": {
            "$ref": "#/components/schemas/Person"
          },
          "app": {
            "$ref": "#/components/schemas/AppResult"
          },
          "activities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserActivity"
            },
            "description": "List of activity where each activity has user, action, timestamp."
          },
          "documentVisitorCount": {
            "$ref": "#/components/schemas/CountInfo"
          },
          "viewUrl": {
            "type": "string",
            "description": "View url for the entry if based on links that are not documents in Glean."
          },
          "additionalClientActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientAction"
            },
            "description": "List of client actions suggested by the backend to be included for entry."
          },
          "manualFeedbackSignals": {
            "$ref": "#/components/schemas/FeedManualFeedback",
            "description": "Entry level manual feedback signals."
          }
        }
      },
      "FeedResult": {
        "required": [
          "category",
          "primaryEntry"
        ],
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "DOCUMENT_SUGGESTION",
              "DOCUMENT_SUGGESTION_SCENARIO",
              "TRENDING_DOCUMENT",
              "USE_CASE",
              "VERIFICATION_REMINDER",
              "EVENT",
              "ANNOUNCEMENT",
              "MENTION",
              "DATASOURCE_AFFINITY",
              "RECENT",
              "COMPANY_RESOURCE",
              "EXPERIMENTAL",
              "PEOPLE_CELEBRATIONS",
              "SOCIAL_LINK",
              "TASKS",
              "DISPLAYABLE_LIST"
            ],
            "description": "Category of the result, one of the requested categories in incoming request."
          },
          "primaryEntry": {
            "$ref": "#/components/schemas/FeedEntry"
          },
          "secondaryEntries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedEntry"
            },
            "description": "Secondary entries for the result e.g. suggested docs for the calendar, carousel."
          },
          "rank": {
            "type": "integer",
            "description": "Rank of the result. Rank is suggested by server. Client side rank may differ."
          },
          "facetResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetResult"
            },
            "description": "DEPRECATED - List of facets that can be used to filter the entry's content.",
            "deprecated": true
          }
        }
      },
      "FeedDebugInfo": {
        "properties": {
          "debugElasticQueries": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "JSON containing Elastic query for suggestions"
          }
        }
      },
      "FeedResponse": {
        "required": [
          "serverTimestamp"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/BackendExperimentsContext"
          },
          {
            "type": "object",
            "properties": {
              "trackingToken": {
                "type": "string",
                "description": "An opaque token that represents this particular feed response."
              },
              "serverTimestamp": {
                "type": "integer",
                "description": "Server unix timestamp (in seconds since epoch UTC)."
              },
              "results": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FeedResult"
                }
              },
              "backendTimeMillis": {
                "type": "integer",
                "format": "int64",
                "description": "Time in milliseconds the backend took to respond to the request."
              },
              "serverBuildVersion": {
                "type": "string",
                "description": "Build versions to be rendered in debug mode."
              },
              "datasourceAffinity": {
                "type": "object",
                "description": "A mapping from datasources to affinity of the user to each with scores.",
                "additionalProperties": {
                  "type": "number",
                  "format": "float",
                  "description": "Score for the datasource affinity. Between [0,1]."
                }
              },
              "debugInfo": {
                "$ref": "#/components/schemas/FeedDebugInfo"
              },
              "manualFeedbackSignals": {
                "$ref": "#/components/schemas/FeedManualFeedback",
                "description": "response level manual feedback signals."
              },
              "companyResourcesCollectionId": {
                "type": "integer",
                "description": "The unique ID of the collection for company resources."
              },
              "facetResults": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FacetResult"
                  }
                },
                "description": "Map from category to the list of facets that can be used to filter the entry's content."
              },
              "mentionsTimeWindowInHours": {
                "type": "integer",
                "description": "The time window (in hours) used for generating user mentions."
              }
            }
          }
        ]
      },
      "GetDocumentsRequest": {
        "required": [
          "documentSpecs"
        ],
        "properties": {
          "documentSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentSpec"
            },
            "description": "The specification for the documents to be retrieved."
          },
          "includeFields": {
            "description": "List of Document fields to return (that aren't returned by default)",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DOCUMENT_CONTENT",
                "LAST_VIEWED_AT",
                "VISITORS_COUNT",
                "RECENT_SHARES"
              ]
            }
          }
        }
      },
      "DocumentOrError": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/Document"
          },
          {
            "type": "object",
            "required": [
              "error"
            ],
            "properties": {
              "error": {
                "type": "string",
                "description": "The text for error, reason."
              }
            }
          }
        ]
      },
      "GetDocumentsResponse": {
        "properties": {
          "documents": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DocumentOrError"
            },
            "description": "The document details or the error if document is not found."
          }
        }
      },
      "GetDocumentAnalyticsRequest": {
        "required": [
          "documentSpecs",
          "dayRange"
        ],
        "properties": {
          "documentSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentSpec"
            },
            "description": "The specification for the documents for which analytics will be retrieved."
          },
          "dayRange": {
            "$ref": "#/components/schemas/Period",
            "description": "The time range analytics is asked for."
          },
          "withClickerCounts": {
            "type": "boolean",
            "description": "Whether response should include click information or not. Default is to not include click information."
          },
          "withFacetAggregations": {
            "type": "boolean",
            "description": "Whether the results will include aggregate counts/info for facets like location, department, etc."
          },
          "withVisitCounts": {
            "type": "boolean",
            "description": "Whether response should include visit counts or not. Default is to return only visitor counts."
          }
        }
      },
      "DocumentAnalytics": {
        "properties": {
          "documentSpec": {
            "$ref": "#/components/schemas/DocumentSpec"
          },
          "visitorCount": {
            "$ref": "#/components/schemas/CountInfo",
            "description": "Number of visitors to the document. The visits do not need to be explicit (e.g. click), may also include other user actions that we deem as high probablity visit (e.g. seen without any user actions)."
          },
          "clickerCount": {
            "$ref": "#/components/schemas/CountInfo",
            "description": "Number of explicit clickers Glean knows about from its surfaces."
          },
          "visitCount": {
            "$ref": "#/components/schemas/CountInfo",
            "description": "Number of visits to the document. The visits do not need to be explicit (e.g. click), may also include other user actions that we deem as high probablity visit (e.g. seen without any user actions)."
          },
          "facetAnalytics": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentFacetAnalytics"
            }
          }
        }
      },
      "DocumentFacetAnalytics": {
        "properties": {
          "facet": {
            "$ref": "#/components/schemas/FacetFilter"
          },
          "analytics": {
            "$ref": "#/components/schemas/DocumentAnalytics"
          }
        }
      },
      "GetDocumentAnalyticsResponse": {
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentAnalytics"
            },
            "description": "Analytics for requested documents. There will be one-to-one mapping for documents included in the request."
          }
        }
      },
      "GetEventsRequest": {
        "required": [
          "ids"
        ],
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ids of the calendar events to be retrieved."
          },
          "authTokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthToken"
            },
            "description": "Auth tokens if client-side authentication."
          }
        }
      },
      "GetEventsResponse": {
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeedResult"
            },
            "description": "The requested events. Uses a FeedResult for now as a Calendar Event doesn't have all event info such as attachments."
          }
        }
      },
      "GetGeneratedQnaRequest": {
        "required": [
          "cursor"
        ],
        "properties": {
          "cursor": {
            "type": "string",
            "description": "An opaque cursor representing the search request"
          }
        }
      },
      "GetGeneratedQnaResponse": {
        "properties": {
          "generatedQnaResult": {
            "$ref": "#/components/schemas/GeneratedQna"
          }
        }
      },
      "SortOptions": {
        "type": "object",
        "properties": {
          "orderBy": {
            "type": "string",
            "enum": [
              "ASC",
              "DESC"
            ]
          },
          "sortBy": {
            "type": "string"
          }
        }
      },
      "ListEntitiesRequest": {
        "type": "object",
        "properties": {
          "filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            }
          },
          "sort": {
            "description": "Use EntitiesSortOrder enum for SortOptions.sortBy",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortOptions"
            }
          },
          "entityType": {
            "type": "string",
            "default": "PEOPLE",
            "enum": [
              "PEOPLE",
              "TEAMS",
              "CUSTOM_ENTITIES"
            ]
          },
          "datasource": {
            "type": "string",
            "description": "The datasource associated with the entity type, most commonly used with CUSTOM_ENTITIES"
          },
          "query": {
            "type": "string",
            "description": "A query string to search for entities that each entity in the response must conform to. An empty query does not filter any entities."
          },
          "sc": {
            "type": "string",
            "example": "db.enable_debug=true, db.log_elastic_caller=ENTITY",
            "description": "Debug only search params to to change the flow of control in request handling. It will be passed around service boundaries/endpoints. For more details, https://docs.google.com/document/d/1e6taTfWUL8KNUC9de8kmmG2MG2L6cTx4ulOJfAshDTM/edit. Requires sufficient permissions."
          },
          "includeFields": {
            "description": "List of entity fields to return (that aren't returned by default)",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "PEOPLE",
                "TEAMS",
                "PEOPLE_DISTANCE",
                "PERMISSIONS",
                "FACETS",
                "INVITE_INFO",
                "LAST_EXTENSION_USE",
                "MANAGEMENT_DETAILS",
                "UNPROCESSED_TEAMS"
              ]
            }
          },
          "pageSize": {
            "type": "integer",
            "example": 100,
            "description": "Hint to the server about how many results to send back. Server may return less."
          },
          "cursor": {
            "type": "string",
            "description": "Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."
          },
          "source": {
            "type": "string",
            "description": "A string denoting the search surface from which the endpoint is called."
          }
        }
      },
      "EntitiesSortOrder": {
        "type": "string",
        "description": "Different ways of sorting entities",
        "enum": [
          "ENTITY_NAME",
          "FIRST_NAME",
          "LAST_NAME",
          "ORG_SIZE_COUNT",
          "START_DATE",
          "TEAM_SIZE",
          "RELEVANCE"
        ]
      },
      "ListEntitiesResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            }
          },
          "teamResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            }
          },
          "customEntityResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomEntity"
            }
          },
          "facetResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetResult"
            }
          },
          "cursor": {
            "type": "string",
            "description": "Pagination cursor. A previously received opaque token representing the position in the overall results at which to start."
          },
          "totalCount": {
            "type": "integer",
            "description": "The total number of entities available"
          },
          "hasMoreResults": {
            "type": "boolean",
            "description": "Whether or not more entities can be fetched."
          },
          "sortOptions": {
            "type": "array",
            "description": "Sort options from EntitiesSortOrder supported for this response. Default is empty list.",
            "items": {
              "$ref": "#/components/schemas/EntitiesSortOrder"
            }
          },
          "customFacetNames": {
            "type": "array",
            "description": "list of Person attributes that are custom setup by deployment",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MessagesRequest": {
        "required": [
          "id",
          "idType",
          "timestampMillis"
        ],
        "properties": {
          "idType": {
            "type": "string",
            "enum": [
              "CHANNEL_NAME",
              "THREAD_ID",
              "CONVERSATION_ID"
            ],
            "description": "Type of the id in the incoming request."
          },
          "id": {
            "type": "string",
            "description": "ID corresponding to the requested idType. Note that channel and threads are represented by the underlying datasource's ID and conversations are represented by their document's ID."
          },
          "workspaceId": {
            "type": "string",
            "description": "Id for the for the workspace in case of multiple workspaces."
          },
          "direction": {
            "type": "string",
            "enum": [
              "OLDER",
              "NEWER"
            ],
            "description": "The direction of the results asked with respect to the reference timestamp. Missing field defaults to OLDER."
          },
          "timestampMillis": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in millis of the reference message."
          },
          "includeRootMessage": {
            "type": "boolean",
            "description": "Whether to include root message in response."
          },
          "datasource": {
            "type": "string",
            "enum": [
              "SLACK",
              "MICROSOFTTEAMS",
              "FACEBOOKWORKPLACE"
            ],
            "description": "The type of the data source. Missing field defaults to SLACK."
          },
          "datasourceInstanceDisplayName": {
            "type": "string",
            "description": "The datasource instance display name from which the document was extracted. This is used for appinstance facet filter for datasources that support multiple instances."
          },
          "sc": {
            "type": "string",
            "example": "db.enable_debug=true,qp.idf_threshold=0.3",
            "description": "Debug only search params to to change the flow of control in request handling. It will be passed around service boundaries/endpoints. For more details, https://docs.google.com/document/d/1e6taTfWUL8KNUC9de8kmmG2MG2L6cTx4ulOJfAshDTM/edit. Requires sufficient permissions."
          }
        }
      },
      "MessagesResponse": {
        "required": [
          "hasMore"
        ],
        "properties": {
          "hasMore": {
            "type": "boolean",
            "description": "Whether there are more results for client to continue requesting."
          },
          "searchResponse": {
            "$ref": "#/components/schemas/SearchResponse"
          },
          "rootMessage": {
            "$ref": "#/components/schemas/SearchResult"
          }
        }
      },
      "PeopleRequest": {
        "type": "object",
        "properties": {
          "timezoneOffset": {
            "type": "integer",
            "description": "The offset of the client's timezone in minutes from UTC. e.g. PDT is -420 because it's 7 hours behind UTC."
          },
          "obfuscatedIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The Person IDs to retrieve. If no IDs are requested, the current user's details are returned."
          },
          "emailIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The email IDs to retrieve. The result is the deduplicated union of emailIds and obfuscatedIds."
          },
          "includeFields": {
            "description": "List of PersonMetadata fields to return (that aren't returned by default)",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BADGES",
                "BUSY_EVENTS",
                "DOCUMENT_ACTIVITY",
                "INVITE_INFO",
                "PEOPLE_DISTANCE",
                "PERMISSIONS",
                "PEOPLE_DETAILS",
                "MANAGEMENT_DETAILS",
                "PEOPLE_PROFILE_SETTINGS",
                "PEOPLE_WITHOUT_MANAGER"
              ]
            }
          },
          "source": {
            "type": "string",
            "description": "A string denoting the search surface from which the endpoint is called."
          }
        },
        "example": {
          "obfuscatedIds": [
            "abc123",
            "abc456"
          ]
        }
      },
      "PeopleResponse": {
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "A Person for each ID in the request, each with PersonMetadata populated."
          },
          "relatedDocuments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RelatedDocuments"
            },
            "description": "A list of documents related to this people response. This is only included if DOCUMENT_ACTIVITY is requested and only 1 person is included in the request."
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of IDs that could not be found."
          }
        }
      },
      "PeopleSuggestionCategory": {
        "type": "string",
        "enum": [
          "INVITE_INACTIVE_PROMO",
          "INVITE_NONUSERS"
        ]
      },
      "PeopleSuggestRequest": {
        "required": [
          "categories"
        ],
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PeopleSuggestionCategory"
            },
            "description": "Categories of data requested. Request can include single or multiple categories."
          },
          "departments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Departments that the data is requested for. If empty, corresponds to whole company."
          }
        }
      },
      "PersonSuggestionList": {
        "required": [
          "category"
        ],
        "properties": {
          "category": {
            "$ref": "#/components/schemas/PeopleSuggestionCategory"
          },
          "people": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "Information about suggested users."
          }
        }
      },
      "PeopleSuggestResponse": {
        "properties": {
          "suggestions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonSuggestionList"
            },
            "description": "Information about people suggestions for asked categories."
          }
        }
      },
      "RecommendationsRequestOptions": {
        "properties": {
          "datasourceFilter": {
            "type": "string",
            "description": "Filter results to a single datasource name (e.g. gmail, slack). All results are returned if missing."
          },
          "contextType": {
            "enum": [
              "ZENDESK_CASE_DEFLECTION",
              "SALESFORCE_CASE_DEFLECTION"
            ],
            "description": "Identifier for what JSON schema to expect for `context`."
          },
          "context": {
            "type": "string",
            "description": "JSON containing client context like case subject input.  Expects schema based on `contextType`."
          },
          "resultProminence": {
            "description": "The types of prominence wanted in results returned. Default is any type.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResultProminenceEnum"
            }
          }
        }
      },
      "RecommendationsRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultsRequest"
          },
          {
            "type": "object",
            "properties": {
              "recommendationDocumentSpec": {
                "$ref": "#/components/schemas/DocumentSpec",
                "description": "Retrieve recommendations for this document.  docID preferred over URL."
              },
              "requestOptions": {
                "$ref": "#/components/schemas/RecommendationsRequestOptions",
                "description": "Options for adjusting the request for recommendations."
              }
            }
          }
        ]
      },
      "RecommendationsResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResultsResponse"
          }
        ]
      },
      "SummarizeRequest": {
        "description": "Summary of the document",
        "required": [
          "documentSpecs"
        ],
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The ISO 8601 timestamp associated with the client request.",
            "format": "date-time"
          },
          "sc": {
            "type": "string",
            "example": "db.enable_debug=true,qp.idf_threshold=0.3"
          },
          "query": {
            "type": "string",
            "description": "Optional query that the summary should be about"
          },
          "preferredSummaryLength": {
            "type": "integer",
            "description": "Optional length of summary output. If not given, defaults to 1000 chars."
          },
          "documentSpecs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentSpec"
            },
            "description": "Specifications of documents to summarize"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this particular result. To be used for /feedback reporting."
          }
        }
      },
      "Summary": {
        "properties": {
          "text": {
            "type": "string"
          }
        }
      },
      "SummarizeResponse": {
        "properties": {
          "summary": {
            "$ref": "#/components/schemas/Summary"
          },
          "debugInfo": {
            "type": "string",
            "description": "Debug details for this summary if debug is enabled"
          },
          "trackingToken": {
            "type": "string",
            "description": "An opaque token that represents this summary in this particular query. To be used for /feedback reporting."
          }
        }
      },
      "TeamsRequest": {
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IDs of the teams to retrieve."
          },
          "includeFields": {
            "description": "List of teams fields to return that aren't returned by default",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "TEAMS_DETAILS"
              ]
            }
          }
        },
        "example": {
          "ids": [
            "abc123"
          ]
        }
      },
      "TeamsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Team"
            },
            "description": "A Team and a deep copy of all its members for each ID in the request"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of IDs that could not be found."
          }
        }
      },
      "CreateShortcutRequest": {
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ShortcutMutableProperties"
          }
        }
      },
      "ShortcutError": {
        "properties": {
          "errorType": {
            "type": "string",
            "enum": [
              "NO_PERMISSION",
              "INVALID_ID",
              "EXISTING_SHORTCUT"
            ]
          }
        }
      },
      "CreateShortcutResponse": {
        "properties": {
          "shortcut": {
            "$ref": "#/components/schemas/Shortcut"
          },
          "error": {
            "$ref": "#/components/schemas/ShortcutError"
          }
        }
      },
      "DeleteShortcutRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserGeneratedContentId"
          },
          {
            "type": "object",
            "required": [
              "id"
            ]
          }
        ]
      },
      "GetShortcutRequest": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/UserGeneratedContentId"
          },
          {
            "type": "object",
            "required": [
              "alias"
            ],
            "properties": {
              "alias": {
                "type": "string",
                "description": "The alias for the shortcut, including any arguments for variable shortcuts."
              }
            }
          }
        ]
      },
      "GetShortcutResponse": {
        "properties": {
          "shortcut": {
            "$ref": "#/components/schemas/Shortcut",
            "description": "Shortcut given the input alias with any provided arguments substituted into the destination url."
          },
          "error": {
            "$ref": "#/components/schemas/ShortcutError"
          }
        }
      },
      "GetSimilarShortcutsRequest": {
        "required": [
          "alias"
        ],
        "properties": {
          "alias": {
            "type": "string",
            "description": "Link text following go/ prefix."
          }
        }
      },
      "GetSimilarShortcutsResponse": {
        "required": [
          "shortcuts"
        ],
        "properties": {
          "shortcuts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shortcut"
            },
            "description": "Shortcuts with similar aliases to the given. Includes shortcut with the exact alias if it exists."
          }
        }
      },
      "ListShortcutsResponse": {
        "required": [
          "shortcuts"
        ],
        "properties": {
          "shortcuts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shortcut"
            },
            "description": "List of all shortcuts accessible to the user"
          }
        }
      },
      "ListShortcutsPaginatedRequest": {
        "x-internal": true,
        "required": [
          "pageSize"
        ],
        "properties": {
          "includeFields": {
            "description": "Array of fields/data to be included in response that are not included by default",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "FACETS",
                "PEOPLE_DETAILS"
              ]
            }
          },
          "pageSize": {
            "type": "integer",
            "example": 10
          },
          "cursor": {
            "type": "string",
            "description": "A token specifying the position in the overall results to start at. Received from the endpoint and iterated back. Currently being used as page no (as we implement offset pagination)"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            },
            "description": "A list of filters for the query. An AND is assumed between different filters. We support filters on Go Link name, author, department and type."
          },
          "sort": {
            "$ref": "#/components/schemas/SortOptions",
            "description": "Specifies fieldname to sort on and order (ASC|DESC) to sort in"
          },
          "query": {
            "type": "string",
            "description": "Search query that should be a substring in atleast one of the fields (alias , inputAlias, destinationUrl, description). Empty query does not filter shortcuts."
          }
        }
      },
      "ShortcutsPaginationMetadata": {
        "x-internal": true,
        "properties": {
          "cursor": {
            "type": "string",
            "description": "Cursor indicates the start of the next page of results"
          },
          "hasNextPage": {
            "type": "boolean"
          },
          "totalItemCount": {
            "type": "integer"
          }
        }
      },
      "ListShortcutsPaginatedResponse": {
        "x-internal": true,
        "required": [
          "shortcuts",
          "meta"
        ],
        "properties": {
          "shortcuts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shortcut"
            },
            "description": "List of all shortcuts accessible to the user"
          },
          "facetResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetResult"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/ShortcutsPaginationMetadata",
            "description": "Contains metadata like total item count and whether next page exists"
          }
        }
      },
      "PreviewShortcutResponse": {
        "properties": {
          "shortcut": {
            "$ref": "#/components/schemas/Shortcut"
          },
          "existingUrlAliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "deprecated": true,
            "description": "DEPRECATED - use existingUrlShortcuts instead"
          },
          "existingUrlShortcuts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Shortcut"
            },
            "description": "Exising shortcuts that have a similar destination URL."
          },
          "error": {
            "$ref": "#/components/schemas/ShortcutError"
          }
        }
      },
      "UpdateShortcutRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/UserGeneratedContentId"
          },
          {
            "$ref": "#/components/schemas/ShortcutMutableProperties"
          },
          {
            "type": "object",
            "required": [
              "id"
            ]
          }
        ]
      },
      "UpdateShortcutResponse": {
        "properties": {
          "shortcut": {
            "$ref": "#/components/schemas/Shortcut"
          },
          "error": {
            "$ref": "#/components/schemas/ShortcutError"
          }
        }
      },
      "AddCredentialRequest": {
        "properties": {
          "datasource": {
            "type": "string",
            "description": "the datasource the credential applies to"
          },
          "user": {
            "type": "string",
            "description": "the user info (email or username for example) for the credential"
          },
          "token": {
            "type": "string",
            "description": "the token part of the credential (password, apiToken etc)"
          },
          "metadata": {
            "type": "string",
            "description": "any metadata associated with the user credential"
          }
        }
      },
      "PublicConfigRequest": {
        "type": "object",
        "description": "Will only send back publicly available config and will ignore other keys",
        "properties": {
          "themeKeys": {
            "type": "array",
            "description": "A list of theme keys to include in the response.",
            "items": {
              "type": "string"
            }
          },
          "boolKeys": {
            "type": "array",
            "description": "A list of boolean flag keys to include in the response.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ConfigRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PublicConfigRequest"
          },
          {
            "type": "object",
            "properties": {
              "sessionInfo": {
                "$ref": "#/components/schemas/SessionInfo"
              }
            }
          }
        ]
      },
      "DatasourceInstanceConfig": {
        "description": "UNIMPLEMENTED. Will replace the misnamed DatasourceSchema. An instance of a datasource"
      },
      "DatasourceConfig": {
        "description": "A \"class\" wrapper of Datasource instances. Rule of thumb: any field that is applicable to all instances of a datasource is probably a DatasourceConfig field",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The human-readable name of the datasource"
          },
          "homeUrl": {
            "type": "string",
            "description": "The fallback homepage for all instances of this datasource. Ex for slack: https://apps.slack.com/client"
          },
          "iconUrl": {
            "type": "string",
            "description": "The URL to an image to be displayed as an icon for this generic datasource. Must have a transparency mask. SVG are recommended over PNG. Public, glean-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."
          },
          "id": {
            "type": "string",
            "description": "Id of the datasource. So happens to be lowercase name like \"slack\", but could become opaque in the future. Don't rely on the id's format."
          },
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasourceInstanceConfig"
            },
            "description": "UNIMPLEMENTED. You're probably wanting DatasourceSchema, which are misnamed instances that are slated for replacement with this DatasourceConfig.instances field"
          },
          "supportsMultipleInstances": {
            "type": "boolean",
            "description": "Whether the datasource allows for multiple instances. Ex: \"Jira (on prem)\" and \"Jira (cloud)\""
          },
          "multipleInstanceSetupEnabled": {
            "type": "boolean",
            "description": "Whether the datasource allows for automatic multiple instance setup. Currently only supported by GitHub.\""
          }
        }
      },
      "PropertyDefinition": {
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the property in the `DocumentMetadata` (e.g. 'createTime', 'updateTime', 'author', 'container'). In the future, this will support custom properties too."
          },
          "displayLabel": {
            "type": "string",
            "description": "The user friendly label for the property."
          },
          "displayLabelPlural": {
            "type": "string",
            "description": "The user friendly label for the property that will be used if a plural context."
          },
          "propertyType": {
            "type": "string",
            "enum": [
              "TEXT",
              "DATE",
              "INT",
              "USERID",
              "PICKLIST",
              "TEXTLIST"
            ],
            "description": "The type of custom property - this governs the search and faceting behavior"
          },
          "uiOptions": {
            "type": "string",
            "enum": [
              "NONE",
              "SEARCH_RESULT",
              "DOC_HOVERCARD"
            ]
          },
          "hideUiFacet": {
            "type": "boolean",
            "description": "If true then the property will not show up as a facet in the UI."
          },
          "uiFacetOrder": {
            "type": "integer",
            "description": "Will be used to set the order of facets in the UI, if present. If set for one facet, must be set for all non-hidden UI facets. Must take on an integer value from 1 (shown at the top) to N (shown last), where N is the number of non-hidden UI facets. These facets will be ordered below the built-in \"Type\" and \"Tag\" operators."
          },
          "objectPropertyOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectPropertyOptions"
            }
          },
          "group": {
            "type": "string",
            "description": "The unique identifier of the `PropertyGroup` to which this property belongs."
          }
        }
      },
      "ObjectPropertyOptions": {
        "description": "Options for object properties.",
        "properties": {
          "subobjectProperties": {
            "type": "array",
            "description": "The properties of the sub-object. These properties represent a nested object. For example, if this property represents a postal address, the subobjectProperties might be named street, city, and state.",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinition"
            }
          }
        }
      },
      "PropertyGroup": {
        "description": "A grouping for multiple PropertyDefinition. Grouped properties will be displayed together in the UI.",
        "properties": {
          "name": {
            "type": "string",
            "description": "The unique identifier of the group."
          },
          "displayLabel": {
            "type": "string",
            "description": "The user-friendly group label to display."
          }
        }
      },
      "ObjectDefinition": {
        "description": "The definition for an `DocumentMetadata.objectType` within a datasource.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier for this `DocumentMetadata.objectType`. If omitted, this definition is used as a default for all unmatched `DocumentMetadata.objectType`s in this datasource."
          },
          "displayLabel": {
            "type": "string",
            "description": "The user-friendly name of the object for display."
          },
          "docCategory": {
            "type": "string",
            "enum": [
              "UNCATEGORIZED",
              "TICKETS",
              "CRM",
              "PUBLISHED_CONTENT",
              "COLLABORATIVE_CONTENT",
              "QUESTION_ANSWER",
              "MESSAGING",
              "CODE_REPOSITORY",
              "CHANGE_MANAGEMENT",
              "PEOPLE",
              "EMAIL",
              "SSO",
              "ATS",
              "KNOWLEDGE_HUB",
              "EXTERNAL_SHORTCUT"
            ],
            "description": "The document category of this object type."
          },
          "propertyDefinitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PropertyDefinition"
            }
          },
          "propertyGroups": {
            "type": "array",
            "description": "A list of `PropertyGroup`s belonging to this object type, which will group properties to be displayed together in the UI.",
            "items": {
              "$ref": "#/components/schemas/PropertyGroup"
            }
          },
          "summarizable": {
            "description": "Whether or not the object is summarizable",
            "type": "boolean"
          }
        }
      },
      "CanonicalizingRegexType": {
        "description": "Regular expression to apply to an arbitrary string to transform it into a canonical string.",
        "properties": {
          "matchRegex": {
            "type": "string",
            "description": "Regular expression to match to an arbitrary string."
          },
          "rewriteRegex": {
            "type": "string",
            "description": "Regular expression to transform into a canonical string."
          }
        }
      },
      "SharedDatasourceConfigNoInstance": {
        "type": "object",
        "description": "Structure describing shared config properties of a datasource with no multi-instance support.",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique identifier of datasource instance to which this config applies."
          },
          "displayName": {
            "type": "string",
            "description": "The user-friendly instance label to display. If omitted, falls back to the title-cased `name`."
          },
          "datasourceCategory": {
            "type": "string",
            "enum": [
              "UNCATEGORIZED",
              "TICKETS",
              "CRM",
              "PUBLISHED_CONTENT",
              "COLLABORATIVE_CONTENT",
              "QUESTION_ANSWER",
              "MESSAGING",
              "CODE_REPOSITORY",
              "CHANGE_MANAGEMENT",
              "PEOPLE",
              "EMAIL",
              "SSO",
              "ATS",
              "KNOWLEDGE_HUB",
              "EXTERNAL_SHORTCUT"
            ],
            "default": "UNCATEGORIZED",
            "description": "The type of this datasource. It is an important signal for relevance and must be specified and cannot be UNCATEGORIZED."
          },
          "urlRegex": {
            "type": "string",
            "description": "Regular expression that matches URLs of documents of the datasource instance. The behavior for multiple matches is non-deterministic. **Note: urlRegex is a required field for non-entity datasources (ie. datasources where isEntityDatasource is false). Please add a regex as specific as possible to this datasource instance.**",
            "example": "https://example-company.datasource.com/.*"
          },
          "iconUrl": {
            "type": "string",
            "description": "The URL to an image to be displayed as an icon for this datasource instance. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."
          },
          "objectDefinitions": {
            "type": "array",
            "description": "The list of top-level `objectType`s for the datasource.",
            "items": {
              "$ref": "#/components/schemas/ObjectDefinition"
            }
          },
          "suggestionText": {
            "type": "string",
            "description": "Example text for what to search for in this datasource"
          },
          "homeUrl": {
            "type": "string",
            "description": "The URL of the landing page for this datasource instance. Should point to the most useful page for users, not the company marketing page."
          },
          "crawlerSeedUrls": {
            "type": "array",
            "description": "This only applies to WEB_CRAWL and BROWSER_CRAWL datasources. Defines the seed urls for crawling.",
            "items": {
              "type": "string"
            }
          },
          "iconDarkUrl": {
            "type": "string",
            "description": "The URL to an image to be displayed as an icon for this datasource instance in dark mode. Must have a transparency mask. SVG are recommended over PNG. Public, scio-authenticated and Base64 encoded data URLs are all valid (but not third-party-authenticated URLs)."
          },
          "hideBuiltInFacets": {
            "type": "array",
            "description": "List of built-in facet types that should be hidden for the datasource.",
            "items": {
              "type": "string",
              "enum": [
                "TYPE",
                "TAG",
                "AUTHOR",
                "OWNER"
              ]
            }
          },
          "canonicalizingURLRegex": {
            "type": "array",
            "description": "A list of regular expressions to apply to an arbitrary URL to transform it into a canonical URL for this datasource instance. Regexes are to be applied in the order specified in this list.",
            "items": {
              "$ref": "#/components/schemas/CanonicalizingRegexType"
            }
          },
          "canonicalizingTitleRegex": {
            "type": "array",
            "description": "A list of regular expressions to apply to an arbitrary title to transform it into a title that will be displayed in the search results",
            "items": {
              "$ref": "#/components/schemas/CanonicalizingRegexType"
            }
          },
          "redlistTitleRegex": {
            "type": "string",
            "description": "A regex that identifies titles that should not be indexed"
          },
          "connectorType": {
            "$ref": "#/components/schemas/ConnectorType",
            "description": "The content source type of the datasource instance."
          },
          "quicklinks": {
            "type": "array",
            "description": "List of actions for this datasource instance that will show up in autocomplete and app card, e.g. \"Create new issue\" for jira",
            "items": {
              "$ref": "#/components/schemas/Quicklink"
            }
          },
          "renderConfigPreset": {
            "type": "string",
            "description": "The name of a render config to use for displaying results from this datasource. Any well known datasource name may be used to render the same as that source, e.g. `web` or `gdrive`."
          },
          "aliases": {
            "type": "array",
            "description": "Aliases that can be used as `app` operator-values.",
            "items": {
              "type": "string"
            }
          },
          "isOnPrem": {
            "type": "boolean",
            "description": "Whether or not this datasource is hosted on-premise."
          },
          "trustUrlRegexForViewActivity": {
            "type": "boolean",
            "default": true,
            "description": "True if browser activity is able to report the correct URL for VIEW events. Set this to true if the URLs reported by Chrome are constant throughout each page load. Set this to false if the page has Javascript that modifies the URL during or after the load."
          },
          "includeUtmSource": {
            "type": "boolean",
            "description": "If true, a utm_source query param will be added to outbound links to this datasource within Glean."
          }
        }
      },
      "SharedDatasourceConfig": {
        "description": "Structure describing shared config properties of the datasource (including multi-instance support)",
        "allOf": [
          {
            "$ref": "#/components/schemas/SharedDatasourceConfigNoInstance"
          },
          {
            "type": "object",
            "properties": {
              "datasourceName": {
                "type": "string",
                "description": "The (non-unique) name of the datasource of which this config is an instance, e.g. \"jira\"."
              },
              "instanceOnlyName": {
                "type": "string",
                "description": "The instance of the datasource for this particular config, e.g. \"onprem\"."
              },
              "instanceDescription": {
                "type": "string",
                "description": "A human readable string identifying this instance as compared to its peers, e.g. \"github.com/askscio\" or \"github.askscio.com\""
              }
            }
          }
        ]
      },
      "OAuthConfig": {
        "properties": {
          "apiKey": {
            "type": "string",
            "description": "An API key required to authenticate."
          },
          "clientId": {
            "type": "string",
            "description": "Client ID of the app registered in the provider's portal."
          },
          "scope": {
            "type": "string",
            "description": "Space separated list of required scopes for this datasource."
          }
        }
      },
      "PrivateAuth": {
        "properties": {
          "status": {
            "type": "string",
            "description": "The authorization status of the user.",
            "enum": [
              "DISABLED",
              "AWAITING_AUTH",
              "AUTHORIZED"
            ]
          },
          "isDomainDelegated": {
            "type": "boolean",
            "description": "Whether the datasource is authorized through domain delegation."
          },
          "resultsAuthPromptSubtitle": {
            "type": "string",
            "description": "The subtitle of the results auth prompt, required when the datasource has results even if the user has not authed privately.",
            "example": "find content from private repositories"
          },
          "title": {
            "type": "string",
            "description": "The title of the auth prompt shown to the user"
          },
          "content": {
            "type": "string",
            "description": "The content of the auth prompt shown to the user"
          },
          "questions": {
            "type": "array",
            "description": "FAQs to show when asking the user to authorize the datasource",
            "items": {
              "type": "array",
              "description": "Tuples of [question, answer]",
              "minItems": 2,
              "maxItems": 2,
              "items": {
                "type": "string"
              }
            }
          },
          "authUrlRelativePath": {
            "type": "string",
            "description": "The relative path of the url to take the user to to authorize the datasource"
          }
        }
      },
      "DatasourceSchema": {
        "description": "The schema definition for a datasource.",
        "allOf": [
          {
            "$ref": "#/components/schemas/SharedDatasourceConfig"
          },
          {
            "type": "object",
            "properties": {
              "calendarEnabled": {
                "type": "boolean",
                "description": "Whether this datasource will show calendar feed events"
              },
              "collectBodyInActivity": {
                "type": "boolean",
                "description": "Whether the HTML body should be reported in ActivityEvents."
              },
              "crawlHomeUrl": {
                "type": "boolean",
                "description": "Whether to crawl site starting at the home URL and all crawler seed URLs."
              },
              "datasourceDescription": {
                "type": "string",
                "description": "The support Glean provides for this datasource."
              },
              "datasourceDisplayName": {
                "type": "string",
                "description": "The user label for the datasource. This is distinct from the display names of the instances."
              },
              "federatedGoogleOAuth": {
                "$ref": "#/components/schemas/OAuthConfig"
              },
              "isEligibleForNativeReplacement": {
                "type": "boolean",
                "description": "Whether the datasource supports the native search replacement feature."
              },
              "isEnabled": {
                "type": "boolean",
                "description": "Whether the datasource is set in queryapi.datasources."
              },
              "isNativeReplacementAutoEnabled": {
                "type": "boolean",
                "description": "Make Native Search Replace opt-out rather than opt-in."
              },
              "isSearchable": {
                "type": "boolean",
                "description": "Whether the user is able to search for results from this datasource."
              },
              "mentionsEnabled": {
                "type": "boolean",
                "description": "Whether the the datasource is configured to be used within mentions features such as the mentions feed"
              },
              "privateAuth": {
                "$ref": "#/components/schemas/PrivateAuth"
              },
              "searchInputSelectors": {
                "type": "array",
                "description": "CSS selectors that identify native search input elements on the datasource's website.",
                "items": {
                  "type": "string"
                }
              },
              "supportsCalendar": {
                "type": "boolean",
                "description": "Whether the datasource can power the user's calendar."
              },
              "urlRegexVersion": {
                "type": "integer",
                "description": "The current version of the urlRegex, changes would instruct the client to clear any information based on previous versions of the urlRegex."
              }
            }
          }
        ]
      },
      "Setting": {
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for the setting. Max length 256."
          },
          "value": {
            "type": "string",
            "description": "Value for the setting. Server does not differentiate between types. Max length 2048."
          }
        }
      },
      "UserSettings": {
        "properties": {
          "settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Setting"
            },
            "description": "List of user setting objects. In case of multiple keys, the last one is used."
          }
        }
      },
      "FeatureFlags": {
        "type": "object",
        "additionalProperties": {
          "type": "boolean"
        }
      },
      "BoolValues": {
        "type": "object",
        "description": "A map of {string, boolean} pairs representing flags that globally guard conditional features. Omitted flags mean the client should use its default state.",
        "additionalProperties": {
          "type": "boolean"
        }
      },
      "Theme": {
        "type": "object",
        "description": "A map of {string, string} pairs where the key represents a known theme option and the value is the CSS color to apply. Supported options are documented in https://dev.glean.com/meta/browser_api/interfaces/Theme.html.",
        "additionalProperties": {
          "type": "string"
        },
        "example": {
          "background": "#fafafa",
          "textPrimary": "#1e1e1e"
        }
      },
      "Themes": {
        "description": "A set of Theme objects to make available to the user based on their chosen preference. If a theme variant is not supplied, the default theme will be used.",
        "properties": {
          "light": {
            "$ref": "#/components/schemas/Theme"
          },
          "dark": {
            "$ref": "#/components/schemas/Theme"
          }
        },
        "example": {
          "light": {
            "background": "#fafafa",
            "textPrimary": "#1e1e1e"
          },
          "dark": {
            "background": "#1e1e1e",
            "textPrimary": "#fafafa"
          }
        }
      },
      "Branding": {
        "description": "A map of visual aspects of the app such as the company background image, logos, logo background colors, and wide company logos.",
        "type": "object",
        "properties": {
          "companyBackgroundImageName": {
            "type": "string",
            "description": "User facing company background image to be displayed to users on the home page."
          },
          "companyLogoUrl": {
            "type": "string",
            "description": "An image url pointing to a custom logo that should be displayed to users. Must be square and recognizable down to 40x40px. SVG images with transparent background are preferred."
          },
          "companyWideLogoUrl": {
            "type": "string",
            "description": "An image url pointing to a wide format custom logo that should be displayed to users. Should be rectangular and recognizable at 40px height, and aspect ratio should be between 2:1 and 4:1. SVG images with transparent background are preferred."
          },
          "companyLogoBackgroundColor": {
            "type": "string",
            "description": "A hex RGB color to display behind custom logo (e.g. '#ff4080')."
          }
        }
      },
      "ClientConfig": {
        "description": "Configuration settings for a specific client deployment that are not related to any particular datasource",
        "properties": {
          "badVersions": {
            "type": "array",
            "description": "Known bad client versions that should force update themselves",
            "items": {
              "type": "string"
            }
          },
          "featureFlags": {
            "$ref": "#/components/schemas/FeatureFlags"
          },
          "feedPeopleCelebrationsEnabled": {
            "type": "boolean",
            "description": "Whether people celebrations is enabled or not for the instance"
          },
          "feedSuggestedEnabled": {
            "type": "boolean",
            "description": "Whether the suggested feed is enabled"
          },
          "feedTrendingEnabled": {
            "type": "boolean",
            "description": "Whether the trending feed is enabled"
          },
          "feedRecentsEnabled": {
            "type": "boolean",
            "description": "Whether the recents feed is enabled"
          },
          "feedMentionsEnabled": {
            "type": "boolean",
            "description": "Whether the mentions feed is enabled"
          },
          "boolValues": {
            "$ref": "#/components/schemas/BoolValues"
          },
          "companyDisplayName": {
            "type": "string",
            "description": "The user-facing name of the company owning the deployment"
          },
          "customSerpMarkdown": {
            "type": "string",
            "description": "A markdown string to be displayed on the search results page. Useful for outlinks to help pages."
          },
          "feedbackFrameSrc": {
            "type": "string",
            "description": "URL of a frame to be displayed for the user to give direct feedback to their company.\n\nA query string parameter named `context` is appended to the URL by the client. Its value is a JSON payload containing:\n\n```\n{\n  datasource: string, // The current datasource tab\n  department: string, // The user’s department\n  email: string,      // The user’s email\n  query: string       // The most recent search query, if any\n}\n```\n"
          },
          "onboardingQuery": {
            "type": "string",
            "description": "A demonstrative query to show during new user onboarding"
          },
          "isOrgChartLinkVisible": {
            "type": "boolean",
            "description": "Determines whether the org chart link in the Directory panel is visible to all users."
          },
          "isOrgChartAccessible": {
            "type": "boolean",
            "description": "Determines whether the org chart is accessible to all users, regardless of link visibility. Org chart can be accessible even if the org chart link in Directory is not visible."
          },
          "isPeopleSetup": {
            "type": "boolean",
            "description": "Whether or not people data has been set up."
          },
          "webAppUrl": {
            "type": "string",
            "description": "URL the company uses to access the web app"
          },
          "gaTrackingIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of additional GA data stream tracking IDs to which client events should be sent.",
            "example": [
              "G-ABC123DEF"
            ]
          },
          "themes": {
            "$ref": "#/components/schemas/Themes"
          },
          "brandings": {
            "description": "A set of branding objects made avaiable to the end user for visual aspects of the app such as background images for light and dark mode, light and dark logos, and logo background colors. Anything that is visual but not related to themes should go in here.",
            "properties": {
              "light": {
                "$ref": "#/components/schemas/Branding"
              },
              "dark": {
                "$ref": "#/components/schemas/Branding"
              }
            }
          },
          "greetingFormat": {
            "type": "string",
            "description": "Describes how to format the web app greeting. Possible format options include \\%t - timely greeting \\%n - the user's first name",
            "example": "\\%t, \\%n (This would be the current default Glean greeting)"
          },
          "ssoCompanyProvider": {
            "type": "string",
            "description": "SSO provider used by the company",
            "enum": [
              "gsuite",
              "iap",
              "okta",
              "ping",
              "azure",
              "onelogin",
              "onelogin_saml"
            ]
          }
        },
        "example": {
          "badVersions": [
            "fe-release-2020-09-30-8843c44"
          ]
        }
      },
      "AnswerActionsConfig": {
        "properties": {
          "showCreate": {
            "type": "boolean"
          },
          "showEdit": {
            "type": "boolean"
          }
        }
      },
      "ActionsConfig": {
        "properties": {
          "answer": {
            "$ref": "#/components/schemas/AnswerActionsConfig"
          },
          "disableActions": {
            "type": "boolean"
          },
          "disableCopyLink": {
            "type": "boolean"
          }
        }
      },
      "DatumConditionType": {
        "enum": [
          "CHANGES_SINCE_VIEWED",
          "CUSTOM_DATASOURCE",
          "DATASOURCE_HAS_MULTIPLE_INSTANCES",
          "EMPTY",
          "EQUALS",
          "INSTANCE_HAS_CUSTOM_ICON",
          "NONEMPTY",
          "NO_CHANGES_SINCE_VIEWED",
          "STARTS_WITH",
          "USER_DOMAIN"
        ]
      },
      "DatumCondition": {
        "properties": {
          "caseInsensitive": {
            "type": "boolean"
          },
          "key": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/DatumConditionType"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "DatumConfig": {
        "properties": {
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatumCondition"
            }
          },
          "datumConfigs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DatumConfig"
            }
          },
          "icon": {
            "$ref": "#/components/schemas/IconConfig"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "label": {
            "type": "string"
          },
          "omit": {
            "type": "boolean"
          },
          "popover": {
            "$ref": "#/components/schemas/PopoverConfig"
          },
          "prefix": {
            "type": "string"
          },
          "roleConfig": {
            "$ref": "#/components/schemas/DatumRoleConfig"
          },
          "separator": {
            "type": "string"
          },
          "suffix": {
            "type": "string"
          },
          "transforms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatumTransform"
            }
          },
          "type": {
            "$ref": "#/components/schemas/DatumType"
          }
        }
      },
      "MetadataListConfig": {
        "properties": {
          "datumConfigs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DatumConfig"
            }
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "separator": {
            "type": "string"
          }
        }
      },
      "TagsConfig": {
        "properties": {
          "displayLimit": {
            "type": "number"
          },
          "showTags": {
            "type": "boolean"
          }
        }
      },
      "PopoverConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataListConfig"
          },
          {
            "type": "object",
            "properties": {
              "collections": {
                "$ref": "#/components/schemas/TagsConfig"
              },
              "omit": {
                "type": "boolean"
              },
              "person": {
                "type": "string"
              },
              "placement": {
                "type": "string",
                "enum": [
                  "bottom",
                  "bottomLeft",
                  "bottomRight",
                  "left",
                  "leftBottom",
                  "leftTop",
                  "right",
                  "rightBottom",
                  "rightTop",
                  "top",
                  "topLeft",
                  "topRight"
                ]
              },
              "title": {
                "type": "string"
              }
            }
          }
        ]
      },
      "DatumRoleConfigBase": {
        "properties": {
          "key": {
            "type": "string"
          },
          "role": {
            "type": "string"
          }
        }
      },
      "DatumEmailConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatumRoleConfigBase"
          }
        ]
      },
      "DatumLinkSource": {
        "enum": [
          "DATUM",
          "DATUM_RAW",
          "PARENT_DOCUMENT",
          "PERSON"
        ]
      },
      "DatumLinkConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatumRoleConfigBase"
          },
          {
            "type": "object",
            "properties": {
              "linkSource": {
                "$ref": "#/components/schemas/DatumLinkSource"
              }
            }
          }
        ]
      },
      "DatumTooltipConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/DatumRoleConfigBase"
          }
        ]
      },
      "DatumRoleConfig": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/DatumEmailConfig"
          },
          {
            "$ref": "#/components/schemas/DatumLinkConfig"
          },
          {
            "$ref": "#/components/schemas/DatumTooltipConfig"
          }
        ]
      },
      "DatumTransform": {
        "properties": {
          "match": {
            "type": "string"
          },
          "replace": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DEFAULT_VALUE",
              "FULL_DATE",
              "INSTANCE_NAME",
              "O365_PATH",
              "PRETTY_KEY",
              "QUANTITY",
              "REGEX",
              "SENTENCE_CASE",
              "STATIC_VALUE",
              "TIME_AGO",
              "UPPER_CASE"
            ]
          },
          "value": {
            "type": "string"
          }
        }
      },
      "DatumType": {
        "enum": [
          "COMPOUND",
          "CONDITIONAL_ANY_MATCHING",
          "CONDITIONAL_FIRST_MATCHING",
          "CUSTOM_RENDERING",
          "EXTRA_CUSTOM_KEYS",
          "OBJECT_KEY"
        ]
      },
      "BodyConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataListConfig"
          },
          {
            "type": "object",
            "properties": {
              "hide": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "ContactConfig": {
        "properties": {
          "show": {
            "type": "boolean"
          },
          "emailKey": {
            "type": "string"
          },
          "phoneKey": {
            "type": "string"
          }
        }
      },
      "DetailsConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataListConfig"
          }
        ]
      },
      "FilePathConfig": {
        "properties": {
          "show": {
            "type": "boolean"
          }
        }
      },
      "CompositeIconConfig": {
        "properties": {
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatumCondition"
            }
          },
          "overlayColor": {
            "type": "string"
          },
          "overlaySizeRatio": {
            "type": "number",
            "description": "The size of the secondary icon overlay, expressed as a fraction of the primary icon size. Value should be less than or equal to 0.75, the default is 0.75."
          },
          "preferSecondaryForNoOverlay": {
            "type": "boolean",
            "description": "If true, the secondary config will be used in cases where an icon overlay can't be displayed, e.g. for small icons."
          },
          "primary": {
            "$ref": "#/components/schemas/IconConfig"
          },
          "secondary": {
            "$ref": "#/components/schemas/IconConfig"
          },
          "secondarySizeRatio": {
            "type": "number",
            "description": "The size of the secondary icon, expressed as a fraction of the primary icon size. For example, if the primary icon is displayed at 40px and secondarySize is 0.5, the secondary icon will be 20px. Should be less than or equal to overlaySize if both are specified. Default is 0.5."
          }
        }
      },
      "RelatedDocumentsConfig": {
        "properties": {
          "icon": {
            "$ref": "#/components/schemas/CompositeIconConfig"
          },
          "show": {
            "type": "boolean"
          },
          "snippetMode": {
            "enum": [
              "HIDE",
              "TRUNCATE",
              "FULL"
            ]
          }
        }
      },
      "FooterConfig": {
        "deprecated": true,
        "description": "Use RelatedConfig instead",
        "properties": {
          "attachment": {
            "$ref": "#/components/schemas/RelatedDocumentsConfig"
          },
          "filePath": {
            "type": "boolean",
            "deprecated": true,
            "description": "Use RenderConfig.filePath instead"
          }
        }
      },
      "ThreadConfig": {
        "properties": {
          "displayLimit": {
            "type": "number"
          }
        }
      },
      "RelatedSectionConfig": {
        "properties": {
          "defaultExpanded": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DOCUMENTS"
            ]
          },
          "typeConfig": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/RelatedDocumentsConfig"
              },
              {
                "$ref": "#/components/schemas/TagsConfig"
              },
              {
                "$ref": "#/components/schemas/ThreadConfig"
              }
            ]
          },
          "icon": {
            "$ref": "#/components/schemas/IconConfig"
          }
        }
      },
      "RelatedConfig": {
        "properties": {
          "sectionConfigs": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RelatedSectionConfig"
            }
          },
          "keys": {
            "type": "array",
            "items": {
              "enum": [
                "ATTACHMENTS",
                "SIMILAR_RESULTS",
                "BACKLINKS"
              ]
            }
          }
        }
      },
      "InteractionsConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataListConfig"
          },
          {
            "type": "object",
            "properties": {
              "show": {
                "type": "boolean"
              }
            }
          }
        ]
      },
      "LabelConfig": {
        "properties": {
          "background": {
            "type": "string"
          },
          "color": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "StatusLabelConfig": {
        "properties": {
          "key": {
            "type": "string"
          },
          "omitMissingValues": {
            "type": "boolean"
          },
          "useDefault": {
            "type": "boolean"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelConfig"
            }
          }
        }
      },
      "MetaConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataListConfig"
          },
          {
            "type": "object",
            "properties": {
              "hideInAttachment": {
                "type": "boolean"
              },
              "label": {
                "$ref": "#/components/schemas/StatusLabelConfig"
              },
              "commonKeys": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        ]
      },
      "DocumentPreviewType": {
        "enum": [
          "ANNOUNCEMENT",
          "ANSWER",
          "ANSWER_BOARD",
          "COLLECTION",
          "CONVERSATION",
          "DETAILS",
          "NO_PREVIEW",
          "THREAD",
          "URL"
        ]
      },
      "PreviewConfig": {
        "properties": {
          "icon": {
            "$ref": "#/components/schemas/CompositeIconConfig"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaConfig"
          },
          "modalWidth": {
            "type": "number"
          },
          "title": {
            "$ref": "#/components/schemas/MetadataListConfig"
          },
          "type": {
            "$ref": "#/components/schemas/DocumentPreviewType"
          }
        }
      },
      "TitleConfig": {
        "allOf": [
          {
            "$ref": "#/components/schemas/MetadataListConfig"
          },
          {
            "type": "object",
            "properties": {
              "popover": {
                "$ref": "#/components/schemas/PopoverConfig"
              }
            }
          }
        ]
      },
      "SectionsConfig": {
        "properties": {
          "conditions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatumCondition"
            }
          }
        }
      },
      "RenderConfig": {
        "properties": {
          "actions": {
            "$ref": "#/components/schemas/ActionsConfig"
          },
          "additionalConfigs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "body": {
            "$ref": "#/components/schemas/BodyConfig"
          },
          "contact": {
            "$ref": "#/components/schemas/ContactConfig"
          },
          "details": {
            "$ref": "#/components/schemas/DetailsConfig"
          },
          "filePath": {
            "$ref": "#/components/schemas/FilePathConfig"
          },
          "footer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FooterConfig"
              }
            ],
            "deprecated": true,
            "description": "use RenderConfig.filePath and RenderConfig.related instead"
          },
          "related": {
            "$ref": "#/components/schemas/RelatedConfig"
          },
          "icon": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompositeIconConfig"
            }
          },
          "interactions": {
            "$ref": "#/components/schemas/InteractionsConfig"
          },
          "meta": {
            "$ref": "#/components/schemas/MetaConfig"
          },
          "preview": {
            "$ref": "#/components/schemas/PreviewConfig"
          },
          "tags": {
            "$ref": "#/components/schemas/TagsConfig"
          },
          "title": {
            "$ref": "#/components/schemas/TitleConfig"
          },
          "sections": {
            "$ref": "#/components/schemas/SectionsConfig"
          }
        }
      },
      "RenderConfigDict": {
        "type": "object",
        "description": "Dictionary of doctype to RenderConfig.",
        "additionalProperties": {
          "$ref": "#/components/schemas/RenderConfig"
        }
      },
      "ClientSideCheck": {
        "title": "Checks to be performed on the client side (enum based)",
        "enum": [
          "BADGE_BETA",
          "BADGE_NEW",
          "BADGE_VERIFICATION_TASKS",
          "CAN_INSTALL_EXTENSION",
          "INITIALLY_COLLAPSED_MENU",
          "HAS_PRODUCT_UPDATES",
          "IS_DESKTOP",
          "IS_TOUCH_SCREEN",
          "ORG_CHART_PERMISSIONS",
          "CAN_INSTALL_PWA",
          "IS_DISABLED"
        ]
      },
      "NavigationLink": {
        "title": "Navigation Link",
        "description": "Basic navigation link item.  These represent the leaves in the tree",
        "required": [
          "title",
          "target"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Title to show for the navigation link"
          },
          "target": {
            "type": "string",
            "description": "Destination for the link"
          },
          "external": {
            "type": "boolean",
            "description": "Hint indicating the link points to an external site"
          },
          "clientSideChecks": {
            "description": "Client side checks to be performed before render",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientSideCheck"
            }
          }
        }
      },
      "NavigationLinkGroupBehavior": {
        "title": "Indicates behavior hints for the client.  May or may not be used by the client during rendering.",
        "enum": [
          "SEPARATE",
          "COLLAPSIBLE"
        ]
      },
      "NavigationLinkGroup": {
        "description": "A link group is a collection of navigation links, with an optional default panel link target if a group link is provided, the links are displayed as second level links otherwise, the group is separated from other section via line separators",
        "type": "object",
        "title": "Navigation Link Group",
        "required": [
          "links"
        ],
        "properties": {
          "title": {
            "type": "string"
          },
          "defaultLink": {
            "description": "Default link target if title is clicked",
            "$ref": "#/components/schemas/NavigationLink"
          },
          "links": {
            "description": "Links within the group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavigationLink"
            }
          },
          "behaviors": {
            "description": "Behavior hints such as whether the group should be separated.  May or may not be used by the client during rendering.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavigationLinkGroupBehavior"
            }
          }
        }
      },
      "NavigationMenuItem": {
        "description": "This is the top level items which appear directly in the navigation menu",
        "title": "Navigation Menu Item",
        "required": [
          "icon",
          "selectedIcon",
          "menuTitle",
          "linkGroups",
          "defaultLink"
        ],
        "properties": {
          "icon": {
            "description": "Icon to show for the menu item",
            "$ref": "#/components/schemas/IconConfig"
          },
          "selectedIcon": {
            "description": "Icon to use when menu item is selected (icon may be filled)",
            "$ref": "#/components/schemas/IconConfig"
          },
          "menuTitle": {
            "description": "Title to use for the menu item",
            "type": "string"
          },
          "sectionTitle": {
            "description": "Title to show on the open section (default to menu title if empty)",
            "type": "string"
          },
          "defaultLink": {
            "description": "Default link target if title is clicked",
            "$ref": "#/components/schemas/NavigationLink"
          },
          "linkGroups": {
            "description": "Links within the group",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavigationLinkGroup"
            }
          },
          "clientSideChecks": {
            "description": "Client side checks to be performed before render",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClientSideCheck"
            }
          }
        }
      },
      "NavigationMenuPanel": {
        "title": "Navigation Menu Panel",
        "description": "Contains group of top level Navigation Menu items.  Each panel is a separated set of links.",
        "required": [
          "menuItems"
        ],
        "properties": {
          "menuItems": {
            "description": "Collection of (top-level menu items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavigationMenuItem"
            }
          },
          "hidden": {
            "description": "Indicates this panel itself need not be directly rendered or accessible (workspace/user settings)",
            "type": "boolean"
          }
        }
      },
      "Navigation": {
        "title": "Navigation Menu Config",
        "description": "Menu navigation config schema",
        "required": [
          "panels"
        ],
        "properties": {
          "panels": {
            "description": "Contains a collection of (top-level) menu links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NavigationMenuPanel"
            }
          }
        }
      },
      "ConfigResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BackendExperimentsContext"
          },
          {
            "type": "object",
            "properties": {
              "datasourceConfigs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatasourceConfig"
                },
                "description": "List of datasource \"classes\". Will contain a list of datasource instances, but if you need instances for now, continue to use ConfigResponse.datasources (misnamed instances)"
              },
              "datasources": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DatasourceSchema"
                },
                "description": "List of configurations for datasource instances that may be displayed."
              },
              "userSettings": {
                "$ref": "#/components/schemas/UserSettings"
              },
              "serverBuildVersion": {
                "type": "string",
                "description": "Build versions to be rendered in debug mode."
              },
              "clientConfig": {
                "$ref": "#/components/schemas/ClientConfig"
              },
              "permissions": {
                "$ref": "#/components/schemas/Permissions"
              },
              "sessionInfo": {
                "$ref": "#/components/schemas/SessionInfo"
              },
              "renderConfigs": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/RenderConfigDict"
                }
              },
              "navigation": {
                "$ref": "#/components/schemas/Navigation"
              }
            },
            "example": {
              "datasources": [
                {
                  "name": "jira",
                  "displayName": "Jira",
                  "color": "#3487fb",
                  "svgIconUrl": "https://app.glean.com/images/jira.svg",
                  "objectDefinitions": [
                    {
                      "propertyDefinitions": [
                        {
                          "name": "container",
                          "displayLabel": "Project"
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "gmail",
                  "displayName": "Gmail",
                  "svgIconUrl": "https://app.glean.com/images/gmail.svg",
                  "federatedGoogleOAuth": [
                    {
                      "apiKey": "abc123",
                      "clientId": "def456",
                      "discoveryDocs": [
                        "https://www.googleapis.com/discovery/v1/apis/gmail/v1/rest"
                      ],
                      "scope": "https://www.googleapis.com/auth/gmail.readonly"
                    }
                  ]
                },
                {
                  "name": "slack",
                  "displayName": "Slack",
                  "color": "#611f69",
                  "svgIconUrl": "https://app.glean.com/images/slack.svg",
                  "objectDefinitions": [
                    {
                      "propertyDefinitions": [
                        {
                          "name": "interactions",
                          "objectPropertyOptions": {
                            "subobjectProperties": [
                              {
                                "name": "comments",
                                "displayName": "reply",
                                "displayNamePlural": "replies"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "name": "salesforce",
                  "displayName": "Salesforce",
                  "color": "#44a0da",
                  "svgIconUrl": "https://app.glean.com/images/salesforce.svg",
                  "objectDefinitions": [
                    {
                      "name": "opportunity",
                      "propertyDefinitions": [
                        {
                          "name": "assignedTo",
                          "displayName": "Owned by"
                        }
                      ]
                    },
                    {
                      "propertyDefinitions": [
                        {
                          "name": "assignedTo"
                        }
                      ],
                      "displayName": "Assigned to"
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "EmailTemplate": {
        "type": "string",
        "enum": [
          "INVITE_TO_SCIO",
          "AUTO_INVITE",
          "ADMIN_INVITE",
          "TEAMMATE_INVITE",
          "INVITE_REMINDER",
          "VERIFICATION_REQUEST",
          "VERIFICATION_REQUEST_NONUSER",
          "SEARCH_FEEDBACK",
          "DOMAIN_VERIFICATION",
          "RECRAWL_DATASOURCE",
          "CUSTOM_JSON_REPORT",
          "WORKSPACE_INITIALIZED"
        ],
        "description": "The type of email to send"
      },
      "PeopleFilters": {
        "properties": {
          "filter": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FacetFilter"
            },
            "description": "Facets used for filtering people search"
          },
          "query": {
            "type": "string",
            "description": "A query string to search for people that each person in the response must conform to. An empty query does not filter any people."
          }
        }
      },
      "EmailRequest": {
        "description": "A request to send email[s] to the specified users",
        "required": [
          "emailTemplate"
        ],
        "properties": {
          "emailTemplate": {
            "$ref": "#/components/schemas/EmailTemplate",
            "description": "The type of email to send"
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "The people to send emails to"
          },
          "recipientFilters": {
            "$ref": "#/components/schemas/PeopleFilters",
            "description": "Filters that define the set of users that should be recipients of the email"
          },
          "companyName": {
            "type": "string",
            "description": "Name of the company."
          },
          "datasourceInstance": {
            "type": "string",
            "description": "The instance ID of the datasource (if any)"
          },
          "sender": {
            "type": "string",
            "description": "DEPRECATED - Name of the person at the deployment that triggered this email.",
            "deprecated": true
          },
          "senders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "description": "The people who triggered this email"
          },
          "computedRecipientType": {
            "type": "string",
            "enum": [
              "ALL_UNINVITED"
            ],
            "description": "Computed list of recipients to send the email to. Joined against the recipients list."
          },
          "webAppUrl": {
            "type": "string",
            "description": "The URL of the client triggering the request, as received in the ClientConfig"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            },
            "description": "The documents this email request refers to"
          },
          "reasons": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Reasons this email request was sent. Will be shown directly to end user."
          },
          "feedbackPayload": {
            "type": "object",
            "description": "Optional payload for feedback reporting.",
            "properties": {
              "issueType": {
                "type": "string",
                "description": "The type of issue being reported, e.g. RESULT_MISSING or OTHER for search feedback."
              },
              "comments": {
                "type": "string",
                "description": "Additional freeform comments provided by the reporter."
              },
              "url": {
                "type": "string",
                "description": "The url the reporter was on when feedback was sent."
              },
              "query": {
                "type": "string",
                "description": "The query the reporter tried when feedback was sent."
              },
              "customJson": {
                "type": "string",
                "description": "Arbitrary email param payloads from 3P-customer widgets. Prefer the structured fields when possible.",
                "example": "{\"comment\": \"glean is awesome!\", \"sender\": \"happycustomer@customer.com\"}"
              }
            }
          }
        }
      },
      "RemoveCredentialRequest": {
        "properties": {
          "datasource": {
            "type": "string",
            "description": "the datasource the credential applies to"
          },
          "user": {
            "type": "string",
            "description": "the user info (email or username for example) for the credential"
          }
        }
      },
      "ReminderRequest": {
        "required": [
          "documentId"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "description": "The document which the verification is for new reminders and/or update."
          },
          "assignee": {
            "type": "string",
            "description": "The obfuscated id of the person this verification is assigned to."
          },
          "remindInDays": {
            "type": "integer",
            "description": "Reminder for the next verifications in terms of days. For deletion, this will be omitted."
          },
          "reason": {
            "type": "string",
            "description": "An optional free-text reason for the reminder. This is particularly useful when a reminder is used to ask for verification from another user (for example, \"Duplicate\", \"Incomplete\", \"Incorrect\")."
          }
        }
      },
      "VerificationFeed": {
        "properties": {
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Verification"
            },
            "description": "List of document infos that include verification related information for them."
          }
        }
      },
      "VerifyRequest": {
        "required": [
          "documentId"
        ],
        "properties": {
          "documentId": {
            "type": "string",
            "description": "The document which is verified."
          },
          "action": {
            "type": "string",
            "enum": [
              "VERIFY",
              "DEPRECATE",
              "UNVERIFY"
            ],
            "description": "The verification action requested."
          }
        }
      },
      "DatasourceCapability": {
        "type": "string",
        "description": "Intrinsic capabilities of a datasource. Can motivate UI grouping. Ex: workspace https://photos.app.goo.gl/rt19SbzFeMu5i2pQ6\n  * PROVIDES_SEARCHABLE_CONTENT: Datasource is eligible to appear in the search page. Ex: Jira, Confluence, web\ncrawl datasources, custom datasources, etc. New datasources will default to PROVIDES_SEARCHABLE_CONTENT\n  * PROVIDES_SSO: Datasource provides authentication. Ex: Azure, Gsuite, Okta, OneLogin, etc\n  * PROVIDES_PEOPLE: Datasource provides people data. Ex: gcs when customers give us a csv to populate Glean\n",
        "enum": [
          "PROVIDES_SEARCHABLE_CONTENT",
          "PROVIDES_SSO",
          "PROVIDES_PEOPLE"
        ]
      },
      "ContentDefinition": {
        "type": "object",
        "description": "Describes text content or base64 encoded binary content",
        "properties": {
          "mimeType": {
            "type": "string"
          },
          "textContent": {
            "type": "string",
            "description": "text content. Only one of textContent or binary content can be specified"
          },
          "binaryContent": {
            "type": "string",
            "description": "base64 encoded binary content. Only one of textContent or binary content can be specified"
          }
        },
        "required": [
          "mimeType"
        ]
      },
      "UserReferenceDefinition": {
        "type": "object",
        "description": "Describes how a user is referenced in a document. The user can be referenced by email or by a datasource specific id.",
        "properties": {
          "email": {
            "type": "string"
          },
          "datasourceUserId": {
            "type": "string",
            "description": "some datasources refer to the user by the datasource user id in the document"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PermissionsGroupIntersectionDefinition": {
        "type": "object",
        "description": "describes a list of groups that are all required in a permissions constraint",
        "properties": {
          "requiredGroups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DocumentPermissionsDefinition": {
        "type": "object",
        "description": "describes the access control details of the document",
        "properties": {
          "allowedUsers": {
            "description": "List of users who can view the document",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserReferenceDefinition"
            }
          },
          "allowedGroups": {
            "description": "List of groups that can view the document",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "allowedGroupIntersections": {
            "description": "List of allowed group intersections. This describes a permissions constraint of the form ((GroupA AND GroupB AND GroupC) OR (GroupX AND GroupY) OR ...",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PermissionsGroupIntersectionDefinition"
            }
          },
          "allowAnonymousAccess": {
            "description": "If true, then any Glean user can view the document",
            "type": "boolean"
          },
          "allowAllDatasourceUsersAccess": {
            "description": "If true, then any user who has an account in the datasource can view the document.",
            "type": "boolean"
          }
        }
      },
      "DocumentInteractionsDefinition": {
        "type": "object",
        "description": "describes the interactions on the document",
        "properties": {
          "numViews": {
            "type": "integer"
          },
          "numLikes": {
            "type": "integer"
          },
          "numComments": {
            "type": "integer"
          }
        }
      },
      "CustomProperty": {
        "type": "object",
        "description": "Describes the custom properties of the object.",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "description": "Must either be a string or an array of strings. An integer, boolean, etc. is not valid. When OpenAPI Generator supports `oneOf`, we can semantically enforce this."
          }
        }
      },
      "DocumentDefinition": {
        "type": "object",
        "description": "Indexable document structure",
        "properties": {
          "title": {
            "type": "string",
            "description": "Document title, in plain text, if present."
          },
          "container": {
            "type": "string",
            "description": "The container name for the content (Folder for example for file content)."
          },
          "containerDatasourceId": {
            "type": "string",
            "description": "This represents the datasource sepcific id of the container."
          },
          "containerObjectType": {
            "type": "string",
            "description": "This represents the object type of the container. It cannot have spaces or _"
          },
          "datasource": {
            "type": "string"
          },
          "objectType": {
            "type": "string",
            "description": "The type of the document (Case, KnowledgeArticle for Salesforce for example). It cannot have spaces or _"
          },
          "viewURL": {
            "type": "string",
            "description": "The permalink for viewing the document."
          },
          "id": {
            "type": "string",
            "description": "The datasource specific id for the document. This field is case insensitive and should not be more than 200 characters in length."
          },
          "summary": {
            "$ref": "#/components/schemas/ContentDefinition"
          },
          "body": {
            "$ref": "#/components/schemas/ContentDefinition"
          },
          "author": {
            "$ref": "#/components/schemas/UserReferenceDefinition"
          },
          "owner": {
            "$ref": "#/components/schemas/UserReferenceDefinition",
            "description": "The current owner of the document, if not the author."
          },
          "permissions": {
            "$ref": "#/components/schemas/DocumentPermissionsDefinition"
          },
          "createdAt": {
            "type": "integer",
            "format": "int64",
            "description": "The creation time, in epoch seconds."
          },
          "updatedAt": {
            "type": "integer",
            "format": "int64",
            "description": "The last update time, in epoch seconds."
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserReferenceDefinition"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Labels associated with the document."
          },
          "interactions": {
            "$ref": "#/components/schemas/DocumentInteractionsDefinition"
          },
          "status": {
            "type": "string"
          },
          "additionalUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Additional variations of the url that this document points to."
          },
          "customProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomProperty"
            },
            "description": "Additional metadata properties of the document."
          }
        },
        "required": [
          "datasource"
        ]
      },
      "ExternalDocumentsProxyResponse": {
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request, i.e. OK or ERROR"
          },
          "version": {
            "type": "number",
            "description": "Version of the response"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExternalDocumentProxy"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "actAsBearerToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Encrypted auth token generated by debug endpoint."
      },
      "cookieAuth": {
        "type": "apiKey",
        "in": "cookie",
        "name": "SSO_DEPENDENT"
      }
    },
    "parameters": {
      "clientVersion": {
        "name": "clientVersion",
        "in": "query",
        "description": "The version of the client making the request.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "domain": {
        "name": "domain",
        "in": "query",
        "description": "The domain of the top-level page in which the client is being run. For embedded search and NSR, it will be the domain of the embedding page. For sidebar, it will be the domain of the embedding page if it's a recognized workplace app. For NTP and app.glean.com requests, it will be empty.",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "eids": {
        "name": "eids",
        "in": "query",
        "description": "List of experiment ids to force for incoming request.",
        "required": false,
        "style": "simple",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "actas": {
        "name": "actas",
        "in": "query",
        "description": "Email of another user to act as for debugging purposes. Requires sufficient permissions.",
        "required": false,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "PeopleSuggestRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PeopleSuggestRequest"
            }
          }
        },
        "description": "Includes request params for type of suggestions.",
        "required": true,
        "x-exportParamName": "PeopleSuggestRequest"
      }
    }
  },
  "security": [
    {
      "actAsBearerToken": []
    },
    {
      "cookieAuth": []
    }
  ]
}