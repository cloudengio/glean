/*
Glean Client API

# Introduction These are the public APIs to enable implementing a custom client interface to the Glean system.  # Usage guidelines This API is evolving fast. Glean will provide advance notice of any planned backwards incompatible changes along with a 6-month sunset period for anything that requires developers to adopt the new versions. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
	"time"
)

// checks if the AnnouncementCreateOrUpdateData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnouncementCreateOrUpdateData{}

// AnnouncementCreateOrUpdateData struct for AnnouncementCreateOrUpdateData
type AnnouncementCreateOrUpdateData struct {
	// If editing an existing announcement, the announcement's ID.
	Id *int32 `json:"id,omitempty"`
	// The headline of the announcement.
	Title string `json:"title"`
	StructuredText *StructuredText `json:"structuredText,omitempty"`
	// An emoji used to indicate the nature of the announcement.
	Emoji *string `json:"emoji,omitempty"`
	// The date and time at which the announcement becomes active. If omitted, the announement will become active immediately.
	StartTime *time.Time `json:"startTime,omitempty"`
	// The date and time at which the announcement expires.
	EndTime time.Time `json:"endTime"`
	// Filters which restrict who should see the announcement. Values are taken from the corresponding filters in people search.
	AudienceFilters []FacetFilter `json:"audienceFilters,omitempty"`
}

// NewAnnouncementCreateOrUpdateData instantiates a new AnnouncementCreateOrUpdateData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnouncementCreateOrUpdateData(title string, endTime time.Time) *AnnouncementCreateOrUpdateData {
	this := AnnouncementCreateOrUpdateData{}
	this.Title = title
	this.EndTime = endTime
	return &this
}

// NewAnnouncementCreateOrUpdateDataWithDefaults instantiates a new AnnouncementCreateOrUpdateData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementCreateOrUpdateDataWithDefaults() *AnnouncementCreateOrUpdateData {
	this := AnnouncementCreateOrUpdateData{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AnnouncementCreateOrUpdateData) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementCreateOrUpdateData) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AnnouncementCreateOrUpdateData) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AnnouncementCreateOrUpdateData) SetId(v int32) {
	o.Id = &v
}

// GetTitle returns the Title field value
func (o *AnnouncementCreateOrUpdateData) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *AnnouncementCreateOrUpdateData) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *AnnouncementCreateOrUpdateData) SetTitle(v string) {
	o.Title = v
}

// GetStructuredText returns the StructuredText field value if set, zero value otherwise.
func (o *AnnouncementCreateOrUpdateData) GetStructuredText() StructuredText {
	if o == nil || IsNil(o.StructuredText) {
		var ret StructuredText
		return ret
	}
	return *o.StructuredText
}

// GetStructuredTextOk returns a tuple with the StructuredText field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementCreateOrUpdateData) GetStructuredTextOk() (*StructuredText, bool) {
	if o == nil || IsNil(o.StructuredText) {
		return nil, false
	}
	return o.StructuredText, true
}

// HasStructuredText returns a boolean if a field has been set.
func (o *AnnouncementCreateOrUpdateData) HasStructuredText() bool {
	if o != nil && !IsNil(o.StructuredText) {
		return true
	}

	return false
}

// SetStructuredText gets a reference to the given StructuredText and assigns it to the StructuredText field.
func (o *AnnouncementCreateOrUpdateData) SetStructuredText(v StructuredText) {
	o.StructuredText = &v
}

// GetEmoji returns the Emoji field value if set, zero value otherwise.
func (o *AnnouncementCreateOrUpdateData) GetEmoji() string {
	if o == nil || IsNil(o.Emoji) {
		var ret string
		return ret
	}
	return *o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementCreateOrUpdateData) GetEmojiOk() (*string, bool) {
	if o == nil || IsNil(o.Emoji) {
		return nil, false
	}
	return o.Emoji, true
}

// HasEmoji returns a boolean if a field has been set.
func (o *AnnouncementCreateOrUpdateData) HasEmoji() bool {
	if o != nil && !IsNil(o.Emoji) {
		return true
	}

	return false
}

// SetEmoji gets a reference to the given string and assigns it to the Emoji field.
func (o *AnnouncementCreateOrUpdateData) SetEmoji(v string) {
	o.Emoji = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *AnnouncementCreateOrUpdateData) GetStartTime() time.Time {
	if o == nil || IsNil(o.StartTime) {
		var ret time.Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementCreateOrUpdateData) GetStartTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *AnnouncementCreateOrUpdateData) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given time.Time and assigns it to the StartTime field.
func (o *AnnouncementCreateOrUpdateData) SetStartTime(v time.Time) {
	o.StartTime = &v
}

// GetEndTime returns the EndTime field value
func (o *AnnouncementCreateOrUpdateData) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *AnnouncementCreateOrUpdateData) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *AnnouncementCreateOrUpdateData) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetAudienceFilters returns the AudienceFilters field value if set, zero value otherwise.
func (o *AnnouncementCreateOrUpdateData) GetAudienceFilters() []FacetFilter {
	if o == nil || IsNil(o.AudienceFilters) {
		var ret []FacetFilter
		return ret
	}
	return o.AudienceFilters
}

// GetAudienceFiltersOk returns a tuple with the AudienceFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementCreateOrUpdateData) GetAudienceFiltersOk() ([]FacetFilter, bool) {
	if o == nil || IsNil(o.AudienceFilters) {
		return nil, false
	}
	return o.AudienceFilters, true
}

// HasAudienceFilters returns a boolean if a field has been set.
func (o *AnnouncementCreateOrUpdateData) HasAudienceFilters() bool {
	if o != nil && !IsNil(o.AudienceFilters) {
		return true
	}

	return false
}

// SetAudienceFilters gets a reference to the given []FacetFilter and assigns it to the AudienceFilters field.
func (o *AnnouncementCreateOrUpdateData) SetAudienceFilters(v []FacetFilter) {
	o.AudienceFilters = v
}

func (o AnnouncementCreateOrUpdateData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnouncementCreateOrUpdateData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.StructuredText) {
		toSerialize["structuredText"] = o.StructuredText
	}
	if !IsNil(o.Emoji) {
		toSerialize["emoji"] = o.Emoji
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	toSerialize["endTime"] = o.EndTime
	if !IsNil(o.AudienceFilters) {
		toSerialize["audienceFilters"] = o.AudienceFilters
	}
	return toSerialize, nil
}

type NullableAnnouncementCreateOrUpdateData struct {
	value *AnnouncementCreateOrUpdateData
	isSet bool
}

func (v NullableAnnouncementCreateOrUpdateData) Get() *AnnouncementCreateOrUpdateData {
	return v.value
}

func (v *NullableAnnouncementCreateOrUpdateData) Set(val *AnnouncementCreateOrUpdateData) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncementCreateOrUpdateData) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncementCreateOrUpdateData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncementCreateOrUpdateData(val *AnnouncementCreateOrUpdateData) *NullableAnnouncementCreateOrUpdateData {
	return &NullableAnnouncementCreateOrUpdateData{value: val, isSet: true}
}

func (v NullableAnnouncementCreateOrUpdateData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncementCreateOrUpdateData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


