/*
Glean Client API - Platform Preview

# Introduction These are all the APIs used by Glean to implement the Glean client. These are available as platform preview for implementing a custom client to the Glean system.  # Usage guidelines A subset of these endpoints are also in the developer ready section, which is available for public use. The rest of the endpoints are subject to prior agreement with Glean before usage. Please contact support@glean.com if you would like to use an API that is not currently available in the developer ready section. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleanclientsdk

import (
	"encoding/json"
)

// checks if the GetEventsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEventsRequest{}

// GetEventsRequest struct for GetEventsRequest
type GetEventsRequest struct {
	// The ids of the calendar events to be retrieved.
	Ids []string `json:"ids"`
	// Auth tokens if client-side authentication.
	AuthTokens []AuthToken `json:"authTokens,omitempty"`
}

// NewGetEventsRequest instantiates a new GetEventsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEventsRequest(ids []string) *GetEventsRequest {
	this := GetEventsRequest{}
	this.Ids = ids
	return &this
}

// NewGetEventsRequestWithDefaults instantiates a new GetEventsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEventsRequestWithDefaults() *GetEventsRequest {
	this := GetEventsRequest{}
	return &this
}

// GetIds returns the Ids field value
func (o *GetEventsRequest) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
func (o *GetEventsRequest) GetIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *GetEventsRequest) SetIds(v []string) {
	o.Ids = v
}

// GetAuthTokens returns the AuthTokens field value if set, zero value otherwise.
func (o *GetEventsRequest) GetAuthTokens() []AuthToken {
	if o == nil || IsNil(o.AuthTokens) {
		var ret []AuthToken
		return ret
	}
	return o.AuthTokens
}

// GetAuthTokensOk returns a tuple with the AuthTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetEventsRequest) GetAuthTokensOk() ([]AuthToken, bool) {
	if o == nil || IsNil(o.AuthTokens) {
		return nil, false
	}
	return o.AuthTokens, true
}

// HasAuthTokens returns a boolean if a field has been set.
func (o *GetEventsRequest) HasAuthTokens() bool {
	if o != nil && !IsNil(o.AuthTokens) {
		return true
	}

	return false
}

// SetAuthTokens gets a reference to the given []AuthToken and assigns it to the AuthTokens field.
func (o *GetEventsRequest) SetAuthTokens(v []AuthToken) {
	o.AuthTokens = v
}

func (o GetEventsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEventsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ids"] = o.Ids
	if !IsNil(o.AuthTokens) {
		toSerialize["authTokens"] = o.AuthTokens
	}
	return toSerialize, nil
}

type NullableGetEventsRequest struct {
	value *GetEventsRequest
	isSet bool
}

func (v NullableGetEventsRequest) Get() *GetEventsRequest {
	return v.value
}

func (v *NullableGetEventsRequest) Set(val *GetEventsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEventsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEventsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEventsRequest(val *GetEventsRequest) *NullableGetEventsRequest {
	return &NullableGetEventsRequest{value: val, isSet: true}
}

func (v NullableGetEventsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEventsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


