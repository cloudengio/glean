/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// ProcessAllDocumentsRequest Describes the request body of the /processalldocuments API call
type ProcessAllDocumentsRequest struct {
	// If provided, process documents only for this custom datasource. Otherwise all uploaded documents are processed.
	Datasource *string `json:"datasource,omitempty"`
}

// NewProcessAllDocumentsRequest instantiates a new ProcessAllDocumentsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessAllDocumentsRequest() *ProcessAllDocumentsRequest {
	this := ProcessAllDocumentsRequest{}
	return &this
}

// NewProcessAllDocumentsRequestWithDefaults instantiates a new ProcessAllDocumentsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessAllDocumentsRequestWithDefaults() *ProcessAllDocumentsRequest {
	this := ProcessAllDocumentsRequest{}
	return &this
}

// GetDatasource returns the Datasource field value if set, zero value otherwise.
func (o *ProcessAllDocumentsRequest) GetDatasource() string {
	if o == nil || o.Datasource == nil {
		var ret string
		return ret
	}
	return *o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessAllDocumentsRequest) GetDatasourceOk() (*string, bool) {
	if o == nil || o.Datasource == nil {
		return nil, false
	}
	return o.Datasource, true
}

// HasDatasource returns a boolean if a field has been set.
func (o *ProcessAllDocumentsRequest) HasDatasource() bool {
	if o != nil && o.Datasource != nil {
		return true
	}

	return false
}

// SetDatasource gets a reference to the given string and assigns it to the Datasource field.
func (o *ProcessAllDocumentsRequest) SetDatasource(v string) {
	o.Datasource = &v
}

func (o ProcessAllDocumentsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Datasource != nil {
		toSerialize["datasource"] = o.Datasource
	}
	return json.Marshal(toSerialize)
}

type NullableProcessAllDocumentsRequest struct {
	value *ProcessAllDocumentsRequest
	isSet bool
}

func (v NullableProcessAllDocumentsRequest) Get() *ProcessAllDocumentsRequest {
	return v.value
}

func (v *NullableProcessAllDocumentsRequest) Set(val *ProcessAllDocumentsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessAllDocumentsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessAllDocumentsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessAllDocumentsRequest(val *ProcessAllDocumentsRequest) *NullableProcessAllDocumentsRequest {
	return &NullableProcessAllDocumentsRequest{value: val, isSet: true}
}

func (v NullableProcessAllDocumentsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessAllDocumentsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


