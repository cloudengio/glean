/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// IndexGroupRequest Describes the request body of the /indexgroup API call
type IndexGroupRequest struct {
	// Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
	Version *int64 `json:"version,omitempty"`
	// The datasource for which the group is added
	Datasource string `json:"datasource"`
	Group DatasourceGroupDefinition `json:"group"`
}

// NewIndexGroupRequest instantiates a new IndexGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexGroupRequest(datasource string, group DatasourceGroupDefinition) *IndexGroupRequest {
	this := IndexGroupRequest{}
	this.Datasource = datasource
	this.Group = group
	return &this
}

// NewIndexGroupRequestWithDefaults instantiates a new IndexGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexGroupRequestWithDefaults() *IndexGroupRequest {
	this := IndexGroupRequest{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IndexGroupRequest) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexGroupRequest) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IndexGroupRequest) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *IndexGroupRequest) SetVersion(v int64) {
	o.Version = &v
}

// GetDatasource returns the Datasource field value
func (o *IndexGroupRequest) GetDatasource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value
// and a boolean to check if the value has been set.
func (o *IndexGroupRequest) GetDatasourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datasource, true
}

// SetDatasource sets field value
func (o *IndexGroupRequest) SetDatasource(v string) {
	o.Datasource = v
}

// GetGroup returns the Group field value
func (o *IndexGroupRequest) GetGroup() DatasourceGroupDefinition {
	if o == nil {
		var ret DatasourceGroupDefinition
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *IndexGroupRequest) GetGroupOk() (*DatasourceGroupDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *IndexGroupRequest) SetGroup(v DatasourceGroupDefinition) {
	o.Group = v
}

func (o IndexGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["datasource"] = o.Datasource
	}
	if true {
		toSerialize["group"] = o.Group
	}
	return json.Marshal(toSerialize)
}

type NullableIndexGroupRequest struct {
	value *IndexGroupRequest
	isSet bool
}

func (v NullableIndexGroupRequest) Get() *IndexGroupRequest {
	return v.value
}

func (v *NullableIndexGroupRequest) Set(val *IndexGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexGroupRequest(val *IndexGroupRequest) *NullableIndexGroupRequest {
	return &NullableIndexGroupRequest{value: val, isSet: true}
}

func (v NullableIndexGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


