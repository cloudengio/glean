/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// DatasourceBulkMembershipDefinition describes the membership row of a group in the bulk uploaded. Only one of memberUserId and memberGroupName can be specified.
type DatasourceBulkMembershipDefinition struct {
	// If the member is a user, then the email or datasource id for the user
	MemberUserId *string `json:"memberUserId,omitempty"`
	// If the member is a group, then the name of the member group
	MemberGroupName *string `json:"memberGroupName,omitempty"`
}

// NewDatasourceBulkMembershipDefinition instantiates a new DatasourceBulkMembershipDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceBulkMembershipDefinition() *DatasourceBulkMembershipDefinition {
	this := DatasourceBulkMembershipDefinition{}
	return &this
}

// NewDatasourceBulkMembershipDefinitionWithDefaults instantiates a new DatasourceBulkMembershipDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceBulkMembershipDefinitionWithDefaults() *DatasourceBulkMembershipDefinition {
	this := DatasourceBulkMembershipDefinition{}
	return &this
}

// GetMemberUserId returns the MemberUserId field value if set, zero value otherwise.
func (o *DatasourceBulkMembershipDefinition) GetMemberUserId() string {
	if o == nil || o.MemberUserId == nil {
		var ret string
		return ret
	}
	return *o.MemberUserId
}

// GetMemberUserIdOk returns a tuple with the MemberUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceBulkMembershipDefinition) GetMemberUserIdOk() (*string, bool) {
	if o == nil || o.MemberUserId == nil {
		return nil, false
	}
	return o.MemberUserId, true
}

// HasMemberUserId returns a boolean if a field has been set.
func (o *DatasourceBulkMembershipDefinition) HasMemberUserId() bool {
	if o != nil && o.MemberUserId != nil {
		return true
	}

	return false
}

// SetMemberUserId gets a reference to the given string and assigns it to the MemberUserId field.
func (o *DatasourceBulkMembershipDefinition) SetMemberUserId(v string) {
	o.MemberUserId = &v
}

// GetMemberGroupName returns the MemberGroupName field value if set, zero value otherwise.
func (o *DatasourceBulkMembershipDefinition) GetMemberGroupName() string {
	if o == nil || o.MemberGroupName == nil {
		var ret string
		return ret
	}
	return *o.MemberGroupName
}

// GetMemberGroupNameOk returns a tuple with the MemberGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceBulkMembershipDefinition) GetMemberGroupNameOk() (*string, bool) {
	if o == nil || o.MemberGroupName == nil {
		return nil, false
	}
	return o.MemberGroupName, true
}

// HasMemberGroupName returns a boolean if a field has been set.
func (o *DatasourceBulkMembershipDefinition) HasMemberGroupName() bool {
	if o != nil && o.MemberGroupName != nil {
		return true
	}

	return false
}

// SetMemberGroupName gets a reference to the given string and assigns it to the MemberGroupName field.
func (o *DatasourceBulkMembershipDefinition) SetMemberGroupName(v string) {
	o.MemberGroupName = &v
}

func (o DatasourceBulkMembershipDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MemberUserId != nil {
		toSerialize["memberUserId"] = o.MemberUserId
	}
	if o.MemberGroupName != nil {
		toSerialize["memberGroupName"] = o.MemberGroupName
	}
	return json.Marshal(toSerialize)
}

type NullableDatasourceBulkMembershipDefinition struct {
	value *DatasourceBulkMembershipDefinition
	isSet bool
}

func (v NullableDatasourceBulkMembershipDefinition) Get() *DatasourceBulkMembershipDefinition {
	return v.value
}

func (v *NullableDatasourceBulkMembershipDefinition) Set(val *DatasourceBulkMembershipDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceBulkMembershipDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceBulkMembershipDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceBulkMembershipDefinition(val *DatasourceBulkMembershipDefinition) *NullableDatasourceBulkMembershipDefinition {
	return &NullableDatasourceBulkMembershipDefinition{value: val, isSet: true}
}

func (v NullableDatasourceBulkMembershipDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceBulkMembershipDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


