/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// DatasourceUserDefinition describes a user in the datasource
type DatasourceUserDefinition struct {
	Email *string `json:"email,omitempty"`
	// To be supplied if the user id in the datasource is not the email
	UserId *string `json:"userId,omitempty"`
	Name string `json:"name"`
	// set to false if the user is a former employee or a bot
	IsActive *bool `json:"isActive,omitempty"`
}

// NewDatasourceUserDefinition instantiates a new DatasourceUserDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceUserDefinition(name string) *DatasourceUserDefinition {
	this := DatasourceUserDefinition{}
	this.Name = name
	return &this
}

// NewDatasourceUserDefinitionWithDefaults instantiates a new DatasourceUserDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceUserDefinitionWithDefaults() *DatasourceUserDefinition {
	this := DatasourceUserDefinition{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *DatasourceUserDefinition) GetEmail() string {
	if o == nil || o.Email == nil {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceUserDefinition) GetEmailOk() (*string, bool) {
	if o == nil || o.Email == nil {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *DatasourceUserDefinition) HasEmail() bool {
	if o != nil && o.Email != nil {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *DatasourceUserDefinition) SetEmail(v string) {
	o.Email = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *DatasourceUserDefinition) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceUserDefinition) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *DatasourceUserDefinition) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *DatasourceUserDefinition) SetUserId(v string) {
	o.UserId = &v
}

// GetName returns the Name field value
func (o *DatasourceUserDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatasourceUserDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatasourceUserDefinition) SetName(v string) {
	o.Name = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *DatasourceUserDefinition) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceUserDefinition) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *DatasourceUserDefinition) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *DatasourceUserDefinition) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o DatasourceUserDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Email != nil {
		toSerialize["email"] = o.Email
	}
	if o.UserId != nil {
		toSerialize["userId"] = o.UserId
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.IsActive != nil {
		toSerialize["isActive"] = o.IsActive
	}
	return json.Marshal(toSerialize)
}

type NullableDatasourceUserDefinition struct {
	value *DatasourceUserDefinition
	isSet bool
}

func (v NullableDatasourceUserDefinition) Get() *DatasourceUserDefinition {
	return v.value
}

func (v *NullableDatasourceUserDefinition) Set(val *DatasourceUserDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceUserDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceUserDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceUserDefinition(val *DatasourceUserDefinition) *NullableDatasourceUserDefinition {
	return &NullableDatasourceUserDefinition{value: val, isSet: true}
}

func (v NullableDatasourceUserDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceUserDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


