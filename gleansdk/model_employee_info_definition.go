/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// EmployeeInfoDefinition Describes employee info
type EmployeeInfoDefinition struct {
	// The employee's email
	Email string `json:"email"`
	// The first name of the employee
	FirstName *string `json:"firstName,omitempty"`
	// The last name of the employee
	LastName *string `json:"lastName,omitempty"`
	// The preferred name or nickname of the employee
	PreferredName *string `json:"preferredName,omitempty"`
	// **[Advanced]** A unique universal internal identifier for the employee. This is solely used for understanding manager relationships along with `managerId`. 
	Id *string `json:"id,omitempty"`
	// The employee's phone number.
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	// The employee's location (city/office name etc).
	// Deprecated
	Location *string `json:"location,omitempty"`
	StructuredLocation *StructuredLocation `json:"structuredLocation,omitempty"`
	// The employee's role title.
	Title *string `json:"title,omitempty"`
	// The employee's profile pic
	PhotoUrl *string `json:"photoUrl,omitempty"`
	// Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
	BusinessUnit *string `json:"businessUnit,omitempty"`
	// An organizational unit where everyone has a similar task, e.g. `Engineering`.
	Department string `json:"department"`
	// The datasource profiles of the employee, e.g. `Slack`,`Github`.
	DatasourceProfiles []DatasourceProfile `json:"datasourceProfiles,omitempty"`
	// Info about the employee's team(s)
	Teams []EmployeeTeamInfo `json:"teams,omitempty"`
	// The date when the employee started
	StartDate *string `json:"startDate,omitempty"`
	// If a former employee, the last date of employment.
	EndDate *string `json:"endDate,omitempty"`
	// Short biography or mission statement of the employee.
	Bio *string `json:"bio,omitempty"`
	// She/her, He/his or other pronoun.
	Pronoun *string `json:"pronoun,omitempty"`
	// Other names associated with the employee.
	AlsoKnownAs []string `json:"alsoKnownAs,omitempty"`
	// Link to internal company person profile.
	ProfileUrl *string `json:"profileUrl,omitempty"`
	// List of social network profiles.
	SocialNetworks []SocialNetworkDefinition `json:"socialNetworks,omitempty"`
	// The email of the employee's manager
	ManagerEmail *string `json:"managerEmail,omitempty"`
	// **[Advanced]** A unique universal internal identifier for the employee's manager. This is solely used in conjunction with `id`. 
	ManagerId *string `json:"managerId,omitempty"`
	// The status of the employee, an enum of `CURRENT`, `FUTURE`, `EX`
	Status *string `json:"status,omitempty"`
	// List of additional fields with more information about the employee.
	AdditionalFields []AdditionalFieldDefinition `json:"additionalFields,omitempty"`
}

// NewEmployeeInfoDefinition instantiates a new EmployeeInfoDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmployeeInfoDefinition(email string, department string) *EmployeeInfoDefinition {
	this := EmployeeInfoDefinition{}
	this.Email = email
	this.Department = department
	var status string = "CURRENT"
	this.Status = &status
	return &this
}

// NewEmployeeInfoDefinitionWithDefaults instantiates a new EmployeeInfoDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmployeeInfoDefinitionWithDefaults() *EmployeeInfoDefinition {
	this := EmployeeInfoDefinition{}
	var status string = "CURRENT"
	this.Status = &status
	return &this
}

// GetEmail returns the Email field value
func (o *EmployeeInfoDefinition) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *EmployeeInfoDefinition) SetEmail(v string) {
	o.Email = v
}

// GetFirstName returns the FirstName field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetFirstName() string {
	if o == nil || o.FirstName == nil {
		var ret string
		return ret
	}
	return *o.FirstName
}

// GetFirstNameOk returns a tuple with the FirstName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetFirstNameOk() (*string, bool) {
	if o == nil || o.FirstName == nil {
		return nil, false
	}
	return o.FirstName, true
}

// HasFirstName returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasFirstName() bool {
	if o != nil && o.FirstName != nil {
		return true
	}

	return false
}

// SetFirstName gets a reference to the given string and assigns it to the FirstName field.
func (o *EmployeeInfoDefinition) SetFirstName(v string) {
	o.FirstName = &v
}

// GetLastName returns the LastName field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetLastName() string {
	if o == nil || o.LastName == nil {
		var ret string
		return ret
	}
	return *o.LastName
}

// GetLastNameOk returns a tuple with the LastName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetLastNameOk() (*string, bool) {
	if o == nil || o.LastName == nil {
		return nil, false
	}
	return o.LastName, true
}

// HasLastName returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasLastName() bool {
	if o != nil && o.LastName != nil {
		return true
	}

	return false
}

// SetLastName gets a reference to the given string and assigns it to the LastName field.
func (o *EmployeeInfoDefinition) SetLastName(v string) {
	o.LastName = &v
}

// GetPreferredName returns the PreferredName field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetPreferredName() string {
	if o == nil || o.PreferredName == nil {
		var ret string
		return ret
	}
	return *o.PreferredName
}

// GetPreferredNameOk returns a tuple with the PreferredName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetPreferredNameOk() (*string, bool) {
	if o == nil || o.PreferredName == nil {
		return nil, false
	}
	return o.PreferredName, true
}

// HasPreferredName returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasPreferredName() bool {
	if o != nil && o.PreferredName != nil {
		return true
	}

	return false
}

// SetPreferredName gets a reference to the given string and assigns it to the PreferredName field.
func (o *EmployeeInfoDefinition) SetPreferredName(v string) {
	o.PreferredName = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmployeeInfoDefinition) SetId(v string) {
	o.Id = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *EmployeeInfoDefinition) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
// Deprecated
func (o *EmployeeInfoDefinition) GetLocation() string {
	if o == nil || o.Location == nil {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *EmployeeInfoDefinition) GetLocationOk() (*string, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
// Deprecated
func (o *EmployeeInfoDefinition) SetLocation(v string) {
	o.Location = &v
}

// GetStructuredLocation returns the StructuredLocation field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetStructuredLocation() StructuredLocation {
	if o == nil || o.StructuredLocation == nil {
		var ret StructuredLocation
		return ret
	}
	return *o.StructuredLocation
}

// GetStructuredLocationOk returns a tuple with the StructuredLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetStructuredLocationOk() (*StructuredLocation, bool) {
	if o == nil || o.StructuredLocation == nil {
		return nil, false
	}
	return o.StructuredLocation, true
}

// HasStructuredLocation returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasStructuredLocation() bool {
	if o != nil && o.StructuredLocation != nil {
		return true
	}

	return false
}

// SetStructuredLocation gets a reference to the given StructuredLocation and assigns it to the StructuredLocation field.
func (o *EmployeeInfoDefinition) SetStructuredLocation(v StructuredLocation) {
	o.StructuredLocation = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *EmployeeInfoDefinition) SetTitle(v string) {
	o.Title = &v
}

// GetPhotoUrl returns the PhotoUrl field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetPhotoUrl() string {
	if o == nil || o.PhotoUrl == nil {
		var ret string
		return ret
	}
	return *o.PhotoUrl
}

// GetPhotoUrlOk returns a tuple with the PhotoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetPhotoUrlOk() (*string, bool) {
	if o == nil || o.PhotoUrl == nil {
		return nil, false
	}
	return o.PhotoUrl, true
}

// HasPhotoUrl returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasPhotoUrl() bool {
	if o != nil && o.PhotoUrl != nil {
		return true
	}

	return false
}

// SetPhotoUrl gets a reference to the given string and assigns it to the PhotoUrl field.
func (o *EmployeeInfoDefinition) SetPhotoUrl(v string) {
	o.PhotoUrl = &v
}

// GetBusinessUnit returns the BusinessUnit field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetBusinessUnit() string {
	if o == nil || o.BusinessUnit == nil {
		var ret string
		return ret
	}
	return *o.BusinessUnit
}

// GetBusinessUnitOk returns a tuple with the BusinessUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetBusinessUnitOk() (*string, bool) {
	if o == nil || o.BusinessUnit == nil {
		return nil, false
	}
	return o.BusinessUnit, true
}

// HasBusinessUnit returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasBusinessUnit() bool {
	if o != nil && o.BusinessUnit != nil {
		return true
	}

	return false
}

// SetBusinessUnit gets a reference to the given string and assigns it to the BusinessUnit field.
func (o *EmployeeInfoDefinition) SetBusinessUnit(v string) {
	o.BusinessUnit = &v
}

// GetDepartment returns the Department field value
func (o *EmployeeInfoDefinition) GetDepartment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Department
}

// GetDepartmentOk returns a tuple with the Department field value
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetDepartmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Department, true
}

// SetDepartment sets field value
func (o *EmployeeInfoDefinition) SetDepartment(v string) {
	o.Department = v
}

// GetDatasourceProfiles returns the DatasourceProfiles field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetDatasourceProfiles() []DatasourceProfile {
	if o == nil || o.DatasourceProfiles == nil {
		var ret []DatasourceProfile
		return ret
	}
	return o.DatasourceProfiles
}

// GetDatasourceProfilesOk returns a tuple with the DatasourceProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetDatasourceProfilesOk() ([]DatasourceProfile, bool) {
	if o == nil || o.DatasourceProfiles == nil {
		return nil, false
	}
	return o.DatasourceProfiles, true
}

// HasDatasourceProfiles returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasDatasourceProfiles() bool {
	if o != nil && o.DatasourceProfiles != nil {
		return true
	}

	return false
}

// SetDatasourceProfiles gets a reference to the given []DatasourceProfile and assigns it to the DatasourceProfiles field.
func (o *EmployeeInfoDefinition) SetDatasourceProfiles(v []DatasourceProfile) {
	o.DatasourceProfiles = v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetTeams() []EmployeeTeamInfo {
	if o == nil || o.Teams == nil {
		var ret []EmployeeTeamInfo
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetTeamsOk() ([]EmployeeTeamInfo, bool) {
	if o == nil || o.Teams == nil {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasTeams() bool {
	if o != nil && o.Teams != nil {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []EmployeeTeamInfo and assigns it to the Teams field.
func (o *EmployeeInfoDefinition) SetTeams(v []EmployeeTeamInfo) {
	o.Teams = v
}

// GetStartDate returns the StartDate field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetStartDate() string {
	if o == nil || o.StartDate == nil {
		var ret string
		return ret
	}
	return *o.StartDate
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetStartDateOk() (*string, bool) {
	if o == nil || o.StartDate == nil {
		return nil, false
	}
	return o.StartDate, true
}

// HasStartDate returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasStartDate() bool {
	if o != nil && o.StartDate != nil {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given string and assigns it to the StartDate field.
func (o *EmployeeInfoDefinition) SetStartDate(v string) {
	o.StartDate = &v
}

// GetEndDate returns the EndDate field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetEndDate() string {
	if o == nil || o.EndDate == nil {
		var ret string
		return ret
	}
	return *o.EndDate
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetEndDateOk() (*string, bool) {
	if o == nil || o.EndDate == nil {
		return nil, false
	}
	return o.EndDate, true
}

// HasEndDate returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasEndDate() bool {
	if o != nil && o.EndDate != nil {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given string and assigns it to the EndDate field.
func (o *EmployeeInfoDefinition) SetEndDate(v string) {
	o.EndDate = &v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetBio() string {
	if o == nil || o.Bio == nil {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetBioOk() (*string, bool) {
	if o == nil || o.Bio == nil {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasBio() bool {
	if o != nil && o.Bio != nil {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *EmployeeInfoDefinition) SetBio(v string) {
	o.Bio = &v
}

// GetPronoun returns the Pronoun field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetPronoun() string {
	if o == nil || o.Pronoun == nil {
		var ret string
		return ret
	}
	return *o.Pronoun
}

// GetPronounOk returns a tuple with the Pronoun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetPronounOk() (*string, bool) {
	if o == nil || o.Pronoun == nil {
		return nil, false
	}
	return o.Pronoun, true
}

// HasPronoun returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasPronoun() bool {
	if o != nil && o.Pronoun != nil {
		return true
	}

	return false
}

// SetPronoun gets a reference to the given string and assigns it to the Pronoun field.
func (o *EmployeeInfoDefinition) SetPronoun(v string) {
	o.Pronoun = &v
}

// GetAlsoKnownAs returns the AlsoKnownAs field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetAlsoKnownAs() []string {
	if o == nil || o.AlsoKnownAs == nil {
		var ret []string
		return ret
	}
	return o.AlsoKnownAs
}

// GetAlsoKnownAsOk returns a tuple with the AlsoKnownAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetAlsoKnownAsOk() ([]string, bool) {
	if o == nil || o.AlsoKnownAs == nil {
		return nil, false
	}
	return o.AlsoKnownAs, true
}

// HasAlsoKnownAs returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasAlsoKnownAs() bool {
	if o != nil && o.AlsoKnownAs != nil {
		return true
	}

	return false
}

// SetAlsoKnownAs gets a reference to the given []string and assigns it to the AlsoKnownAs field.
func (o *EmployeeInfoDefinition) SetAlsoKnownAs(v []string) {
	o.AlsoKnownAs = v
}

// GetProfileUrl returns the ProfileUrl field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetProfileUrl() string {
	if o == nil || o.ProfileUrl == nil {
		var ret string
		return ret
	}
	return *o.ProfileUrl
}

// GetProfileUrlOk returns a tuple with the ProfileUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetProfileUrlOk() (*string, bool) {
	if o == nil || o.ProfileUrl == nil {
		return nil, false
	}
	return o.ProfileUrl, true
}

// HasProfileUrl returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasProfileUrl() bool {
	if o != nil && o.ProfileUrl != nil {
		return true
	}

	return false
}

// SetProfileUrl gets a reference to the given string and assigns it to the ProfileUrl field.
func (o *EmployeeInfoDefinition) SetProfileUrl(v string) {
	o.ProfileUrl = &v
}

// GetSocialNetworks returns the SocialNetworks field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetSocialNetworks() []SocialNetworkDefinition {
	if o == nil || o.SocialNetworks == nil {
		var ret []SocialNetworkDefinition
		return ret
	}
	return o.SocialNetworks
}

// GetSocialNetworksOk returns a tuple with the SocialNetworks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetSocialNetworksOk() ([]SocialNetworkDefinition, bool) {
	if o == nil || o.SocialNetworks == nil {
		return nil, false
	}
	return o.SocialNetworks, true
}

// HasSocialNetworks returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasSocialNetworks() bool {
	if o != nil && o.SocialNetworks != nil {
		return true
	}

	return false
}

// SetSocialNetworks gets a reference to the given []SocialNetworkDefinition and assigns it to the SocialNetworks field.
func (o *EmployeeInfoDefinition) SetSocialNetworks(v []SocialNetworkDefinition) {
	o.SocialNetworks = v
}

// GetManagerEmail returns the ManagerEmail field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetManagerEmail() string {
	if o == nil || o.ManagerEmail == nil {
		var ret string
		return ret
	}
	return *o.ManagerEmail
}

// GetManagerEmailOk returns a tuple with the ManagerEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetManagerEmailOk() (*string, bool) {
	if o == nil || o.ManagerEmail == nil {
		return nil, false
	}
	return o.ManagerEmail, true
}

// HasManagerEmail returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasManagerEmail() bool {
	if o != nil && o.ManagerEmail != nil {
		return true
	}

	return false
}

// SetManagerEmail gets a reference to the given string and assigns it to the ManagerEmail field.
func (o *EmployeeInfoDefinition) SetManagerEmail(v string) {
	o.ManagerEmail = &v
}

// GetManagerId returns the ManagerId field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetManagerId() string {
	if o == nil || o.ManagerId == nil {
		var ret string
		return ret
	}
	return *o.ManagerId
}

// GetManagerIdOk returns a tuple with the ManagerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetManagerIdOk() (*string, bool) {
	if o == nil || o.ManagerId == nil {
		return nil, false
	}
	return o.ManagerId, true
}

// HasManagerId returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasManagerId() bool {
	if o != nil && o.ManagerId != nil {
		return true
	}

	return false
}

// SetManagerId gets a reference to the given string and assigns it to the ManagerId field.
func (o *EmployeeInfoDefinition) SetManagerId(v string) {
	o.ManagerId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *EmployeeInfoDefinition) SetStatus(v string) {
	o.Status = &v
}

// GetAdditionalFields returns the AdditionalFields field value if set, zero value otherwise.
func (o *EmployeeInfoDefinition) GetAdditionalFields() []AdditionalFieldDefinition {
	if o == nil || o.AdditionalFields == nil {
		var ret []AdditionalFieldDefinition
		return ret
	}
	return o.AdditionalFields
}

// GetAdditionalFieldsOk returns a tuple with the AdditionalFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmployeeInfoDefinition) GetAdditionalFieldsOk() ([]AdditionalFieldDefinition, bool) {
	if o == nil || o.AdditionalFields == nil {
		return nil, false
	}
	return o.AdditionalFields, true
}

// HasAdditionalFields returns a boolean if a field has been set.
func (o *EmployeeInfoDefinition) HasAdditionalFields() bool {
	if o != nil && o.AdditionalFields != nil {
		return true
	}

	return false
}

// SetAdditionalFields gets a reference to the given []AdditionalFieldDefinition and assigns it to the AdditionalFields field.
func (o *EmployeeInfoDefinition) SetAdditionalFields(v []AdditionalFieldDefinition) {
	o.AdditionalFields = v
}

func (o EmployeeInfoDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.FirstName != nil {
		toSerialize["firstName"] = o.FirstName
	}
	if o.LastName != nil {
		toSerialize["lastName"] = o.LastName
	}
	if o.PreferredName != nil {
		toSerialize["preferredName"] = o.PreferredName
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.PhoneNumber != nil {
		toSerialize["phoneNumber"] = o.PhoneNumber
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.StructuredLocation != nil {
		toSerialize["structuredLocation"] = o.StructuredLocation
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.PhotoUrl != nil {
		toSerialize["photoUrl"] = o.PhotoUrl
	}
	if o.BusinessUnit != nil {
		toSerialize["businessUnit"] = o.BusinessUnit
	}
	if true {
		toSerialize["department"] = o.Department
	}
	if o.DatasourceProfiles != nil {
		toSerialize["datasourceProfiles"] = o.DatasourceProfiles
	}
	if o.Teams != nil {
		toSerialize["teams"] = o.Teams
	}
	if o.StartDate != nil {
		toSerialize["startDate"] = o.StartDate
	}
	if o.EndDate != nil {
		toSerialize["endDate"] = o.EndDate
	}
	if o.Bio != nil {
		toSerialize["bio"] = o.Bio
	}
	if o.Pronoun != nil {
		toSerialize["pronoun"] = o.Pronoun
	}
	if o.AlsoKnownAs != nil {
		toSerialize["alsoKnownAs"] = o.AlsoKnownAs
	}
	if o.ProfileUrl != nil {
		toSerialize["profileUrl"] = o.ProfileUrl
	}
	if o.SocialNetworks != nil {
		toSerialize["socialNetworks"] = o.SocialNetworks
	}
	if o.ManagerEmail != nil {
		toSerialize["managerEmail"] = o.ManagerEmail
	}
	if o.ManagerId != nil {
		toSerialize["managerId"] = o.ManagerId
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.AdditionalFields != nil {
		toSerialize["additionalFields"] = o.AdditionalFields
	}
	return json.Marshal(toSerialize)
}

type NullableEmployeeInfoDefinition struct {
	value *EmployeeInfoDefinition
	isSet bool
}

func (v NullableEmployeeInfoDefinition) Get() *EmployeeInfoDefinition {
	return v.value
}

func (v *NullableEmployeeInfoDefinition) Set(val *EmployeeInfoDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableEmployeeInfoDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableEmployeeInfoDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmployeeInfoDefinition(val *EmployeeInfoDefinition) *NullableEmployeeInfoDefinition {
	return &NullableEmployeeInfoDefinition{value: val, isSet: true}
}

func (v NullableEmployeeInfoDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmployeeInfoDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


