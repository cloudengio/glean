/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// GetDocumentCountRequest Describes the request body of the /getdocumentcount API call
type GetDocumentCountRequest struct {
	// Datasource name for which document count is needed.
	Name string `json:"name"`
}

// NewGetDocumentCountRequest instantiates a new GetDocumentCountRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetDocumentCountRequest(name string) *GetDocumentCountRequest {
	this := GetDocumentCountRequest{}
	this.Name = name
	return &this
}

// NewGetDocumentCountRequestWithDefaults instantiates a new GetDocumentCountRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetDocumentCountRequestWithDefaults() *GetDocumentCountRequest {
	this := GetDocumentCountRequest{}
	return &this
}

// GetName returns the Name field value
func (o *GetDocumentCountRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *GetDocumentCountRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *GetDocumentCountRequest) SetName(v string) {
	o.Name = v
}

func (o GetDocumentCountRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableGetDocumentCountRequest struct {
	value *GetDocumentCountRequest
	isSet bool
}

func (v NullableGetDocumentCountRequest) Get() *GetDocumentCountRequest {
	return v.value
}

func (v *NullableGetDocumentCountRequest) Set(val *GetDocumentCountRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetDocumentCountRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetDocumentCountRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetDocumentCountRequest(val *GetDocumentCountRequest) *NullableGetDocumentCountRequest {
	return &NullableGetDocumentCountRequest{value: val, isSet: true}
}

func (v NullableGetDocumentCountRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetDocumentCountRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


