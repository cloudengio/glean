/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// DocumentInteractionsDefinition describes the interactions on the document
type DocumentInteractionsDefinition struct {
	NumViews *int32 `json:"numViews,omitempty"`
	NumLikes *int32 `json:"numLikes,omitempty"`
	NumComments *int32 `json:"numComments,omitempty"`
}

// NewDocumentInteractionsDefinition instantiates a new DocumentInteractionsDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentInteractionsDefinition() *DocumentInteractionsDefinition {
	this := DocumentInteractionsDefinition{}
	return &this
}

// NewDocumentInteractionsDefinitionWithDefaults instantiates a new DocumentInteractionsDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentInteractionsDefinitionWithDefaults() *DocumentInteractionsDefinition {
	this := DocumentInteractionsDefinition{}
	return &this
}

// GetNumViews returns the NumViews field value if set, zero value otherwise.
func (o *DocumentInteractionsDefinition) GetNumViews() int32 {
	if o == nil || o.NumViews == nil {
		var ret int32
		return ret
	}
	return *o.NumViews
}

// GetNumViewsOk returns a tuple with the NumViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInteractionsDefinition) GetNumViewsOk() (*int32, bool) {
	if o == nil || o.NumViews == nil {
		return nil, false
	}
	return o.NumViews, true
}

// HasNumViews returns a boolean if a field has been set.
func (o *DocumentInteractionsDefinition) HasNumViews() bool {
	if o != nil && o.NumViews != nil {
		return true
	}

	return false
}

// SetNumViews gets a reference to the given int32 and assigns it to the NumViews field.
func (o *DocumentInteractionsDefinition) SetNumViews(v int32) {
	o.NumViews = &v
}

// GetNumLikes returns the NumLikes field value if set, zero value otherwise.
func (o *DocumentInteractionsDefinition) GetNumLikes() int32 {
	if o == nil || o.NumLikes == nil {
		var ret int32
		return ret
	}
	return *o.NumLikes
}

// GetNumLikesOk returns a tuple with the NumLikes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInteractionsDefinition) GetNumLikesOk() (*int32, bool) {
	if o == nil || o.NumLikes == nil {
		return nil, false
	}
	return o.NumLikes, true
}

// HasNumLikes returns a boolean if a field has been set.
func (o *DocumentInteractionsDefinition) HasNumLikes() bool {
	if o != nil && o.NumLikes != nil {
		return true
	}

	return false
}

// SetNumLikes gets a reference to the given int32 and assigns it to the NumLikes field.
func (o *DocumentInteractionsDefinition) SetNumLikes(v int32) {
	o.NumLikes = &v
}

// GetNumComments returns the NumComments field value if set, zero value otherwise.
func (o *DocumentInteractionsDefinition) GetNumComments() int32 {
	if o == nil || o.NumComments == nil {
		var ret int32
		return ret
	}
	return *o.NumComments
}

// GetNumCommentsOk returns a tuple with the NumComments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentInteractionsDefinition) GetNumCommentsOk() (*int32, bool) {
	if o == nil || o.NumComments == nil {
		return nil, false
	}
	return o.NumComments, true
}

// HasNumComments returns a boolean if a field has been set.
func (o *DocumentInteractionsDefinition) HasNumComments() bool {
	if o != nil && o.NumComments != nil {
		return true
	}

	return false
}

// SetNumComments gets a reference to the given int32 and assigns it to the NumComments field.
func (o *DocumentInteractionsDefinition) SetNumComments(v int32) {
	o.NumComments = &v
}

func (o DocumentInteractionsDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumViews != nil {
		toSerialize["numViews"] = o.NumViews
	}
	if o.NumLikes != nil {
		toSerialize["numLikes"] = o.NumLikes
	}
	if o.NumComments != nil {
		toSerialize["numComments"] = o.NumComments
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentInteractionsDefinition struct {
	value *DocumentInteractionsDefinition
	isSet bool
}

func (v NullableDocumentInteractionsDefinition) Get() *DocumentInteractionsDefinition {
	return v.value
}

func (v *NullableDocumentInteractionsDefinition) Set(val *DocumentInteractionsDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentInteractionsDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentInteractionsDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentInteractionsDefinition(val *DocumentInteractionsDefinition) *NullableDocumentInteractionsDefinition {
	return &NullableDocumentInteractionsDefinition{value: val, isSet: true}
}

func (v NullableDocumentInteractionsDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentInteractionsDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


