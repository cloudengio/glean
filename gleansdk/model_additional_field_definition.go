/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// AdditionalFieldDefinition Additional information about the employee.
type AdditionalFieldDefinition struct {
	// Key to reference this field, e.g. \"languages\".
	Key *string `json:"key,omitempty"`
	// List of type string or HypertextField.  HypertextField is defined as ``` {   anchor: string,    // Anchor text for the hypertext field.   hyperlink: string, // URL for the hypertext field. } ``` Example: ```{\"anchor\":\"Glean\",\"hyperlink\":\"https://glean.com\"}```  When OpenAPI Generator supports oneOf, we will semantically enforce this in the docs. 
	Value []map[string]interface{} `json:"value,omitempty"`
}

// NewAdditionalFieldDefinition instantiates a new AdditionalFieldDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdditionalFieldDefinition() *AdditionalFieldDefinition {
	this := AdditionalFieldDefinition{}
	return &this
}

// NewAdditionalFieldDefinitionWithDefaults instantiates a new AdditionalFieldDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdditionalFieldDefinitionWithDefaults() *AdditionalFieldDefinition {
	this := AdditionalFieldDefinition{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *AdditionalFieldDefinition) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalFieldDefinition) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *AdditionalFieldDefinition) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *AdditionalFieldDefinition) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AdditionalFieldDefinition) GetValue() []map[string]interface{} {
	if o == nil || o.Value == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdditionalFieldDefinition) GetValueOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AdditionalFieldDefinition) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given []map[string]interface{} and assigns it to the Value field.
func (o *AdditionalFieldDefinition) SetValue(v []map[string]interface{}) {
	o.Value = v
}

func (o AdditionalFieldDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableAdditionalFieldDefinition struct {
	value *AdditionalFieldDefinition
	isSet bool
}

func (v NullableAdditionalFieldDefinition) Get() *AdditionalFieldDefinition {
	return v.value
}

func (v *NullableAdditionalFieldDefinition) Set(val *AdditionalFieldDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableAdditionalFieldDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableAdditionalFieldDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdditionalFieldDefinition(val *AdditionalFieldDefinition) *NullableAdditionalFieldDefinition {
	return &NullableAdditionalFieldDefinition{value: val, isSet: true}
}

func (v NullableAdditionalFieldDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdditionalFieldDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


