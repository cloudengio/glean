/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// TeamInfoDefinition Information about an employee's team
type TeamInfoDefinition struct {
	// The unique ID of the team
	Id string `json:"id"`
	// Human-readable team name
	Name string `json:"name"`
	// The description of this team
	Description *string `json:"description,omitempty"`
	// Typically the highest level organizational unit; generally applies to bigger companies with multiple distinct businesses.
	BusinessUnit *string `json:"businessUnit,omitempty"`
	// An organizational unit where everyone has a similar task, e.g. `Engineering`.
	Department *string `json:"department,omitempty"`
	// A link to the team's photo
	PhotoUrl *string `json:"photoUrl,omitempty"`
	// A link to an external team page. If set, team results will link to it. 
	ExternalLink *string `json:"externalLink,omitempty"`
	// The emails of the team
	Emails []TeamEmail `json:"emails,omitempty"`
	// The datasource profiles of the team
	DatasourceProfiles []DatasourceProfile `json:"datasourceProfiles,omitempty"`
	// The members of the team
	Members []TeamMember `json:"members"`
}

// NewTeamInfoDefinition instantiates a new TeamInfoDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamInfoDefinition(id string, name string, members []TeamMember) *TeamInfoDefinition {
	this := TeamInfoDefinition{}
	this.Id = id
	this.Name = name
	this.Members = members
	return &this
}

// NewTeamInfoDefinitionWithDefaults instantiates a new TeamInfoDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamInfoDefinitionWithDefaults() *TeamInfoDefinition {
	this := TeamInfoDefinition{}
	return &this
}

// GetId returns the Id field value
func (o *TeamInfoDefinition) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamInfoDefinition) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TeamInfoDefinition) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TeamInfoDefinition) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TeamInfoDefinition) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TeamInfoDefinition) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TeamInfoDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetBusinessUnit returns the BusinessUnit field value if set, zero value otherwise.
func (o *TeamInfoDefinition) GetBusinessUnit() string {
	if o == nil || o.BusinessUnit == nil {
		var ret string
		return ret
	}
	return *o.BusinessUnit
}

// GetBusinessUnitOk returns a tuple with the BusinessUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetBusinessUnitOk() (*string, bool) {
	if o == nil || o.BusinessUnit == nil {
		return nil, false
	}
	return o.BusinessUnit, true
}

// HasBusinessUnit returns a boolean if a field has been set.
func (o *TeamInfoDefinition) HasBusinessUnit() bool {
	if o != nil && o.BusinessUnit != nil {
		return true
	}

	return false
}

// SetBusinessUnit gets a reference to the given string and assigns it to the BusinessUnit field.
func (o *TeamInfoDefinition) SetBusinessUnit(v string) {
	o.BusinessUnit = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *TeamInfoDefinition) GetDepartment() string {
	if o == nil || o.Department == nil {
		var ret string
		return ret
	}
	return *o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetDepartmentOk() (*string, bool) {
	if o == nil || o.Department == nil {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *TeamInfoDefinition) HasDepartment() bool {
	if o != nil && o.Department != nil {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given string and assigns it to the Department field.
func (o *TeamInfoDefinition) SetDepartment(v string) {
	o.Department = &v
}

// GetPhotoUrl returns the PhotoUrl field value if set, zero value otherwise.
func (o *TeamInfoDefinition) GetPhotoUrl() string {
	if o == nil || o.PhotoUrl == nil {
		var ret string
		return ret
	}
	return *o.PhotoUrl
}

// GetPhotoUrlOk returns a tuple with the PhotoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetPhotoUrlOk() (*string, bool) {
	if o == nil || o.PhotoUrl == nil {
		return nil, false
	}
	return o.PhotoUrl, true
}

// HasPhotoUrl returns a boolean if a field has been set.
func (o *TeamInfoDefinition) HasPhotoUrl() bool {
	if o != nil && o.PhotoUrl != nil {
		return true
	}

	return false
}

// SetPhotoUrl gets a reference to the given string and assigns it to the PhotoUrl field.
func (o *TeamInfoDefinition) SetPhotoUrl(v string) {
	o.PhotoUrl = &v
}

// GetExternalLink returns the ExternalLink field value if set, zero value otherwise.
func (o *TeamInfoDefinition) GetExternalLink() string {
	if o == nil || o.ExternalLink == nil {
		var ret string
		return ret
	}
	return *o.ExternalLink
}

// GetExternalLinkOk returns a tuple with the ExternalLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetExternalLinkOk() (*string, bool) {
	if o == nil || o.ExternalLink == nil {
		return nil, false
	}
	return o.ExternalLink, true
}

// HasExternalLink returns a boolean if a field has been set.
func (o *TeamInfoDefinition) HasExternalLink() bool {
	if o != nil && o.ExternalLink != nil {
		return true
	}

	return false
}

// SetExternalLink gets a reference to the given string and assigns it to the ExternalLink field.
func (o *TeamInfoDefinition) SetExternalLink(v string) {
	o.ExternalLink = &v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *TeamInfoDefinition) GetEmails() []TeamEmail {
	if o == nil || o.Emails == nil {
		var ret []TeamEmail
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetEmailsOk() ([]TeamEmail, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *TeamInfoDefinition) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []TeamEmail and assigns it to the Emails field.
func (o *TeamInfoDefinition) SetEmails(v []TeamEmail) {
	o.Emails = v
}

// GetDatasourceProfiles returns the DatasourceProfiles field value if set, zero value otherwise.
func (o *TeamInfoDefinition) GetDatasourceProfiles() []DatasourceProfile {
	if o == nil || o.DatasourceProfiles == nil {
		var ret []DatasourceProfile
		return ret
	}
	return o.DatasourceProfiles
}

// GetDatasourceProfilesOk returns a tuple with the DatasourceProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetDatasourceProfilesOk() ([]DatasourceProfile, bool) {
	if o == nil || o.DatasourceProfiles == nil {
		return nil, false
	}
	return o.DatasourceProfiles, true
}

// HasDatasourceProfiles returns a boolean if a field has been set.
func (o *TeamInfoDefinition) HasDatasourceProfiles() bool {
	if o != nil && o.DatasourceProfiles != nil {
		return true
	}

	return false
}

// SetDatasourceProfiles gets a reference to the given []DatasourceProfile and assigns it to the DatasourceProfiles field.
func (o *TeamInfoDefinition) SetDatasourceProfiles(v []DatasourceProfile) {
	o.DatasourceProfiles = v
}

// GetMembers returns the Members field value
func (o *TeamInfoDefinition) GetMembers() []TeamMember {
	if o == nil {
		var ret []TeamMember
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *TeamInfoDefinition) GetMembersOk() ([]TeamMember, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *TeamInfoDefinition) SetMembers(v []TeamMember) {
	o.Members = v
}

func (o TeamInfoDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.BusinessUnit != nil {
		toSerialize["businessUnit"] = o.BusinessUnit
	}
	if o.Department != nil {
		toSerialize["department"] = o.Department
	}
	if o.PhotoUrl != nil {
		toSerialize["photoUrl"] = o.PhotoUrl
	}
	if o.ExternalLink != nil {
		toSerialize["externalLink"] = o.ExternalLink
	}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	if o.DatasourceProfiles != nil {
		toSerialize["datasourceProfiles"] = o.DatasourceProfiles
	}
	if true {
		toSerialize["members"] = o.Members
	}
	return json.Marshal(toSerialize)
}

type NullableTeamInfoDefinition struct {
	value *TeamInfoDefinition
	isSet bool
}

func (v NullableTeamInfoDefinition) Get() *TeamInfoDefinition {
	return v.value
}

func (v *NullableTeamInfoDefinition) Set(val *TeamInfoDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamInfoDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamInfoDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamInfoDefinition(val *TeamInfoDefinition) *NullableTeamInfoDefinition {
	return &NullableTeamInfoDefinition{value: val, isSet: true}
}

func (v NullableTeamInfoDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamInfoDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


