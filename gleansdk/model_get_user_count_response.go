/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// GetUserCountResponse Describes the response body of the /getusercount API call
type GetUserCountResponse struct {
	// Number of users corresponding to the specified custom datasource.
	UserCount *int32 `json:"userCount,omitempty"`
}

// NewGetUserCountResponse instantiates a new GetUserCountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserCountResponse() *GetUserCountResponse {
	this := GetUserCountResponse{}
	return &this
}

// NewGetUserCountResponseWithDefaults instantiates a new GetUserCountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserCountResponseWithDefaults() *GetUserCountResponse {
	this := GetUserCountResponse{}
	return &this
}

// GetUserCount returns the UserCount field value if set, zero value otherwise.
func (o *GetUserCountResponse) GetUserCount() int32 {
	if o == nil || o.UserCount == nil {
		var ret int32
		return ret
	}
	return *o.UserCount
}

// GetUserCountOk returns a tuple with the UserCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserCountResponse) GetUserCountOk() (*int32, bool) {
	if o == nil || o.UserCount == nil {
		return nil, false
	}
	return o.UserCount, true
}

// HasUserCount returns a boolean if a field has been set.
func (o *GetUserCountResponse) HasUserCount() bool {
	if o != nil && o.UserCount != nil {
		return true
	}

	return false
}

// SetUserCount gets a reference to the given int32 and assigns it to the UserCount field.
func (o *GetUserCountResponse) SetUserCount(v int32) {
	o.UserCount = &v
}

func (o GetUserCountResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserCount != nil {
		toSerialize["userCount"] = o.UserCount
	}
	return json.Marshal(toSerialize)
}

type NullableGetUserCountResponse struct {
	value *GetUserCountResponse
	isSet bool
}

func (v NullableGetUserCountResponse) Get() *GetUserCountResponse {
	return v.value
}

func (v *NullableGetUserCountResponse) Set(val *GetUserCountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserCountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserCountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserCountResponse(val *GetUserCountResponse) *NullableGetUserCountResponse {
	return &NullableGetUserCountResponse{value: val, isSet: true}
}

func (v NullableGetUserCountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserCountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


