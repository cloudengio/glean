/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// TeamMember Information about a team's member
type TeamMember struct {
	// The member's email
	Email string `json:"email"`
	// The member's relationship to the team, an enum of `MEMBER`, `MANAGER`, `LEAD`, `POINT_OF_CONTACT`, `OTHER`
	Relationship *string `json:"relationship,omitempty"`
	// The member's start date
	JoinDate *string `json:"join_date,omitempty"`
}

// NewTeamMember instantiates a new TeamMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMember(email string) *TeamMember {
	this := TeamMember{}
	this.Email = email
	var relationship string = "MEMBER"
	this.Relationship = &relationship
	return &this
}

// NewTeamMemberWithDefaults instantiates a new TeamMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMemberWithDefaults() *TeamMember {
	this := TeamMember{}
	var relationship string = "MEMBER"
	this.Relationship = &relationship
	return &this
}

// GetEmail returns the Email field value
func (o *TeamMember) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TeamMember) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TeamMember) SetEmail(v string) {
	o.Email = v
}

// GetRelationship returns the Relationship field value if set, zero value otherwise.
func (o *TeamMember) GetRelationship() string {
	if o == nil || o.Relationship == nil {
		var ret string
		return ret
	}
	return *o.Relationship
}

// GetRelationshipOk returns a tuple with the Relationship field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMember) GetRelationshipOk() (*string, bool) {
	if o == nil || o.Relationship == nil {
		return nil, false
	}
	return o.Relationship, true
}

// HasRelationship returns a boolean if a field has been set.
func (o *TeamMember) HasRelationship() bool {
	if o != nil && o.Relationship != nil {
		return true
	}

	return false
}

// SetRelationship gets a reference to the given string and assigns it to the Relationship field.
func (o *TeamMember) SetRelationship(v string) {
	o.Relationship = &v
}

// GetJoinDate returns the JoinDate field value if set, zero value otherwise.
func (o *TeamMember) GetJoinDate() string {
	if o == nil || o.JoinDate == nil {
		var ret string
		return ret
	}
	return *o.JoinDate
}

// GetJoinDateOk returns a tuple with the JoinDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMember) GetJoinDateOk() (*string, bool) {
	if o == nil || o.JoinDate == nil {
		return nil, false
	}
	return o.JoinDate, true
}

// HasJoinDate returns a boolean if a field has been set.
func (o *TeamMember) HasJoinDate() bool {
	if o != nil && o.JoinDate != nil {
		return true
	}

	return false
}

// SetJoinDate gets a reference to the given string and assigns it to the JoinDate field.
func (o *TeamMember) SetJoinDate(v string) {
	o.JoinDate = &v
}

func (o TeamMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Relationship != nil {
		toSerialize["relationship"] = o.Relationship
	}
	if o.JoinDate != nil {
		toSerialize["join_date"] = o.JoinDate
	}
	return json.Marshal(toSerialize)
}

type NullableTeamMember struct {
	value *TeamMember
	isSet bool
}

func (v NullableTeamMember) Get() *TeamMember {
	return v.value
}

func (v *NullableTeamMember) Set(val *TeamMember) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMember) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMember(val *TeamMember) *NullableTeamMember {
	return &NullableTeamMember{value: val, isSet: true}
}

func (v NullableTeamMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


