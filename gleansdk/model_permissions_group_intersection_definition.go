/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// PermissionsGroupIntersectionDefinition describes a list of groups that are all required in a permissions constraint
type PermissionsGroupIntersectionDefinition struct {
	RequiredGroups []string `json:"requiredGroups,omitempty"`
}

// NewPermissionsGroupIntersectionDefinition instantiates a new PermissionsGroupIntersectionDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPermissionsGroupIntersectionDefinition() *PermissionsGroupIntersectionDefinition {
	this := PermissionsGroupIntersectionDefinition{}
	return &this
}

// NewPermissionsGroupIntersectionDefinitionWithDefaults instantiates a new PermissionsGroupIntersectionDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPermissionsGroupIntersectionDefinitionWithDefaults() *PermissionsGroupIntersectionDefinition {
	this := PermissionsGroupIntersectionDefinition{}
	return &this
}

// GetRequiredGroups returns the RequiredGroups field value if set, zero value otherwise.
func (o *PermissionsGroupIntersectionDefinition) GetRequiredGroups() []string {
	if o == nil || o.RequiredGroups == nil {
		var ret []string
		return ret
	}
	return o.RequiredGroups
}

// GetRequiredGroupsOk returns a tuple with the RequiredGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PermissionsGroupIntersectionDefinition) GetRequiredGroupsOk() ([]string, bool) {
	if o == nil || o.RequiredGroups == nil {
		return nil, false
	}
	return o.RequiredGroups, true
}

// HasRequiredGroups returns a boolean if a field has been set.
func (o *PermissionsGroupIntersectionDefinition) HasRequiredGroups() bool {
	if o != nil && o.RequiredGroups != nil {
		return true
	}

	return false
}

// SetRequiredGroups gets a reference to the given []string and assigns it to the RequiredGroups field.
func (o *PermissionsGroupIntersectionDefinition) SetRequiredGroups(v []string) {
	o.RequiredGroups = v
}

func (o PermissionsGroupIntersectionDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RequiredGroups != nil {
		toSerialize["requiredGroups"] = o.RequiredGroups
	}
	return json.Marshal(toSerialize)
}

type NullablePermissionsGroupIntersectionDefinition struct {
	value *PermissionsGroupIntersectionDefinition
	isSet bool
}

func (v NullablePermissionsGroupIntersectionDefinition) Get() *PermissionsGroupIntersectionDefinition {
	return v.value
}

func (v *NullablePermissionsGroupIntersectionDefinition) Set(val *PermissionsGroupIntersectionDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionsGroupIntersectionDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionsGroupIntersectionDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionsGroupIntersectionDefinition(val *PermissionsGroupIntersectionDefinition) *NullablePermissionsGroupIntersectionDefinition {
	return &NullablePermissionsGroupIntersectionDefinition{value: val, isSet: true}
}

func (v NullablePermissionsGroupIntersectionDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionsGroupIntersectionDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


