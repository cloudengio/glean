/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// DatasourceProfile struct for DatasourceProfile
type DatasourceProfile struct {
	// The datasource the profile is of.
	Datasource string `json:"datasource"`
	// The display name of the person in the given datasource.
	Handle string `json:"handle"`
	// URL to view the user's profile.
	Url *string `json:"url,omitempty"`
	// A deep link, if available, into the datasource's native application for the user's platform (i.e. slack://...).
	NativeAppUrl *string `json:"nativeAppUrl,omitempty"`
	// For internal use only. True iff the data source profile was manually added by a user from within Glean (aka not from the original data source)
	IsUserGenerated *bool `json:"isUserGenerated,omitempty"`
}

// NewDatasourceProfile instantiates a new DatasourceProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatasourceProfile(datasource string, handle string) *DatasourceProfile {
	this := DatasourceProfile{}
	this.Datasource = datasource
	this.Handle = handle
	return &this
}

// NewDatasourceProfileWithDefaults instantiates a new DatasourceProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatasourceProfileWithDefaults() *DatasourceProfile {
	this := DatasourceProfile{}
	return &this
}

// GetDatasource returns the Datasource field value
func (o *DatasourceProfile) GetDatasource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value
// and a boolean to check if the value has been set.
func (o *DatasourceProfile) GetDatasourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datasource, true
}

// SetDatasource sets field value
func (o *DatasourceProfile) SetDatasource(v string) {
	o.Datasource = v
}

// GetHandle returns the Handle field value
func (o *DatasourceProfile) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *DatasourceProfile) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *DatasourceProfile) SetHandle(v string) {
	o.Handle = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *DatasourceProfile) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceProfile) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *DatasourceProfile) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *DatasourceProfile) SetUrl(v string) {
	o.Url = &v
}

// GetNativeAppUrl returns the NativeAppUrl field value if set, zero value otherwise.
func (o *DatasourceProfile) GetNativeAppUrl() string {
	if o == nil || o.NativeAppUrl == nil {
		var ret string
		return ret
	}
	return *o.NativeAppUrl
}

// GetNativeAppUrlOk returns a tuple with the NativeAppUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceProfile) GetNativeAppUrlOk() (*string, bool) {
	if o == nil || o.NativeAppUrl == nil {
		return nil, false
	}
	return o.NativeAppUrl, true
}

// HasNativeAppUrl returns a boolean if a field has been set.
func (o *DatasourceProfile) HasNativeAppUrl() bool {
	if o != nil && o.NativeAppUrl != nil {
		return true
	}

	return false
}

// SetNativeAppUrl gets a reference to the given string and assigns it to the NativeAppUrl field.
func (o *DatasourceProfile) SetNativeAppUrl(v string) {
	o.NativeAppUrl = &v
}

// GetIsUserGenerated returns the IsUserGenerated field value if set, zero value otherwise.
func (o *DatasourceProfile) GetIsUserGenerated() bool {
	if o == nil || o.IsUserGenerated == nil {
		var ret bool
		return ret
	}
	return *o.IsUserGenerated
}

// GetIsUserGeneratedOk returns a tuple with the IsUserGenerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatasourceProfile) GetIsUserGeneratedOk() (*bool, bool) {
	if o == nil || o.IsUserGenerated == nil {
		return nil, false
	}
	return o.IsUserGenerated, true
}

// HasIsUserGenerated returns a boolean if a field has been set.
func (o *DatasourceProfile) HasIsUserGenerated() bool {
	if o != nil && o.IsUserGenerated != nil {
		return true
	}

	return false
}

// SetIsUserGenerated gets a reference to the given bool and assigns it to the IsUserGenerated field.
func (o *DatasourceProfile) SetIsUserGenerated(v bool) {
	o.IsUserGenerated = &v
}

func (o DatasourceProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["datasource"] = o.Datasource
	}
	if true {
		toSerialize["handle"] = o.Handle
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	if o.NativeAppUrl != nil {
		toSerialize["nativeAppUrl"] = o.NativeAppUrl
	}
	if o.IsUserGenerated != nil {
		toSerialize["isUserGenerated"] = o.IsUserGenerated
	}
	return json.Marshal(toSerialize)
}

type NullableDatasourceProfile struct {
	value *DatasourceProfile
	isSet bool
}

func (v NullableDatasourceProfile) Get() *DatasourceProfile {
	return v.value
}

func (v *NullableDatasourceProfile) Set(val *DatasourceProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableDatasourceProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableDatasourceProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatasourceProfile(val *DatasourceProfile) *NullableDatasourceProfile {
	return &NullableDatasourceProfile{value: val, isSet: true}
}

func (v NullableDatasourceProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatasourceProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


