/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// DocumentPermissionsDefinition describes the access control details of the document
type DocumentPermissionsDefinition struct {
	// List of users who can view the document
	AllowedUsers []UserReferenceDefinition `json:"allowedUsers,omitempty"`
	// List of groups that can view the document
	AllowedGroups []string `json:"allowedGroups,omitempty"`
	// List of allowed group intersections. This describes a permissions constraint of the form ((GroupA AND GroupB AND GroupC) OR (GroupX AND GroupY) OR ...
	AllowedGroupIntersections []PermissionsGroupIntersectionDefinition `json:"allowedGroupIntersections,omitempty"`
	// If true, then any Glean user can view the document
	AllowAnonymousAccess *bool `json:"allowAnonymousAccess,omitempty"`
	// If true, then any user who has an account in the datasource can view the document.
	AllowAllDatasourceUsersAccess *bool `json:"allowAllDatasourceUsersAccess,omitempty"`
}

// NewDocumentPermissionsDefinition instantiates a new DocumentPermissionsDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentPermissionsDefinition() *DocumentPermissionsDefinition {
	this := DocumentPermissionsDefinition{}
	return &this
}

// NewDocumentPermissionsDefinitionWithDefaults instantiates a new DocumentPermissionsDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentPermissionsDefinitionWithDefaults() *DocumentPermissionsDefinition {
	this := DocumentPermissionsDefinition{}
	return &this
}

// GetAllowedUsers returns the AllowedUsers field value if set, zero value otherwise.
func (o *DocumentPermissionsDefinition) GetAllowedUsers() []UserReferenceDefinition {
	if o == nil || o.AllowedUsers == nil {
		var ret []UserReferenceDefinition
		return ret
	}
	return o.AllowedUsers
}

// GetAllowedUsersOk returns a tuple with the AllowedUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPermissionsDefinition) GetAllowedUsersOk() ([]UserReferenceDefinition, bool) {
	if o == nil || o.AllowedUsers == nil {
		return nil, false
	}
	return o.AllowedUsers, true
}

// HasAllowedUsers returns a boolean if a field has been set.
func (o *DocumentPermissionsDefinition) HasAllowedUsers() bool {
	if o != nil && o.AllowedUsers != nil {
		return true
	}

	return false
}

// SetAllowedUsers gets a reference to the given []UserReferenceDefinition and assigns it to the AllowedUsers field.
func (o *DocumentPermissionsDefinition) SetAllowedUsers(v []UserReferenceDefinition) {
	o.AllowedUsers = v
}

// GetAllowedGroups returns the AllowedGroups field value if set, zero value otherwise.
func (o *DocumentPermissionsDefinition) GetAllowedGroups() []string {
	if o == nil || o.AllowedGroups == nil {
		var ret []string
		return ret
	}
	return o.AllowedGroups
}

// GetAllowedGroupsOk returns a tuple with the AllowedGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPermissionsDefinition) GetAllowedGroupsOk() ([]string, bool) {
	if o == nil || o.AllowedGroups == nil {
		return nil, false
	}
	return o.AllowedGroups, true
}

// HasAllowedGroups returns a boolean if a field has been set.
func (o *DocumentPermissionsDefinition) HasAllowedGroups() bool {
	if o != nil && o.AllowedGroups != nil {
		return true
	}

	return false
}

// SetAllowedGroups gets a reference to the given []string and assigns it to the AllowedGroups field.
func (o *DocumentPermissionsDefinition) SetAllowedGroups(v []string) {
	o.AllowedGroups = v
}

// GetAllowedGroupIntersections returns the AllowedGroupIntersections field value if set, zero value otherwise.
func (o *DocumentPermissionsDefinition) GetAllowedGroupIntersections() []PermissionsGroupIntersectionDefinition {
	if o == nil || o.AllowedGroupIntersections == nil {
		var ret []PermissionsGroupIntersectionDefinition
		return ret
	}
	return o.AllowedGroupIntersections
}

// GetAllowedGroupIntersectionsOk returns a tuple with the AllowedGroupIntersections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPermissionsDefinition) GetAllowedGroupIntersectionsOk() ([]PermissionsGroupIntersectionDefinition, bool) {
	if o == nil || o.AllowedGroupIntersections == nil {
		return nil, false
	}
	return o.AllowedGroupIntersections, true
}

// HasAllowedGroupIntersections returns a boolean if a field has been set.
func (o *DocumentPermissionsDefinition) HasAllowedGroupIntersections() bool {
	if o != nil && o.AllowedGroupIntersections != nil {
		return true
	}

	return false
}

// SetAllowedGroupIntersections gets a reference to the given []PermissionsGroupIntersectionDefinition and assigns it to the AllowedGroupIntersections field.
func (o *DocumentPermissionsDefinition) SetAllowedGroupIntersections(v []PermissionsGroupIntersectionDefinition) {
	o.AllowedGroupIntersections = v
}

// GetAllowAnonymousAccess returns the AllowAnonymousAccess field value if set, zero value otherwise.
func (o *DocumentPermissionsDefinition) GetAllowAnonymousAccess() bool {
	if o == nil || o.AllowAnonymousAccess == nil {
		var ret bool
		return ret
	}
	return *o.AllowAnonymousAccess
}

// GetAllowAnonymousAccessOk returns a tuple with the AllowAnonymousAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPermissionsDefinition) GetAllowAnonymousAccessOk() (*bool, bool) {
	if o == nil || o.AllowAnonymousAccess == nil {
		return nil, false
	}
	return o.AllowAnonymousAccess, true
}

// HasAllowAnonymousAccess returns a boolean if a field has been set.
func (o *DocumentPermissionsDefinition) HasAllowAnonymousAccess() bool {
	if o != nil && o.AllowAnonymousAccess != nil {
		return true
	}

	return false
}

// SetAllowAnonymousAccess gets a reference to the given bool and assigns it to the AllowAnonymousAccess field.
func (o *DocumentPermissionsDefinition) SetAllowAnonymousAccess(v bool) {
	o.AllowAnonymousAccess = &v
}

// GetAllowAllDatasourceUsersAccess returns the AllowAllDatasourceUsersAccess field value if set, zero value otherwise.
func (o *DocumentPermissionsDefinition) GetAllowAllDatasourceUsersAccess() bool {
	if o == nil || o.AllowAllDatasourceUsersAccess == nil {
		var ret bool
		return ret
	}
	return *o.AllowAllDatasourceUsersAccess
}

// GetAllowAllDatasourceUsersAccessOk returns a tuple with the AllowAllDatasourceUsersAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentPermissionsDefinition) GetAllowAllDatasourceUsersAccessOk() (*bool, bool) {
	if o == nil || o.AllowAllDatasourceUsersAccess == nil {
		return nil, false
	}
	return o.AllowAllDatasourceUsersAccess, true
}

// HasAllowAllDatasourceUsersAccess returns a boolean if a field has been set.
func (o *DocumentPermissionsDefinition) HasAllowAllDatasourceUsersAccess() bool {
	if o != nil && o.AllowAllDatasourceUsersAccess != nil {
		return true
	}

	return false
}

// SetAllowAllDatasourceUsersAccess gets a reference to the given bool and assigns it to the AllowAllDatasourceUsersAccess field.
func (o *DocumentPermissionsDefinition) SetAllowAllDatasourceUsersAccess(v bool) {
	o.AllowAllDatasourceUsersAccess = &v
}

func (o DocumentPermissionsDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedUsers != nil {
		toSerialize["allowedUsers"] = o.AllowedUsers
	}
	if o.AllowedGroups != nil {
		toSerialize["allowedGroups"] = o.AllowedGroups
	}
	if o.AllowedGroupIntersections != nil {
		toSerialize["allowedGroupIntersections"] = o.AllowedGroupIntersections
	}
	if o.AllowAnonymousAccess != nil {
		toSerialize["allowAnonymousAccess"] = o.AllowAnonymousAccess
	}
	if o.AllowAllDatasourceUsersAccess != nil {
		toSerialize["allowAllDatasourceUsersAccess"] = o.AllowAllDatasourceUsersAccess
	}
	return json.Marshal(toSerialize)
}

type NullableDocumentPermissionsDefinition struct {
	value *DocumentPermissionsDefinition
	isSet bool
}

func (v NullableDocumentPermissionsDefinition) Get() *DocumentPermissionsDefinition {
	return v.value
}

func (v *NullableDocumentPermissionsDefinition) Set(val *DocumentPermissionsDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentPermissionsDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentPermissionsDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentPermissionsDefinition(val *DocumentPermissionsDefinition) *NullableDocumentPermissionsDefinition {
	return &NullableDocumentPermissionsDefinition{value: val, isSet: true}
}

func (v NullableDocumentPermissionsDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentPermissionsDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


