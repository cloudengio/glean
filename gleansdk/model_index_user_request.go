/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// IndexUserRequest Describes the request body of the /indexuser API call
type IndexUserRequest struct {
	// Version number for document for optimistic concurrency control. If absent or 0 then no version checks are done.
	Version *int64 `json:"version,omitempty"`
	// The datasource for which the user is added
	Datasource string `json:"datasource"`
	User DatasourceUserDefinition `json:"user"`
}

// NewIndexUserRequest instantiates a new IndexUserRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexUserRequest(datasource string, user DatasourceUserDefinition) *IndexUserRequest {
	this := IndexUserRequest{}
	this.Datasource = datasource
	this.User = user
	return &this
}

// NewIndexUserRequestWithDefaults instantiates a new IndexUserRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexUserRequestWithDefaults() *IndexUserRequest {
	this := IndexUserRequest{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IndexUserRequest) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexUserRequest) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IndexUserRequest) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *IndexUserRequest) SetVersion(v int64) {
	o.Version = &v
}

// GetDatasource returns the Datasource field value
func (o *IndexUserRequest) GetDatasource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Datasource
}

// GetDatasourceOk returns a tuple with the Datasource field value
// and a boolean to check if the value has been set.
func (o *IndexUserRequest) GetDatasourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Datasource, true
}

// SetDatasource sets field value
func (o *IndexUserRequest) SetDatasource(v string) {
	o.Datasource = v
}

// GetUser returns the User field value
func (o *IndexUserRequest) GetUser() DatasourceUserDefinition {
	if o == nil {
		var ret DatasourceUserDefinition
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *IndexUserRequest) GetUserOk() (*DatasourceUserDefinition, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *IndexUserRequest) SetUser(v DatasourceUserDefinition) {
	o.User = v
}

func (o IndexUserRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if true {
		toSerialize["datasource"] = o.Datasource
	}
	if true {
		toSerialize["user"] = o.User
	}
	return json.Marshal(toSerialize)
}

type NullableIndexUserRequest struct {
	value *IndexUserRequest
	isSet bool
}

func (v NullableIndexUserRequest) Get() *IndexUserRequest {
	return v.value
}

func (v *NullableIndexUserRequest) Set(val *IndexUserRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexUserRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexUserRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexUserRequest(val *IndexUserRequest) *NullableIndexUserRequest {
	return &NullableIndexUserRequest{value: val, isSet: true}
}

func (v NullableIndexUserRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexUserRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


