/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// IconConfig Defines how to render an icon
type IconConfig struct {
	Color *string `json:"color,omitempty"`
	Key *string `json:"key,omitempty"`
	IconType *string `json:"iconType,omitempty"`
	// The filename for iconType.GLYPH icons
	Name *string `json:"name,omitempty"`
	// The URL to an image to be displayed for iconType.URL icons
	Url *string `json:"url,omitempty"`
}

// NewIconConfig instantiates a new IconConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIconConfig() *IconConfig {
	this := IconConfig{}
	return &this
}

// NewIconConfigWithDefaults instantiates a new IconConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIconConfigWithDefaults() *IconConfig {
	this := IconConfig{}
	return &this
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *IconConfig) GetColor() string {
	if o == nil || o.Color == nil {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetColorOk() (*string, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *IconConfig) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *IconConfig) SetColor(v string) {
	o.Color = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IconConfig) GetKey() string {
	if o == nil || o.Key == nil {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetKeyOk() (*string, bool) {
	if o == nil || o.Key == nil {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IconConfig) HasKey() bool {
	if o != nil && o.Key != nil {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IconConfig) SetKey(v string) {
	o.Key = &v
}

// GetIconType returns the IconType field value if set, zero value otherwise.
func (o *IconConfig) GetIconType() string {
	if o == nil || o.IconType == nil {
		var ret string
		return ret
	}
	return *o.IconType
}

// GetIconTypeOk returns a tuple with the IconType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetIconTypeOk() (*string, bool) {
	if o == nil || o.IconType == nil {
		return nil, false
	}
	return o.IconType, true
}

// HasIconType returns a boolean if a field has been set.
func (o *IconConfig) HasIconType() bool {
	if o != nil && o.IconType != nil {
		return true
	}

	return false
}

// SetIconType gets a reference to the given string and assigns it to the IconType field.
func (o *IconConfig) SetIconType(v string) {
	o.IconType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IconConfig) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IconConfig) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IconConfig) SetName(v string) {
	o.Name = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *IconConfig) GetUrl() string {
	if o == nil || o.Url == nil {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IconConfig) GetUrlOk() (*string, bool) {
	if o == nil || o.Url == nil {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *IconConfig) HasUrl() bool {
	if o != nil && o.Url != nil {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *IconConfig) SetUrl(v string) {
	o.Url = &v
}

func (o IconConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.Key != nil {
		toSerialize["key"] = o.Key
	}
	if o.IconType != nil {
		toSerialize["iconType"] = o.IconType
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableIconConfig struct {
	value *IconConfig
	isSet bool
}

func (v NullableIconConfig) Get() *IconConfig {
	return v.value
}

func (v *NullableIconConfig) Set(val *IconConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIconConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIconConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIconConfig(val *IconConfig) *NullableIconConfig {
	return &NullableIconConfig{value: val, isSet: true}
}

func (v NullableIconConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIconConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


