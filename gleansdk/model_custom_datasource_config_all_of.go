/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// CustomDatasourceConfigAllOf struct for CustomDatasourceConfigAllOf
type CustomDatasourceConfigAllOf struct {
	// If the datasource uses another datasource for identity info, then the name of the datasource. The identity datasource must exist already.
	IdentityDatasourceName *string `json:"identityDatasourceName,omitempty"`
	// If the datasource uses a specific product access group, then the name of that group.
	ProductAccessGroup *string `json:"productAccessGroup,omitempty"`
	// whether email is used to reference users in document ACLs and in group memberships.
	IsUserReferencedByEmail *bool `json:"isUserReferencedByEmail,omitempty"`
	// True if this datasource is used to push custom entities.
	IsEntityDatasource *bool `json:"isEntityDatasource,omitempty"`
	// True if this datasource will be used for testing purpose only. Documents from such a datasource wouldn't have any effect on search rankings.
	IsTestDatasource *bool `json:"isTestDatasource,omitempty"`
}

// NewCustomDatasourceConfigAllOf instantiates a new CustomDatasourceConfigAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCustomDatasourceConfigAllOf() *CustomDatasourceConfigAllOf {
	this := CustomDatasourceConfigAllOf{}
	var isEntityDatasource bool = false
	this.IsEntityDatasource = &isEntityDatasource
	var isTestDatasource bool = false
	this.IsTestDatasource = &isTestDatasource
	return &this
}

// NewCustomDatasourceConfigAllOfWithDefaults instantiates a new CustomDatasourceConfigAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCustomDatasourceConfigAllOfWithDefaults() *CustomDatasourceConfigAllOf {
	this := CustomDatasourceConfigAllOf{}
	var isEntityDatasource bool = false
	this.IsEntityDatasource = &isEntityDatasource
	var isTestDatasource bool = false
	this.IsTestDatasource = &isTestDatasource
	return &this
}

// GetIdentityDatasourceName returns the IdentityDatasourceName field value if set, zero value otherwise.
func (o *CustomDatasourceConfigAllOf) GetIdentityDatasourceName() string {
	if o == nil || o.IdentityDatasourceName == nil {
		var ret string
		return ret
	}
	return *o.IdentityDatasourceName
}

// GetIdentityDatasourceNameOk returns a tuple with the IdentityDatasourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatasourceConfigAllOf) GetIdentityDatasourceNameOk() (*string, bool) {
	if o == nil || o.IdentityDatasourceName == nil {
		return nil, false
	}
	return o.IdentityDatasourceName, true
}

// HasIdentityDatasourceName returns a boolean if a field has been set.
func (o *CustomDatasourceConfigAllOf) HasIdentityDatasourceName() bool {
	if o != nil && o.IdentityDatasourceName != nil {
		return true
	}

	return false
}

// SetIdentityDatasourceName gets a reference to the given string and assigns it to the IdentityDatasourceName field.
func (o *CustomDatasourceConfigAllOf) SetIdentityDatasourceName(v string) {
	o.IdentityDatasourceName = &v
}

// GetProductAccessGroup returns the ProductAccessGroup field value if set, zero value otherwise.
func (o *CustomDatasourceConfigAllOf) GetProductAccessGroup() string {
	if o == nil || o.ProductAccessGroup == nil {
		var ret string
		return ret
	}
	return *o.ProductAccessGroup
}

// GetProductAccessGroupOk returns a tuple with the ProductAccessGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatasourceConfigAllOf) GetProductAccessGroupOk() (*string, bool) {
	if o == nil || o.ProductAccessGroup == nil {
		return nil, false
	}
	return o.ProductAccessGroup, true
}

// HasProductAccessGroup returns a boolean if a field has been set.
func (o *CustomDatasourceConfigAllOf) HasProductAccessGroup() bool {
	if o != nil && o.ProductAccessGroup != nil {
		return true
	}

	return false
}

// SetProductAccessGroup gets a reference to the given string and assigns it to the ProductAccessGroup field.
func (o *CustomDatasourceConfigAllOf) SetProductAccessGroup(v string) {
	o.ProductAccessGroup = &v
}

// GetIsUserReferencedByEmail returns the IsUserReferencedByEmail field value if set, zero value otherwise.
func (o *CustomDatasourceConfigAllOf) GetIsUserReferencedByEmail() bool {
	if o == nil || o.IsUserReferencedByEmail == nil {
		var ret bool
		return ret
	}
	return *o.IsUserReferencedByEmail
}

// GetIsUserReferencedByEmailOk returns a tuple with the IsUserReferencedByEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatasourceConfigAllOf) GetIsUserReferencedByEmailOk() (*bool, bool) {
	if o == nil || o.IsUserReferencedByEmail == nil {
		return nil, false
	}
	return o.IsUserReferencedByEmail, true
}

// HasIsUserReferencedByEmail returns a boolean if a field has been set.
func (o *CustomDatasourceConfigAllOf) HasIsUserReferencedByEmail() bool {
	if o != nil && o.IsUserReferencedByEmail != nil {
		return true
	}

	return false
}

// SetIsUserReferencedByEmail gets a reference to the given bool and assigns it to the IsUserReferencedByEmail field.
func (o *CustomDatasourceConfigAllOf) SetIsUserReferencedByEmail(v bool) {
	o.IsUserReferencedByEmail = &v
}

// GetIsEntityDatasource returns the IsEntityDatasource field value if set, zero value otherwise.
func (o *CustomDatasourceConfigAllOf) GetIsEntityDatasource() bool {
	if o == nil || o.IsEntityDatasource == nil {
		var ret bool
		return ret
	}
	return *o.IsEntityDatasource
}

// GetIsEntityDatasourceOk returns a tuple with the IsEntityDatasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatasourceConfigAllOf) GetIsEntityDatasourceOk() (*bool, bool) {
	if o == nil || o.IsEntityDatasource == nil {
		return nil, false
	}
	return o.IsEntityDatasource, true
}

// HasIsEntityDatasource returns a boolean if a field has been set.
func (o *CustomDatasourceConfigAllOf) HasIsEntityDatasource() bool {
	if o != nil && o.IsEntityDatasource != nil {
		return true
	}

	return false
}

// SetIsEntityDatasource gets a reference to the given bool and assigns it to the IsEntityDatasource field.
func (o *CustomDatasourceConfigAllOf) SetIsEntityDatasource(v bool) {
	o.IsEntityDatasource = &v
}

// GetIsTestDatasource returns the IsTestDatasource field value if set, zero value otherwise.
func (o *CustomDatasourceConfigAllOf) GetIsTestDatasource() bool {
	if o == nil || o.IsTestDatasource == nil {
		var ret bool
		return ret
	}
	return *o.IsTestDatasource
}

// GetIsTestDatasourceOk returns a tuple with the IsTestDatasource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CustomDatasourceConfigAllOf) GetIsTestDatasourceOk() (*bool, bool) {
	if o == nil || o.IsTestDatasource == nil {
		return nil, false
	}
	return o.IsTestDatasource, true
}

// HasIsTestDatasource returns a boolean if a field has been set.
func (o *CustomDatasourceConfigAllOf) HasIsTestDatasource() bool {
	if o != nil && o.IsTestDatasource != nil {
		return true
	}

	return false
}

// SetIsTestDatasource gets a reference to the given bool and assigns it to the IsTestDatasource field.
func (o *CustomDatasourceConfigAllOf) SetIsTestDatasource(v bool) {
	o.IsTestDatasource = &v
}

func (o CustomDatasourceConfigAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IdentityDatasourceName != nil {
		toSerialize["identityDatasourceName"] = o.IdentityDatasourceName
	}
	if o.ProductAccessGroup != nil {
		toSerialize["productAccessGroup"] = o.ProductAccessGroup
	}
	if o.IsUserReferencedByEmail != nil {
		toSerialize["isUserReferencedByEmail"] = o.IsUserReferencedByEmail
	}
	if o.IsEntityDatasource != nil {
		toSerialize["isEntityDatasource"] = o.IsEntityDatasource
	}
	if o.IsTestDatasource != nil {
		toSerialize["isTestDatasource"] = o.IsTestDatasource
	}
	return json.Marshal(toSerialize)
}

type NullableCustomDatasourceConfigAllOf struct {
	value *CustomDatasourceConfigAllOf
	isSet bool
}

func (v NullableCustomDatasourceConfigAllOf) Get() *CustomDatasourceConfigAllOf {
	return v.value
}

func (v *NullableCustomDatasourceConfigAllOf) Set(val *CustomDatasourceConfigAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableCustomDatasourceConfigAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableCustomDatasourceConfigAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCustomDatasourceConfigAllOf(val *CustomDatasourceConfigAllOf) *NullableCustomDatasourceConfigAllOf {
	return &NullableCustomDatasourceConfigAllOf{value: val, isSet: true}
}

func (v NullableCustomDatasourceConfigAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCustomDatasourceConfigAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


