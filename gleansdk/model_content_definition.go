/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// ContentDefinition Describes text content or base64 encoded binary content
type ContentDefinition struct {
	MimeType string `json:"mimeType"`
	// text content. Only one of textContent or binary content can be specified
	TextContent *string `json:"textContent,omitempty"`
	// base64 encoded binary content. Only one of textContent or binary content can be specified
	BinaryContent *string `json:"binaryContent,omitempty"`
}

// NewContentDefinition instantiates a new ContentDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContentDefinition(mimeType string) *ContentDefinition {
	this := ContentDefinition{}
	this.MimeType = mimeType
	return &this
}

// NewContentDefinitionWithDefaults instantiates a new ContentDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContentDefinitionWithDefaults() *ContentDefinition {
	this := ContentDefinition{}
	return &this
}

// GetMimeType returns the MimeType field value
func (o *ContentDefinition) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *ContentDefinition) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *ContentDefinition) SetMimeType(v string) {
	o.MimeType = v
}

// GetTextContent returns the TextContent field value if set, zero value otherwise.
func (o *ContentDefinition) GetTextContent() string {
	if o == nil || o.TextContent == nil {
		var ret string
		return ret
	}
	return *o.TextContent
}

// GetTextContentOk returns a tuple with the TextContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDefinition) GetTextContentOk() (*string, bool) {
	if o == nil || o.TextContent == nil {
		return nil, false
	}
	return o.TextContent, true
}

// HasTextContent returns a boolean if a field has been set.
func (o *ContentDefinition) HasTextContent() bool {
	if o != nil && o.TextContent != nil {
		return true
	}

	return false
}

// SetTextContent gets a reference to the given string and assigns it to the TextContent field.
func (o *ContentDefinition) SetTextContent(v string) {
	o.TextContent = &v
}

// GetBinaryContent returns the BinaryContent field value if set, zero value otherwise.
func (o *ContentDefinition) GetBinaryContent() string {
	if o == nil || o.BinaryContent == nil {
		var ret string
		return ret
	}
	return *o.BinaryContent
}

// GetBinaryContentOk returns a tuple with the BinaryContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContentDefinition) GetBinaryContentOk() (*string, bool) {
	if o == nil || o.BinaryContent == nil {
		return nil, false
	}
	return o.BinaryContent, true
}

// HasBinaryContent returns a boolean if a field has been set.
func (o *ContentDefinition) HasBinaryContent() bool {
	if o != nil && o.BinaryContent != nil {
		return true
	}

	return false
}

// SetBinaryContent gets a reference to the given string and assigns it to the BinaryContent field.
func (o *ContentDefinition) SetBinaryContent(v string) {
	o.BinaryContent = &v
}

func (o ContentDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mimeType"] = o.MimeType
	}
	if o.TextContent != nil {
		toSerialize["textContent"] = o.TextContent
	}
	if o.BinaryContent != nil {
		toSerialize["binaryContent"] = o.BinaryContent
	}
	return json.Marshal(toSerialize)
}

type NullableContentDefinition struct {
	value *ContentDefinition
	isSet bool
}

func (v NullableContentDefinition) Get() *ContentDefinition {
	return v.value
}

func (v *NullableContentDefinition) Set(val *ContentDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableContentDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableContentDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentDefinition(val *ContentDefinition) *NullableContentDefinition {
	return &NullableContentDefinition{value: val, isSet: true}
}

func (v NullableContentDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


