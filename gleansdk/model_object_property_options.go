/*
Glean Indexing API

# Introduction In addition to the data sources that Glean has built-in support for, Glean also provides a REST API that enables customers to put arbitrary content in the search index. This is useful, for example, for doing permissions-aware search over content in internal tools that reside on-prem as well as for searching over applications that Glean does not currently support first class. In addition these APIs allow the customer to push organization data (people info, organization structure etc) into Glean.  # Early Access Please note that we are continually evolving the system so these APIs are considered “early access” and are subject to change. 

API version: 0.9.0
Contact: support@glean.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package gleansdk

import (
	"encoding/json"
)

// ObjectPropertyOptions Options for object properties.
type ObjectPropertyOptions struct {
	// The properties of the sub-object. These properties represent a nested object. For example, if this property represents a postal address, the subobjectProperties might be named street, city, and state.
	SubobjectProperties []PropertyDefinition `json:"subobjectProperties,omitempty"`
}

// NewObjectPropertyOptions instantiates a new ObjectPropertyOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectPropertyOptions() *ObjectPropertyOptions {
	this := ObjectPropertyOptions{}
	return &this
}

// NewObjectPropertyOptionsWithDefaults instantiates a new ObjectPropertyOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectPropertyOptionsWithDefaults() *ObjectPropertyOptions {
	this := ObjectPropertyOptions{}
	return &this
}

// GetSubobjectProperties returns the SubobjectProperties field value if set, zero value otherwise.
func (o *ObjectPropertyOptions) GetSubobjectProperties() []PropertyDefinition {
	if o == nil || o.SubobjectProperties == nil {
		var ret []PropertyDefinition
		return ret
	}
	return o.SubobjectProperties
}

// GetSubobjectPropertiesOk returns a tuple with the SubobjectProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectPropertyOptions) GetSubobjectPropertiesOk() ([]PropertyDefinition, bool) {
	if o == nil || o.SubobjectProperties == nil {
		return nil, false
	}
	return o.SubobjectProperties, true
}

// HasSubobjectProperties returns a boolean if a field has been set.
func (o *ObjectPropertyOptions) HasSubobjectProperties() bool {
	if o != nil && o.SubobjectProperties != nil {
		return true
	}

	return false
}

// SetSubobjectProperties gets a reference to the given []PropertyDefinition and assigns it to the SubobjectProperties field.
func (o *ObjectPropertyOptions) SetSubobjectProperties(v []PropertyDefinition) {
	o.SubobjectProperties = v
}

func (o ObjectPropertyOptions) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SubobjectProperties != nil {
		toSerialize["subobjectProperties"] = o.SubobjectProperties
	}
	return json.Marshal(toSerialize)
}

type NullableObjectPropertyOptions struct {
	value *ObjectPropertyOptions
	isSet bool
}

func (v NullableObjectPropertyOptions) Get() *ObjectPropertyOptions {
	return v.value
}

func (v *NullableObjectPropertyOptions) Set(val *ObjectPropertyOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectPropertyOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectPropertyOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectPropertyOptions(val *ObjectPropertyOptions) *NullableObjectPropertyOptions {
	return &NullableObjectPropertyOptions{value: val, isSet: true}
}

func (v NullableObjectPropertyOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectPropertyOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


